Q_0	to understand from php array to python	C_0_0	var = array ( number , number , number , number , number , number , number , number , number , number ) for ( i = number i < number i + + ) echo var [ i ] . string	1
Q_0	to understand from php array to python	C_0_1	var = [ number , number , number , number , number , number , number , number , number , number ] for var in var print ( str ( var ) + string )	0
Q_0	to understand from php array to python	C_0_2	example number for ( i = number i < number i + + ) echo php [ i ] = i + number	0
Q_0	to understand from php array to python	C_0_3	var = range ( number , number ) for var in var print ( var )	0
Q_0	to understand from php array to python	C_0_4	var = [ ] for var in range ( number ) var . append ( var + number ) print ( var [ _ number ] )	0
Q_0	to understand from php array to python	C_0_5	example number php = array ( number , number , number , number , number , number , number , number , number , number ) foreach ( php as value ) echo value . string	0
Q_0	to understand from php array to python	C_0_6	example number arr = array ( number , number , number , number ) foreach ( arr as value ) { value = value * number }	0
Q_0	to understand from php array to python	C_0_7	var = [ number , number , number , number ] var = [ var * number for var in var ]	0
Q_0	to understand from php array to python	C_0_8	example number arr = array ( string = > string , string = > string , string = > string ) foreach ( arr as key = > value ) { echo string }	0
Q_0	to understand from php array to python	C_0_9	var = { string string , string string , string string } for var , var in var . items ( ) print ( string ( var , var ) )	0
Q_0	to understand from php array to python	C_0_10	example number arr = array ( string , string , string ) while ( list ( key , value ) = each ( arr ) ) { echo string }	0
Q_0	to understand from php array to python	C_0_11	var = [ string , string , string ] for var , var in enumerate ( var ) print ( string ( var , var ) )	0
Q_0	to understand from php array to python	C_0_12	example number arr = array ( string , string , string ) while ( element = each ( arr ) ) { echo string key string value string }	0
Q_0	to understand from php array to python	C_0_13	example number products = array ( array ( string , string , string ) , array ( string , string , string ) , array ( string , string , string ) ) for ( row = number row < number row + + ) { for ( col = number col < number col + + ) { echo string . products [ row ] [ col ] } echo string }	0
Q_0	to understand from php array to python	C_0_14	var = [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] for var in var for item in var print ( string + item ) print ( string )	0
Q_0	to understand from php array to python	C_0_15	for var in products print ( string ( string . join ( var ) ) )	0
Q_1	how do i clear a stringio object	C_1_0	from string_io import string_io dir ( string_io ) [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] help ( string_io . truncate ) help on method truncate in module string_io truncate ( self , size = none ) unbound string_io . string_io method truncate the file string s current size , the file remains unchanged .	1
Q_1	how do i clear a stringio object	C_1_1	from io import string_io dir ( string_io ) [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] help ( string_io . truncate ) help on method_descriptor truncate ( . ) truncate size to pos . the pos argument defaults to the current file position , as returned by tell ( ) . the current file position is unchanged . returns the new absolute position .	0
Q_1	how do i clear a stringio object	C_1_2	from c_string_io import string_io s = string_io ( ) s . write ( string ) s . getvalue ( ) string s . truncate ( number ) s . getvalue ( ) string s . write ( string ) s . getvalue ( ) string	0
Q_1	how do i clear a stringio object	C_1_3	from io import string_io s = string_io ( ) s . write ( string ) number s . getvalue ( ) string s . truncate ( number ) number s . getvalue ( ) string s . write ( string ) number s . getvalue ( ) string	0
Q_1	how do i clear a stringio object	C_1_4	from c_string_io import string_io s = string_io ( ) s . write ( string ) number s . getvalue ( ) string s . truncate ( number ) number s . seek ( number ) number s . getvalue ( ) string s . write ( string ) number s . getvalue ( ) string	0
Q_1	how do i clear a stringio object	C_1_5	python number from timeit import timeit def truncate ( sio ) . sio . truncate ( number ) . return sio . def new ( sio ) . return string_io ( ) .	0
Q_1	how do i clear a stringio object	C_1_6	from string_io import string_io timeit ( lambda truncate ( string_io ( ) ) ) number . number timeit ( lambda new ( string_io ( ) ) ) number . number	0
Q_1	how do i clear a stringio object	C_1_7	timeit ( lambda truncate ( string_io ( string * number ) ) ) number . number timeit ( lambda new ( string_io ( string * number ) ) ) number . number	0
Q_1	how do i clear a stringio object	C_1_8	from c_string_io import string_io timeit ( lambda truncate ( string_io ( ) ) ) number . number timeit ( lambda new ( string_io ( ) ) ) number . number timeit ( lambda truncate ( string_io ( string * number ) ) ) number . number number timeit ( lambda new ( string_io ( string * number ) ) ) number . number	0
Q_1	how do i clear a stringio object	C_1_9	def truncate ( sio ) . sio . truncate ( number ) . sio . seek ( number ) . return sio . def new ( sio ) . return string_io ( ) .	0
Q_1	how do i clear a stringio object	C_1_10	from io import string_io timeit ( lambda truncate ( string_io ( ) ) ) number . number timeit ( lambda new ( string_io ( ) ) ) number . number	0
Q_1	how do i clear a stringio object	C_1_11	timeit ( lambda truncate ( string_io ( string * number ) ) ) number . number timeit ( lambda new ( string_io ( string * number ) ) ) number . number	0
Q_2	how to test the membership of multiple value in a list	C_2_0	all ( var in [ string , string , string , string ] for var in [ string , string ] ) true	1
Q_2	how to test the membership of multiple value in a list	C_2_1	string , string ( string , string ) string , number + number ( string , number ) string , string in string ( string , true )	0
Q_2	how to test the membership of multiple value in a list	C_2_2	set ( [ string , string ] ) . issubset ( set ( [ string , string , string , string ] ) ) true { string , string } < = { string , string , string , string } true	0
Q_2	how to test the membership of multiple value in a list	C_2_3	{ string , [ string ] } < = { string , [ string ] , string , string } traceback ( most recent call last ) file string , line number , in < module > type_error unhashable type string	0
Q_2	how to test the membership of multiple value in a list	C_2_4	var = [ [ string ] , string , string , string ] items = ( var for var in ( string , [ string ] ) ) all ( x in [ [ string ] , string , string , string ] for x in items ) true	0
Q_2	how to test the membership of multiple value in a list	C_2_5	var = set ( range ( number ) ) smallsubset = set ( range ( number ) ) timeit var > = smallsubset number ns number . number ns per loop ( mean std . dev . of number runs , number loops each ) timeit all ( var in var for var in smallsubset ) number ns number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_6	var = set ( range ( number ) ) bigsubset = set ( range ( number ) ) timeit var > = bigsubset number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each ) timeit all ( var in var for var in bigsubset ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_7	timeit bigset > = set ( bigsubseq ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_8	timeit set ( bigseq ) > = set ( bigsubseq ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_9	timeit all ( var in bigseq for var in bigsubseq ) number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_10	timeit bigset = set ( bigseq ) all ( var in bigset for var in bigsubseq ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_2	how to test the membership of multiple value in a list	C_2_11	timeit hugeiter = ( x * number for var in [ bigsubseq ] * number for x in var ) set ( bigset ) > = set ( hugeiter ) number . number s number ms per loop ( mean std . dev . of number runs , number loop each ) timeit hugeiter = ( x * number for var in [ bigsubseq ] * number for x in var ) all ( x in bigset for x in hugeiter ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	excel compare two csv file and show the difference	C_3_0	= = = = = = = the . txt files to play with _ file1 . txt string string number _ number , number number number , number number number , number number number , number _ file2 . txt string string number _ number , number number number , number number _ number , number number number , number = = = = = = = some diagnostic sql _ < null > indicates in f1 but not in f2 ( left join ) select t1 . ac , t1 . am , t2 . am from [ file1 . txt ] as t1 left join [ file2 . txt ] as t2 on ( t1 . ac = t2 . ac ) _ result ac file1 file2 number _ number _ number number number < null > number number number number number , number number , number _ < null > indicates not in the other file ( left join , union ) select t1 . ac , t1 . am , t2 . am from [ file1 . txt ] as t1 left join [ file2 . txt ] as t2 on ( t1 . ac = t2 . ac ) union select t2 . ac , t1 . am , t2 . am from [ file2 . txt ] as t2 left join [ file1 . txt ] as t1 on ( t1 . ac = t2 . ac ) _ result ac file1 file2 number _ number _ number number number < null > number < null > _ number number number number number number , number number , number _ the problems missing , different values select t1 . ac , t1 . am , t2 . am from [ file1 . txt ] as t1 left join [ file2 . txt ] as t2 on ( t1 . ac = t2 . ac ) where t2 . am is null or t1 . am < > t2 . am union select t2 . ac , t1 . am , t2 . am from [ file2 . txt ] as t2 left join [ file1 . txt ] as t1 on ( t1 . ac = t2 . ac ) where t1 . am is null or t1 . am < > t2 . am _ result ac file1 file2 number number < null > number < null > _ number number number number	1
Q_3	excel compare two csv file and show the difference	C_3_1	const ad_clip_string = number dim o_fs set o_fs = create_object ( string ) dim s_dir s_dir = o_fs . get_absolute_path_name ( string ) dim o_db set o_db = create_object ( string ) o_db . open string s_dir string string string dim s_sql dim s_fi_na w_script . echo string , string for each s_fi_na in array ( string , string ) w_script . echo string , s_fi_na w_script . echo o_fs . open_text_file ( string s_fi_na ) . read_all ( ) next w_script . echo string , string dim a_sql for each a_sql in array ( _ array ( string _ , join ( array ( _ string _ , string _ , string _ ) , string ) ) _ , array ( string _ , join ( array ( _ string _ , string _ , string _ , string _ , string _ , string _ , string _ ) , string ) ) _ , array ( string _ , join ( array ( _ string _ , string _ , string _ , string _ , string _ , string _ , string _ , string _ , string _ ) , string ) ) _ ) s_sql = a_sql ( number ) w_script . echo string , a_sql ( number ) w_script . echo s_sql dim o_rs set o_rs = o_db . execute ( s_sql ) w_script . echo string w_script . echo join ( array ( string , string , string ) , vb_tab ) w_script . echo o_rs . get_string ( ad_clip_string , , vb_tab , vb_cr_lf , string ) next o_db . close	0
Q_3	excel compare two csv file and show the difference	C_3_2	dim o_db set o_db = create_object ( string ) o_db . open string s_dir string string string s_sql = string dim o_rs set o_rs = o_db . execute ( s_sql ) w_script . echo o_rs . get_string ( ad_clip_string , , vb_tab , vb_cr_lf , string ) o_db . close	0
Q_3	excel compare two csv file and show the difference	C_3_3	o_fs . create_text_file ( . ) . write_line o_rs . get_string ( _ ad_clip_string , , string , vb_cr_lf , string )	0
Q_3	excel compare two csv file and show the difference	C_3_4	num0 num1 num2 num3 num4 number , number number , number number , number number , number number , number number , number number , number number , number number , number number , number	0
Q_3	excel compare two csv file and show the difference	C_3_5	num0 num1 num2 num3 num4 spot number , number number , number number , number number , number number , number number number , number number , number number , number number , number number , number number	0
Q_3	excel compare two csv file and show the difference	C_3_6	[ expected . txt ] col_name_header = true character_set = number format = delimited ( ) col1 = num0 float col2 = num1 float col3 = num2 float col4 = num3 float col5 = num4 float col6 = spot integer	0
Q_3	excel compare two csv file and show the difference	C_3_7	num0 num1 num2 num3 num4 number , number number , number number , number number , number number , number number , number number , number number , number number , number number , number	0
Q_3	excel compare two csv file and show the difference	C_3_8	num0 num1 num2 num3 num4 spot number , number number , number number , number number , number number , number number number , number number , number number , number number , number number , number number	0
Q_3	excel compare two csv file and show the difference	C_3_9	var = join ( array ( _ string _ , string _ , string _ , string _ , string _ , string _ , string _ , string _ , string _ ) , string )	0
Q_3	excel compare two csv file and show the difference	C_3_10	num0 num1 num2 num3 num4 spot number , number number number number number number number number number number number number	0
Q_4	how to create an object for a django model with a many to many field	C_4_0	var = sample ( ) var . save ( ) var . users . add ( number , number )	1
Q_4	how to create an object for a django model with a many to many field	C_4_1	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars . add ( var ) foo . bars . add ( bar2 )	0
Q_4	how to create an object for a django model with a many to many field	C_4_2	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number ) ) insert into string ( string , string ) values ( number , number ) select string . string from string where ( string . string = number and string . string in ( number ) ) insert into string ( string , string ) values ( number , number )	0
Q_4	how to create an object for a django model with a many to many field	C_4_3	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars . add ( var , bar2 )	0
Q_4	how to create an object for a django model with a many to many field	C_4_4	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_4	how to create an object for a django model with a many to many field	C_4_5	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars = [ var , bar2 ]	0
Q_4	how to create an object for a django model with a many to many field	C_4_6	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string , string . string , string . string from string where string . string = number select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_4	how to create an object for a django model with a many to many field	C_4_7	var = foo ( ) var . save ( ) var . bars = [ number , number ]	0
Q_4	how to create an object for a django model with a many to many field	C_4_8	insert into string ( string ) values ( ) select string . string , string . string , string . string from string where string . string = number select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_4	how to create an object for a django model with a many to many field	C_4_9	var = foo ( ) var . save ( ) var . bars . add ( number , number )	0
Q_4	how to create an object for a django model with a many to many field	C_4_10	insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_5	help use args in tuple match python function	C_5_0	var = [ var for var in dict_matcher ( dict1 , dict2 , number , number ) ]	1
Q_5	help use args in tuple match python function	C_5_1	var = list ( dict_matcher ( dict1 , dict2 , number , number ) )	0
Q_5	help use args in tuple match python function	C_5_2	def dict_matcher ( dict1 , dict2 , item1_pos , item2_pos , * args )	0
Q_5	help use args in tuple match python function	C_5_3	yield dict1 [ item1 ] [ item1_pos ] , dict2 [ item2 ] [ item2_pos ]	0
Q_5	help use args in tuple match python function	C_5_4	yield dict1 [ item1 ] [ number ] , dict2 [ item2 ] [ number ]	0
Q_5	help use args in tuple match python function	C_5_5	yield dict1 [ item1 ] , dict2 [ item2 ]	0
Q_5	help use args in tuple match python function	C_5_6	def dict_matcher ( dict1 , dict2 , item1_pos , item2_pos , other1_pos , other2_pos )	0
Q_5	help use args in tuple match python function	C_5_7	yield dict1 [ item1 ] [ other1_pos ] , dict2 [ item2 ] [ other2_pos ]	0
Q_5	help use args in tuple match python function	C_5_8	var = list ( dict_matcher ( dict1 , dict2 , number , number , number , number ) )	0
Q_5	help use args in tuple match python function	C_5_9	def dict_matcher ( dict1 , dict2 , item1_pos , item2_pos , other1_poss , other2_poss )	0
Q_5	help use args in tuple match python function	C_5_10	yield [ dict1 [ item1 ] [ var ] for var in other1_poss ] , [ dict2 [ item2 ] [ var ] for var in other2_poss ]	0
Q_5	help use args in tuple match python function	C_5_11	var = list ( dict_matcher ( dict1 , dict2 , number , number , ( number , number ) , ( number , number ) ) )	0
Q_6	try to understand insertion sort algorithm	C_6_0	[ number , number , number , number , number ]	1
Q_6	try to understand insertion sort algorithm	C_6_1	var = mylist [ number ] mylist [ number ] = mylist [ number ] mylist [ number ] = var	0
Q_6	try to understand insertion sort algorithm	C_6_2	[ number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_3	while ? ? ? key = mylist [ i ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_6	try to understand insertion sort algorithm	C_6_4	[ number , number , number , number , number ] [ number , number , number , number , number ] [ number , number , number , number , number ] [ number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_5	var = mylist [ i ] while var < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = var i _ = number	0
Q_6	try to understand insertion sort algorithm	C_6_6	var = mylist [ i ] while i > number and var < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = var i _ = number	0
Q_6	try to understand insertion sort algorithm	C_6_7	[ number , number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_8	[ number , number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_9	[ number , number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_10	[ number , number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_11	[ number , number , number , number , number , number ] [ number , number , number , number , number , number ] [ number , number , number , number , number , number ] [ number , number , number , number , number , number ]	0
Q_6	try to understand insertion sort algorithm	C_6_12	for var in range ( len ( mylist ) ) i = var key = mylist [ i ] while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_6	try to understand insertion sort algorithm	C_6_13	for var in range ( number , len ( mylist ) ) i = var key = mylist [ i ] while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_6	try to understand insertion sort algorithm	C_6_14	for var in range ( number , len ( mylist ) ) key = mylist [ var ] i = var while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] i _ = number mylist [ i ] = key	0
Q_7	correct print item in python	C_7_0	def get_ip ( server ) return server [ number ]	1
Q_7	correct print item in python	C_7_1	var = sorted ( servers , key = get_ip )	0
Q_7	correct print item in python	C_7_2	for var , var in groupby ( sorted_servers , get_ip )	0
Q_7	correct print item in python	C_7_3	var = set ( ) group_set = set ( ) service_set = set ( )	0
Q_7	correct print item in python	C_7_4	for machine , group , _ , service in servers machine_set . add ( machine ) group_set . add ( group ) service_set . add ( service )	0
Q_7	correct print item in python	C_7_5	var = string . join ( machine_set ) groups = string . join ( group_set ) services = string . join ( service_set ) print line ( string + var , groups , ip , services )	0
Q_7	correct print item in python	C_7_6	def get_ip ( server ) return server [ number ] sorted_servers = sorted ( var , key = get_ip ) print line ( string , string , string , string ) print line ( string , string , string , string ) for var , var in groupby ( sorted_servers , get_ip ) machine_set = set ( ) group_set = set ( ) service_set = set ( ) for machine , group , _ , service in var machine_set . add ( machine ) group_set . add ( group ) service_set . add ( service ) machines = string . join ( machine_set ) groups = string . join ( group_set ) services = string . join ( service_set ) print line ( string + machines , groups , var , services )	0
Q_7	correct print item in python	C_7_7	machine group ip services _ _ _ _ _ tom4 the perfect life number . number . number . number j_boss , tomcat _ jboss1 / tom1 the perfect life number . number . number . number j_boss , tomcat _ tom2 / jboss2 the perfect life number . number . number . number j_boss , tomcat _ jboss3 / tom3 the perfect life number . number . number . number j_boss , tomcat _ jboss4 the perfect life number . number . number . number j_boss , tomcat	0
Q_7	correct print item in python	C_7_8	var = [ ] for var , var in groupby ( sorted_servers , get_ip )	0
Q_7	correct print item in python	C_7_9	var = sorted ( var , key = lambda l l [ number ] )	0
Q_7	correct print item in python	C_7_10	for machine , group , ip , service in lines print line ( machine , group , ip , service )	0
Q_7	correct print item in python	C_7_11	for var in y_xml . get_elements_by_tag_name ( string ) name = var . get_attribute ( string ) group = var . parent_node . parent_node . get_attribute ( string ) ip = var . get_attribute ( string ) service = var . parent_node . get_attribute ( string ) servers . append ( ( name , group , ip , service ) )	0
Q_7	correct print item in python	C_7_12	var = string . join ( machine_set ) groups = string . join ( group_set ) services = string . join ( service_set )	0
Q_7	correct print item in python	C_7_13	var = string . join ( sorted ( machine_set ) ) groups = string . join ( sorted ( group_set ) ) services = string . join ( sorted ( service_set ) )	0
Q_8	pyparsing one query format to another one	C_8_0	word word ( string _ string , string _ string , string _ string , string ) field_qualifier string word + string search_term ( word + quoted_string ) field_qualifier ? and_op string or_op string and_term or_term ( and_op or_term ) * or_term atom ( or_op atom ) * atom search_term ( string and_term string )	1
Q_8	pyparsing one query format to another one	C_8_1	var , var , var , var = map ( suppress , string ) and_op = caseless_keyword ( string ) or_op = caseless_keyword ( string ) word = word ( alphanums + string ) field_qualifier = var + one_or_more ( word ) + var search_term = ( ( group ( one_or_more ( word ) ) quoted_string ) ( string ) + optional ( field_qualifier ) ( string ) ) expr = forward ( ) atom = search_term ( var + expr + var ) or_term = atom + zero_or_more ( or_op + atom ) and_term = or_term + zero_or_more ( and_op + or_term ) expr < < and_term	0
Q_8	pyparsing one query format to another one	C_8_2	var = ( and_op or_op ) + word ( alphanums + string )	0
Q_8	pyparsing one query format to another one	C_8_3	var = group ( lbrack + one_or_more ( word ) + rbrack ) search_term = group ( group ( one_or_more ( word ) quoted_string ) ( string ) + optional ( var ) ( string ) ) expr = forward ( ) atom = search_term ( lparen + expr + rparen ) or_term = group ( atom + zero_or_more ( or_op + atom ) ) and_term = group ( or_term + zero_or_more ( and_op + or_term ) ) expr < < and_term	0
Q_8	pyparsing one query format to another one	C_8_4	var = expr . parse_string ( test ) from pprint import pprint pprint ( var . as_list ( ) )	0
Q_8	pyparsing one query format to another one	C_8_5	[ [ [ [ [ [ [ string breast neoplasms string ] , [ string , string ] ] , string , [ [ string , string ] , [ string ] ] , string , [ [ string , string ] , [ string , string ] ] , string , [ [ string , string ] , [ string , string ] ] , string , [ [ string , string ] , [ string , string , string , string ] ] , string , [ [ string , string ] , [ string ] ] , string , [ [ string , string ] , [ string ] ] , string , [ [ string , string ] , [ string ] ] ] ] ] , string , [ [ [ [ [ string ] , [ string ] ] , string , [ [ string ] , [ string , string ] ] , string , [ [ string ] , [ string , string ] ] , string , [ [ string ] , [ string , string , string , string ] ] , string , [ [ string ] , [ string ] ] , string , [ [ string ] , [ string ] ] ] ] ] ] ]	0
Q_8	pyparsing one query format to another one	C_8_6	class parsed_object ( object ) def _init_ ( self , tokens ) self . tokens = tokens def query_string ( self ) string string string	0
Q_8	pyparsing one query format to another one	C_8_7	var = group ( one_or_more ( word ) quoted_string ) ( string ) + optional ( field_qualifier ) ( string ) atom = var ( lparen + expr + rparen ) or_term = atom + zero_or_more ( or_op + atom ) and_term = or_term + zero_or_more ( and_op + or_term ) expr < < and_term	0
Q_8	pyparsing one query format to another one	C_8_8	class search_term ( parsed_object ) def query_string ( self ) text = string . join ( self . tokens . search_text ) if self . tokens . field return string ( string . join ( var . lower ( ) for var in self . tokens . field [ number ] ) , text ) else return text search_term . set_parse_action ( search_term )	0
Q_8	pyparsing one query format to another one	C_8_9	class binary_operation ( parsed_object ) def query_string ( self ) joinstr = string self . op return joinstr . join ( var . query_string ( ) for var in self . tokens [ number number ] ) class or_operation ( binary_operation ) op = string class and_operation ( binary_operation ) op = string or_term . set_parse_action ( or_operation ) and_term . set_parse_action ( and_operation )	0
Q_8	pyparsing one query format to another one	C_8_10	class expr ( parsed_object ) def query_string ( self ) return string self . tokens [ number ] . query_string ( ) expr . set_parse_action ( expr )	0
Q_8	pyparsing one query format to another one	C_8_11	from pyparsing import * lbrack , rbrack , lparen , rparen = map ( suppress , string ) and_op = caseless_keyword ( string ) or_op = caseless_keyword ( string ) word = ( and_op or_op ) + word ( alphanums + string ) field_qualifier = group ( lbrack + one_or_more ( word ) + rbrack ) search_term = ( group ( one_or_more ( word ) quoted_string ) ( string ) + optional ( field_qualifier ) ( string ) ) expr = forward ( ) atom = search_term ( lparen + expr + rparen ) or_term = atom + zero_or_more ( or_op + atom ) and_term = or_term + zero_or_more ( and_op + or_term ) expr < < and_term	0
Q_8	pyparsing one query format to another one	C_8_12	( ( mesh terms string or acknowledgments breast cancer or figure / table caption breast cancer or section title breast cancer or body _ all words breast cancer or title breast cancer or abstract breast cancer or journal breast cancer ) and ( acknowledgments prevention or figure / table caption prevention or section title prevention or body _ all words prevention or title prevention or abstract prevention ) )	0
Q_9	shop list in python	C_9_0	var = [ ( string , { string , string , string } ) , ( string , { string , string , string } ) , ( string , { string , string , string , string , string } ) , ]	1
Q_9	shop list in python	C_9_1	print string print string for option , ( name , values ) in enumerate ( options , number ) print str ( option ) + string + name	0
Q_9	shop list in python	C_9_2	var , var = options [ int ( choose ) _ number ]	0
Q_9	shop list in python	C_9_3	try _ , values = options [ int ( choose ) _ number ] print string , string . join ( values ) + string except ( index_error , value_error ) print string	0
Q_9	shop list in python	C_9_4	for var in choose . split ( string ) var = var . strip ( ) try _ , values = options [ int ( var ) _ number ] print string , string . join ( values ) + string except ( index_error , value_error ) print string	0
Q_9	shop list in python	C_9_5	var = [ ] for var in choose . split ( string ) var = var . strip ( ) try _ , values = options [ int ( var ) _ number ] var . append ( values ) except ( index_error , value_error ) print string	0
Q_9	shop list in python	C_9_6	try shopping_list = [ options [ int ( var . strip ( ) ) _ number ] [ number ] for var in choose . split ( string ) ] except ( index_error , value_error ) print string	0
Q_9	shop list in python	C_9_7	print string + string . join ( string . join ( var ) for var in shopping_list ) + string	0
Q_9	shop list in python	C_9_8	print string + string . join ( itertools . chain . from_iterable ( shopping_list ) ) + string	0
Q_9	shop list in python	C_9_9	import itertools options = [ ( string , { string , string , string } ) , ( string , { string , string , string } ) , ( string , { string , string , string , string , string } ) , ] print string print string for option , ( name , values ) in enumerate ( options , number ) print str ( option ) + string + name choose = raw_input ( string ) try shopping_list = [ options [ int ( var . strip ( ) ) _ number ] [ number ] for var in choose . split ( string ) ] print string + string . join ( itertools . chain . from_iterable ( shopping_list ) ) + string except ( index_error , value_error ) print string	0
Q_9	shop list in python	C_9_10	what would you like to cook on weekend ? here are the options number . minced meat soup number . sunday soup number . gulas > number , number buy potatoes , frozen vegetable , minced meat , chicken with bones , noodles , soup vegetable .	0
Q_10	how to pass a c object to another c object with boost python	C_10_0	class_ < b > ( string , init < a > ( ) )	1
Q_10	how to pass a c object to another c object with boost python	C_10_1	class_ < b > ( string , init < object > ( ) )	0
Q_10	how to pass a c object to another c object with boost python	C_10_2	class a { public a ( long n ) n_ ( n ) { } long n ( ) { return n_ } private long n_ } class b { public b ( a a ) a_ ( a ) { } long do_something ( ) { return a_ . n ( ) * number } private a a_ }	0
Q_10	how to pass a c object to another c object with boost python	C_10_3	using namespace boost python boost_python_module ( example ) { class_ < a > ( string , init < long > ( ) ) class_ < b > ( string , init < a > ( ) ) . def ( string , b do_something ) }	0
Q_10	how to pass a c object to another c object with boost python	C_10_4	from example import a , b a = a ( number ) b = b ( a ) b . do_something ( ) number	0
Q_10	how to pass a c object to another c object with boost python	C_10_5	from example import a , b class c ( a ) . def _init_ ( self , n ) . a . _init_ ( self , n ) . c = c ( number ) b = b ( c ) b . do_something ( ) number	0
Q_10	how to pass a c object to another c object with boost python	C_10_6	from example import a , b class e pass . e = e ( ) b = b ( e ) traceback ( most recent call last ) file string , line number , in < module > boost . python . argument_error python argument types in b . _init_ ( b , instance ) did not match c + + signature _init_ ( _object * , a )	0
Q_10	how to pass a c object to another c object with boost python	C_10_7	struct a_from_python { static void * convertible ( py_object * obj_ptr ) { / / assume it is , for now . return obj_ptr } / / convert obj_ptr into an a instance static void construct ( py_object * obj_ptr , boost python converter rvalue_from_python_stage1_data * data ) { std cout < < string py_object_print ( obj_ptr , stdout , number ) std cout < < std endl / / obtain a handle to the string method on the python object . / / if it does not exists , then throw . py_object * n_ptr = boost python expect_non_null ( py_object_call_method ( obj_ptr , ( char * ) string , ( char * ) string ) ) long n_val = number n_val = py_int_as_long ( n_ptr ) py_decref ( n_ptr ) / / grab pointer to memory into which to construct the new a void * storage = ( ( boost python converter rvalue_from_python_storage < a > * ) data ) _ > storage . bytes / / in _ place construct the new a using the data / / extracted from the python object new ( storage ) a ( n_val ) / / stash the memory chunk pointer for later use by boost . python data _ > convertible = storage } a_from_python ( ) { boost python converter registry push_back ( convertible , construct , boost python type_id < a > ( ) ) } }	0
Q_10	how to pass a c object to another c object with boost python	C_10_8	using namespace boost python boost_python_module ( example ) { / / register the from _ python converter for a a_from_python ( ) class_ < a > ( string , init < long > ( ) ) class_ < b > ( string , init < a > ( ) ) . def ( string , b do_something ) }	0
Q_10	how to pass a c object to another c object with boost python	C_10_9	from example import a , b a = a ( number ) b = b ( a ) b . do_something ( ) number class d . def _init_ ( self , n ) . self . n = n . def get_num ( self ) . return self . n . d = d ( number ) b = b ( d ) constructing a from < _main_ . d instance at number > b . do_something ( ) number class e pass . e = e ( ) b = b ( e ) constructing a from < _main_ . e instance at number > traceback ( most recent call last ) file string , line number , in < module > attribute_error get_num	0
Q_10	how to pass a c object to another c object with boost python	C_10_10	from example import a , b def monkey_patch_b ( )	0
Q_10	how to pass a c object to another c object with boost python	C_10_11	from example_ext import a , b a = a ( number ) b = b ( a ) b . do_something ( ) number class d . def _init_ ( self , n ) . self . n = n . def get_num ( self ) . return self . n . d = d ( number ) b = b ( d ) b . do_something ( ) number class e pass . e = e ( ) b = b ( e ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in new_init a = obj if isinstance ( obj , a ) else construct_a ( obj ) file string , line number , in construct_a return a ( obj . get_num ( ) ) attribute_error e instance has no attribute string	0
Q_11	print python list in group of tagint	C_11_0	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next print string . join ( string ( itn ( ) , itn ( ) , itn ( ) ) for var in xrange ( a ) ) + ( string ( itn ( ) , itn ( ) ) if b = = number else string itn ( ) if b = = number else string )	1
Q_11	print python list in group of tagint	C_11_1	sea mountain desert emma cathy kate ii uuuuuuuuuuuuuuuuuuu aaa round flat sharp blueberry banana apple red purple white hen tiger	0
Q_11	print python list in group of tagint	C_11_2	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] maxel = max ( len ( var ) for var in var ) a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next form = string ( maxel , maxel , maxel ) print string . join ( form ( itn ( ) , itn ( ) , itn ( ) ) for i in xrange ( a ) ) + ( string ( maxel , maxel ) ( itn ( ) , itn ( ) ) if b = = number else string ma itn ( ) if b = = number else string )	0
Q_11	print python list in group of tagint	C_11_3	sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp blueberry banana apple red purple white hen tiger	0
Q_11	print python list in group of tagint	C_11_4	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] maxel0 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) maxel1 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) maxel2 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next form = string ( maxel0 , maxel1 , maxel2 ) print string . join ( form ( itn ( ) , itn ( ) , itn ( ) ) for var in xrange ( a ) ) + ( string ( maxel0 , maxel1 ) ( itn ( ) , itn ( ) ) if b = = number else string maxel0 itn ( ) if b = = number else string )	0
Q_11	print python list in group of tagint	C_11_5	sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple red purple white hen tiger	0
Q_11	print python list in group of tagint	C_11_6	from itertools import imap , islice li = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string string , string , string , string , string , string , string ] print string len ( li ) def cols_print ( li , nc ) maxel = tuple ( max ( imap ( len , islice ( li , var , none , nc ) ) ) for var in xrange ( nc ) ) nblines , tail = divmod ( len ( li ) , nc ) stakes = ( nc _ number ) * [ string ] + [ string ] form = string . join ( stakes ) maxel itn = iter ( li ) . next print string . join ( form tuple ( itn ( ) for g in xrange ( nc ) ) for i in xrange ( nblines ) ) if tail print string . join ( stakes [ nc _ tail ] ) maxel [ number tail ] tuple ( li [ _ tail ] ) + string else print for nc in xrange ( number , number ) cols_print ( li , nc ) print string	0
Q_11	print python list in group of tagint	C_11_7	len of li = = number sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini _ sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini _ sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini _ sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini _ sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini _	0
Q_11	print python list in group of tagint	C_11_8	var = tuple ( max ( imap ( len , islice ( li , st , none , nc ) ) ) + number	0
Q_11	print python list in group of tagint	C_11_9	from itertools import imap , islice li = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string string , string , string , string , string , string , string ] print string len ( li ) def cols_print ( li , nc ) maxel = tuple ( max ( imap ( len , islice ( li , var , none , nc ) ) ) + number for var in xrange ( nc ) ) nblines , tail = divmod ( len ( li ) , nc ) stakes = nc * [ string ] form = string . join ( stakes ) maxel itn = iter ( li ) . next print string . join ( form tuple ( itn ( ) for g in xrange ( nc ) ) for i in xrange ( nblines ) ) if tail print string . join ( stakes [ nc _ tail ] ) maxel [ number tail ] tuple ( li [ _ tail ] ) + string else print for nc in xrange ( number , number ) cols_print ( li , nc ) print string	0
Q_11	print python list in group of tagint	C_11_10	len of li = = number sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple heeeeeeeeeeen tiger snakered purple white atlantic pacific antarctic bellini mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm	0
Q_12	league table in python _ it do not insert team into the list	C_12_0	def _repr_ ( self ) return string { } string . format ( self . _name )	1
Q_12	league table in python _ it do not insert team into the list	C_12_1	def remove_team ( self , team ) self . _table . remove ( team ) def return_position ( self , team ) return self . _table . index ( team )	0
Q_12	league table in python _ it do not insert team into the list	C_12_2	def _eq_ ( self , other ) return self . _name = = other . _name	0
Q_12	league table in python _ it do not insert team into the list	C_12_3	def remove_team ( self , team_name ) self . _table . remove ( team ( team_name ) ) def return_position ( self , team_name ) return self . _table . index ( team ( team_name ) )	0
Q_12	league table in python _ it do not insert team into the list	C_12_4	def remove_team ( self , team_name ) self . _table = [ var for var in self . _table if var . _name = team_name ] def return_position ( self , team_name ) return [ var . _name for var in self . _table ] . index ( team_name )	0
Q_12	league table in python _ it do not insert team into the list	C_12_5	self . _table = [ var for var in self . _table if var . _name = team_name ] temp = [ ] for var in self . _table if var . _name = team_name temp . append ( var ) self . _table = temp	0
Q_12	league table in python _ it do not insert team into the list	C_12_6	for var , var in enumerate ( mylist ) if var = = value_to_remove del mylist [ var ]	0
Q_12	league table in python _ it do not insert team into the list	C_12_7	def return_position ( self , team_name ) return [ var . _name for var in self . _table ] . index ( team_name )	0
Q_12	league table in python _ it do not insert team into the list	C_12_8	var = [ ] for var in self . _table var . append ( var . _name )	0
Q_12	league table in python _ it do not insert team into the list	C_12_9	def _init_ ( self ) self . _table = { } def add_team ( self , name ) self . _table [ name ] = team ( name ) def remove_team ( self , team_name ) del self . _table [ team_name ] def return_position ( self , team_name ) return team_name def update_league ( self , team1_name1 , team_name2 , score1 , score2 ) if score1 > score2 self . _table [ team_name1 ] . win ( ) self . _table [ team_name2 ] . loss ( ) elif score1 = = score2 self . _table [ team_name1 ] . draw ( ) self . _table [ team_name2 ] . draw ( ) elif score1 < score2 self . _table [ team_name1 ] . loss ( ) self . _table [ team_name2 ] . win ( )	0
Q_12	league table in python _ it do not insert team into the list	C_12_10	def add_team ( ) name = input ( string ) l . add_team ( name ) def remove_team ( ) team_to_remove = input ( string ) l . remove_team ( team_to_remove ) def record_game ( ) team1 = input ( string ) ans1 = int ( input ( string ) ) team2 = input ( string ) ans2 = int ( input ( string ) ) l . update_league ( team1 , team2 , ans1 , ans2 ) optionsdict = { string add_team , string l . display_list , string l . save_list , string l . load_list , string remove_team , string record_game , } def options ( x ) func = optionsdict . get ( x ) if func func ( )	0
Q_13	how to implement a particle engine	C_13_0	class particle ( ) def _init_ ( self , col , size , * strategies ) self . x , self . y = number , number self . col = col self . alive = number self . strategies = strategies self . size = size def kill ( self ) self . alive = _ number	1
Q_13	how to implement a particle engine	C_13_1	def ascending ( speed ) def _ascending ( particle ) particle . y _ = speed return _ascending	0
Q_13	how to implement a particle engine	C_13_2	def kill_at ( max_x , max_y ) def _kill_at ( particle ) if particle . x < _ max_x or particle . x > max_x or particle . y < _ max_y or particle . y > max_y particle . kill ( ) return _kill_at	0
Q_13	how to implement a particle engine	C_13_3	def age ( amount ) def _age ( particle ) particle . alive + = amount return _age	0
Q_13	how to implement a particle engine	C_13_4	def fan_out ( modifier ) def _fan_out ( particle ) d = particle . alive / modifier d + = number particle . x + = random . randint ( _ d , d ) return _fan_out	0
Q_13	how to implement a particle engine	C_13_5	def wind ( direction , strength ) def _wind ( particle ) if random . randint ( number , number ) < strength particle . x + = direction return _wind	0
Q_13	how to implement a particle engine	C_13_6	def smoke_machine ( ) colors = { number grey , number dark_grey , number light_grey } def create ( ) for var in xrange ( random . choice ( [ number , number , number , number , number , number , number , number , number , number ] ) ) behaviour = age ( number ) , ascending ( number ) , fan_out ( number ) , wind ( number , number ) , kill_at ( number , number ) p = particle ( colors [ random . randint ( number , number ) ] , random . randint ( number , number ) , * behaviour ) yield p while true yield create ( )	0
Q_13	how to implement a particle engine	C_13_7	var = smoke_machine ( ) list ( next ( var ) ) [ ] list ( next ( var ) ) [ < particle . particle instance at number > , < particle . particle instance at number ad9030 > ] list ( next ( var ) ) [ ] list ( next ( var ) ) [ ] list ( next ( var ) ) [ < particle . particle instance at number > ] list ( next ( var ) ) [ < particle . particle instance at number > , < particle . particle instance at number ad93_c8 > ] list ( next ( var ) ) [ < particle . particle instance at number > ]	0
Q_13	how to implement a particle engine	C_13_8	class emitter ( object ) def _init_ ( self , pos = ( number , number ) ) self . particles = [ ] self . pos = pos self . factories = [ ] def add_factory ( self , factory , pre_fill = number ) self . factories . append ( factory ) tmp = [ ] for var in xrange ( pre_fill ) n = next ( factory ) tmp . extend ( n ) for p in tmp p . move ( ) self . particles . extend ( tmp ) def update ( self ) for f in self . factories self . particles . extend ( next ( f ) ) for p in self . particles [ ] p . move ( ) if p . alive = = _ number self . particles . remove ( p ) def draw ( self , screen , position_translater_func ) for p in self . particles target_pos = position_translater_func ( map ( sum , zip ( ( p . x , p . y ) , self . pos ) ) ) pygame . draw . circle ( screen , p . col , target_pos , int ( p . size ) )	0
Q_13	how to implement a particle engine	C_13_9	for var in self . emitter var . draw ( screen , self . camera . apply )	0
Q_13	how to implement a particle engine	C_13_10	for var in self . emitter var . update ( )	0
Q_13	how to implement a particle engine	C_13_11	import pygame from pygame import * from particle import emitter , smoke_machine win_width = number _ number win_height = number _ number half_width = int ( win_width / number ) half_height = int ( win_height / number ) display = ( win_width , win_height ) depth = number flags = number camera_slack = number levels = { number { string [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , ] , string [ ( number , number ) ] } , number { string [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , ] , string [ ( number , number ) , ( number , number ) , ( number , number ) ] } } . class game_scene ( scene ) def _init_ ( self , levelno ) super ( game_scene , self ) . _init_ ( ) self . bg = surface ( ( number , number ) ) self . bg . convert ( ) self . bg . fill ( color ( string ) ) up = left = right = false self . entities = pygame . sprite . group ( ) self . player = player ( number , number ) self . player . scene = self self . platforms = [ ] self . levelno = levelno levelinfo = levels [ levelno ] self . enemies = [ enemy ( * var ) for var in levelinfo [ string ] ] level = levelinfo [ string ] total_level_width = len ( level [ number ] ) * number total_level_height = len ( level ) * number self . emitter = [ ]	0
Q_13	how to implement a particle engine	C_13_12	particle . py import pygame , random def ascending ( speed ) def _ascending ( particle ) particle . y _ = speed return _ascending def kill_at ( max_x , max_y ) def _kill_at ( particle ) if particle . x < _ max_x or particle . x > max_x or particle . y < _ max_y or particle . y > max_y particle . kill ( ) return _kill_at def age ( amount ) def _age ( particle ) particle . alive + = amount return _age def fan_out ( modifier ) def _fan_out ( particle ) d = particle . alive / modifier d + = number particle . x + = random . randint ( _ d , d ) return _fan_out def wind ( direction , strength ) def _wind ( particle ) if random . randint ( number , number ) < strength particle . x + = direction return _wind class particle ( ) def _init_ ( self , col , size , * strategies ) self . x , self . y = number , number self . col = col self . alive = number self . strategies = strategies self . size = size def kill ( self ) self . alive = _ number	0
Q_13	how to implement a particle engine	C_13_13	def grow ( amount ) def _grow ( particle ) if random . randint ( number , number ) < particle . alive / number particle . size + = amount return _grow	0
Q_14	python in_file with loop	C_14_0	var = float ( int ( in_file . readline ( ) . split ( ) )	1
Q_14	python in_file with loop	C_14_1	var = float ( int ( in_file . readline ( ) . split ( ) ) )	0
Q_14	python in_file with loop	C_14_2	var = [ float ( int ( var ) ) for var in in_file . readline ( ) . split ( ) ]	0
Q_14	python in_file with loop	C_14_3	var = in_file . readline ( ) . split ( ) for var in range ( len ( var ) ) var [ var ] = float ( int ( var [ var ] ) )	0
Q_14	python in_file with loop	C_14_4	var = float ( int ( number [ number ] * . number + number [ number ] * . number + number [ number ] * . number ) )	0
Q_14	python in_file with loop	C_14_5	"print ( string s score is string bacons . "" )"	0
Q_14	python in_file with loop	C_14_6	"name [ number , len ( name ) ] "" s score is number . number bacons ."	0
Q_14	python in_file with loop	C_14_7	"print ( name , string s score is string bacons . "" )"	0
Q_14	python in_file with loop	C_14_8	"george "" s score is number . number bacons ."	0
Q_14	python in_file with loop	C_14_9	print ( string s score is { } bacons string . format ( name , avg ) )	0
Q_14	python in_file with loop	C_14_10	print ( name , string , avg , string )	0
Q_14	python in_file with loop	C_14_11	def main ( ) in_file = open ( string , string ) num_vals = int ( in_file . readline ( ) ) for var in range ( num_vals ) name = in_file . readline ( )	0
Q_15	sum value of tagint _d array on index	C_15_0	nested loop version import numpy as np n = number m = number a = np . zeros ( ( m , n ) ) b = np . random . randint ( m , size = n )	1
Q_15	sum value of tagint _d array on index	C_15_1	for var in range ( m ) for j in range ( n ) a [ var , j ] = c [ j , b = = var ] . sum ( )	0
Q_15	sum value of tagint _d array on index	C_15_2	var = np . arange ( m ) [ , np . newaxis ] mask = ( b = = var ) . astype ( int ) for var in range ( n ) a [ , var ] = ( c [ var ] * mask ) . sum ( axis = _ number )	0
Q_15	sum value of tagint _d array on index	C_15_3	b array ( [ number , number , number , number , number ] ) i array ( [ [ number ] , [ number ] ] ) b = = i array ( [ [ false , false , false , false , true ] , [ true , true , true , true , false ] ] , dtype = bool )	0
Q_15	sum value of tagint _d array on index	C_15_4	var = ( b = = i ) . astype ( int ) array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_15	sum value of tagint _d array on index	C_15_5	c [ j ] array ( [ number . number , number . number , number . number , number . number , number . number ] ) c [ j ] * mask array ( [ [ number . , number . , number . , number . , number . number ] , [ number . number , number . number , number . number , number . number , number . ] ] )	0
Q_15	sum value of tagint _d array on index	C_15_6	( c [ j ] * mask ) . sum ( axis = _ number ) array ( [ number . number , number . number ] )	0
Q_15	sum value of tagint _d array on index	C_15_7	var = np . arange ( m ) [ , np . newaxis , np . newaxis ] mask = ( b = = var ) . astype ( int ) a = ( c * mask ) . sum ( axis = _ number )	0
Q_15	sum value of tagint _d array on index	C_15_8	var = ( b = = np . arange ( m ) [ , np . newaxis ] ) . dot ( c . t )	0
Q_15	sum value of tagint _d array on index	C_15_9	var , var = number , number timeit loops ( b , c , var ) number loops , best of number number us per loop timeit k_vectorized ( b , c , var ) number loops , best of number number us per loop timeit vectorized ( b , c , var ) number loops , best of number number . number us per loop timeit askewchan ( b , c , var ) number loops , best of number number . number us per loop timeit einsum ( b , c , var ) number loops , best of number number . number us per loop timeit dsm ( b , c , var ) number loops , best of number number . number us per loop	0
Q_15	sum value of tagint _d array on index	C_15_10	var , var = number , number timeit loops ( b , c , var ) number loops , best of number number . number ms per loop timeit k_vectorized ( b , c , var ) number loops , best of number number . number ms per loop timeit ik_vectorized ( b , c , var ) number loops , best of number number us per loop timeit vectorized ( b , c , var ) number loops , best of number number us per loop timeit askewchan ( b , c , var ) number loops , best of number number us per loop timeit einsum ( b , c , var ) number loops , best of number number us per loop timeit dsm ( b , c , var ) number loops , best of number number . number us per loop	0
Q_16	fast interpolation of grid data	C_16_0	import numpy as np import scipy . ndimage as ndimage data = np . arange ( number ) . reshape ( number , number ) print string , data print string , ndimage . zoom ( data , number )	1
Q_16	fast interpolation of grid data	C_16_1	original [ [ number number number ] [ number number number ] [ number number number ] ] zoomed by number x [ [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] ]	0
Q_16	fast interpolation of grid data	C_16_2	var = np . arange ( number ) . reshape ( number , number , number ) print string , var print string , ndimage . zoom ( var , number ) . shape	0
Q_16	fast interpolation of grid data	C_16_3	original [ [ [ number number number ] [ number number number ] [ number number number ] ] [ [ number number number ] [ number number number ] [ number number number ] ] [ [ number number number ] [ number number number ] [ number number number ] ] ] zoomed by number x gives an array of shape ( number , number , number )	0
Q_16	fast interpolation of grid data	C_16_4	print string print ndimage . zoom ( data , ( number , number , number ) )	0
Q_16	fast interpolation of grid data	C_16_5	zoomed by number x along the last two axes [ [ [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] ] [ [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] ] [ [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] [ number number number number number number ] ] ]	0
Q_16	fast interpolation of grid data	C_16_6	import numpy as np import scipy . ndimage as ndimage data = np . arange ( number ) . reshape ( number , number , number ) print string , data print string print ndimage . map_coordinates ( data , [ [ number . number ] , [ number . number ] , [ number . number ] ] )	0
Q_16	fast interpolation of grid data	C_16_7	original [ [ [ number number number ] [ number number number ] [ number number number ] ] [ [ number number number ] [ number number number ] [ number number number ] ] [ [ number number number ] [ number number number ] [ number number number ] ] ] sampled at number . number , number . number , number . number [ number ]	0
Q_16	fast interpolation of grid data	C_16_8	in [ number ] ndimage . map_coordinates ( data . astype ( float ) , [ [ number . number ] , [ number . number ] , [ number . number ] ] ) out [ number ] array ( [ number . number ] )	0
Q_16	fast interpolation of grid data	C_16_9	var = np . linspace ( number , number , number ) yi = number . number * var zi = number . number * var print ndimage . map_coordinates ( data , [ zi , yi , var ] )	0
Q_16	fast interpolation of grid data	C_16_10	[ number number number number number number number number number number ]	0
Q_16	fast interpolation of grid data	C_16_11	in [ number ] ndimage . map_coordinates ( data , [ zi , yi , xi ] , cval = _ number ) out [ number ] array ( [ number , number , number , number , number , number , number , number , _ number , _ number ] )	0
Q_16	fast interpolation of grid data	C_16_12	in [ number ] ndimage . map_coordinates ( data , [ zi , yi , xi ] , mode = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] )	0
Q_16	fast interpolation of grid data	C_16_13	var = np . linspace ( number , number , number ) yi , zi = np . zeros_like ( var ) , np . zeros_like ( var )	0
Q_16	fast interpolation of grid data	C_16_14	in [ number ] ndimage . map_coordinates ( data , [ zi , yi , xi ] ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] )	0
Q_16	fast interpolation of grid data	C_16_15	in [ number ] ndimage . map_coordinates ( data , [ zi , yi , xi ] , mode = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] ) in [ number ] ndimage . map_coordinates ( data , [ zi , yi , xi ] , mode = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] )	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_0	df . loc [ df [ string ] = = some_value ]	1
Q_17	select row from a data_frame base on value in a column in panda	C_17_1	df . loc [ df [ string ] . isin ( some_values ) ]	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_2	df . loc [ ( df [ string ] = = some_value ) df [ string ] . isin ( some_values ) ]	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_3	df . loc [ df [ string ] = some_value ]	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_4	df . loc [ df [ string ] . isin ( some_values ) ]	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_5	import pandas as pd import numpy as np df = pd . data_frame ( { string string . split ( ) , string string . split ( ) , string np . arange ( number ) , string np . arange ( number ) * number } ) print ( df )	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_6	a b c d number foo one number number number foo two number number number foo two number number number foo one number number number foo three number number	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_7	print ( df . loc [ df [ string ] . isin ( [ string , string ] ) ] )	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_8	a b c d number foo one number number number bar one number number number bar three number number number foo one number number number foo three number number	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_9	var = var . set_index ( [ string ] ) print ( var . loc [ string ] )	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_10	a c d b one foo number number one bar number number one foo number number	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_11	df . loc [ df . index . isin ( [ string , string ] ) ]	0
Q_17	select row from a data_frame base on value in a column in panda	C_17_12	a c d b one foo number number one bar number number two foo number number two foo number number two bar number number one foo number number	0
Q_18	reference individual dicts in the one line tree	C_18_0	def paths ( tree , path = ( ) ) for var , var in tree . items ( ) if var yield from paths ( var , path + ( var , ) ) else yield path + ( var , )	1
Q_18	reference individual dicts in the one line tree	C_18_1	def prefix_paths ( prefix_length , tree , path = ( ) ) for var , var in tree . items ( ) if var and len ( path ) + number < prefix_length yield from prefix_paths ( prefix_length , var , path + ( var , ) ) else yield path + ( var , )	0
Q_18	reference individual dicts in the one line tree	C_18_2	var = list ( prefix_paths ( number , taxonomy ) ) print ( var ) [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ]	0
Q_18	reference individual dicts in the one line tree	C_18_3	var = itertools . chain . from_iterable keys = var ( prefix_paths ( number , taxonomy ) ) unique_keys = tuple ( set ( keys ) ) print ( unique_keys ) ( string , string , string , string , string , string , string )	0
Q_18	reference individual dicts in the one line tree	C_18_4	taxonomy [ string ] [ string ] [ string ]	0
Q_18	reference individual dicts in the one line tree	C_18_5	dicts ( taxonomy ) [ string ] [ string ] [ string ]	0
Q_18	reference individual dicts in the one line tree	C_18_6	dicts ( taxonomy [ string ] [ string ] [ string ] )	0
Q_18	reference individual dicts in the one line tree	C_18_7	def subtree ( tree , three_keys ) return tree [ three_keys [ number ] ] [ three_keys [ number ] ] [ three_keys [ number ] ]	0
Q_18	reference individual dicts in the one line tree	C_18_8	def subtree ( tree , keys ) while keys tree , keys = tree [ keys [ number ] ] , keys [ number ] return tree	0
Q_18	reference individual dicts in the one line tree	C_18_9	subtree ( taxonomy , ( string , string , string ) )	0
Q_18	reference individual dicts in the one line tree	C_18_10	{ string { string { string { string { } } } ,	0
Q_18	reference individual dicts in the one line tree	C_18_11	pprint . pprint ( subtree ( dicts ( taxonomy ) , ( string , string , string ) ) )	0
Q_18	reference individual dicts in the one line tree	C_18_12	{ string { string { string { string { } } } , string { string { string { } } , string { string { } } } } } }	0
Q_19	numpy unique _ get output with consistent depth	C_19_0	var = np . array ( [ [ number , number , number ] , [ number , number , number ] ] )	1
Q_19	numpy unique _ get output with consistent depth	C_19_1	in [ number ] q . size out [ number ] number	0
Q_19	numpy unique _ get output with consistent depth	C_19_2	in [ number ] q = np . empty ( number , dtype = string ) in [ number ] q [ ] = [ [ number , number , number ] , [ number , number , number ] ] in [ number ] q . size out [ number ] number	0
Q_19	numpy unique _ get output with consistent depth	C_19_3	in [ number ] np . unique ( q ) out [ number ] array ( [ [ number , number , number ] ] , dtype = object )	0
Q_19	numpy unique _ get output with consistent depth	C_19_4	in [ number ] q = np . array ( [ [ number , number , number ] , [ number , number , number ] ] ) in [ number ] q2 = np . empty ( number , dtype = string ) in [ number ] q2 [ ] = [ [ number , number , number ] , [ number , number , number ] ] in [ number ] q out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] ) in [ number ] q2 out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] , dtype = object )	0
Q_19	numpy unique _ get output with consistent depth	C_19_5	in [ number ] np . unique ( q ) out [ number ] array ( [ number , number , number , number ] ) in [ number ] np . unique ( q2 ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] , dtype = object )	0
Q_19	numpy unique _ get output with consistent depth	C_19_6	in [ number ] np . array ( [ np . unique ( q ) . tolist ( ) ] , dtype = string ) out [ number ] array ( [ [ number , number , number , number ] ] , dtype = object )	0
Q_19	numpy unique _ get output with consistent depth	C_19_7	in [ number ] np . atleast_2d ( np . unique ( q ) ) out [ number ] array ( [ [ number , number , number , number ] ] )	0
Q_19	numpy unique _ get output with consistent depth	C_19_8	array ( [ [ number , number , number ] , [ number , number , number ] ] , dtype = object )	0
Q_19	numpy unique _ get output with consistent depth	C_19_9	var = np . empty ( number , dtype = string )	0
Q_19	numpy unique _ get output with consistent depth	C_19_10	in [ number ] set ( map ( tuple , ( [ [ number , number , number ] , [ number , number , number ] ] ) ) ) out [ number ] { ( number , number , number ) , ( number , number , number ) } in [ number ] timeit set ( map ( tuple , ( [ [ number , number , number ] , [ number , number , number ] ] ) ) ) number loops , best of number number . number number s per loop in [ number ] timeit np . unique ( q2 ) number loops , best of number number . number s per loop	0
Q_20	calculate previous chance figure for use in chi square test	C_20_0	date , x0 , cls , x1 , x2 , x3 , tag , name number number / number number / number , data , class xpv , number , number yo + , number , number , george smith number number / number number / number , data , class xpv , number , number yo + , number , number , ted james number number / number number / number , data , class xpv , number , number yo + , number , number , emma lilly number number / number number / number , data , class xpv , number , number yo + , number , number , george smith .	1
Q_20	calculate previous chance figure for use in chi square test	C_20_1	import pandas as pd df = pd . data_frame . from_csv ( string , index_col = none )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_2	date x0 cls x1 x2 x3 tag name number number number / number number / number data class xpv number number yo + number number george smith number number number / number number / number data class xpv number number yo + number number ted james number number number / number number / number data class xpv number number yo + number number emma lilly number number number / number number / number data class xpv number number yo + number number george smith .	0
Q_20	calculate previous chance figure for use in chi square test	C_20_3	df . drop ( labels = [ string , string , string , string ] , axis = number , inplace = true )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_4	date cls tag name number number number / number number / number class xpv number george smith number number number / number number / number class xpv number ted james number number number / number number / number class xpv number emma lilly number number number / number number / number class xpv number george smith .	0
Q_20	calculate previous chance figure for use in chi square test	C_20_5	var = df . pivot_table ( cols = string , rows = string , values = string , aggfunc = len ) . shift ( number ) . fillna ( number ) . cumsum ( )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_6	date emma lilly george smith ted james tom phillips number number / number number / number number number number number number number / number number / number number number number number number number / number number / number number number number number number number / number number / number number number number number	0
Q_20	calculate previous chance figure for use in chi square test	C_20_7	df . groupby ( [ string , string ] ) [ string ] . aggregate ( len ) . unstack ( ) . shift ( number ) . fillna ( number ) . cumsum ( )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_8	var = df . tag = = number pv1 = df [ var ] . pivot_table ( cols = string , rows = string , values = string , aggfunc = len ) . shift ( number ) . fillna ( number ) . cumsum ( )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_9	df [ df . tag = = number ] . groupby ( [ string , string ] ) [ string ] . aggregate ( len ) . unstack ( ) . shift ( number ) . fillna ( number ) . cumsum ( )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_10	date emma lilly george smith ted james number number / number number / number number number number number number / number number / number number number number number number / number number / number number number number number number / number number / number number number number	0
Q_20	calculate previous chance figure for use in chi square test	C_20_11	def lookup ( pivot_table , col , var , fall_back = number ) try return pivot_table [ col ] [ var ] except key_error return fall_back df [ string ] = [ lookup ( pv1 , var [ string ] , var [ string ] ) for var , var in df . iterrows ( ) ] df [ string ] = [ lookup ( pv , var [ string ] , var [ string ] ) for var , var in df . iterrows ( ) ]	0
Q_20	calculate previous chance figure for use in chi square test	C_20_12	date cls tag name cnt1 cnt number number number / number number / number class xpv number george smith number number number number number / number number / number class xpv number ted james number number number number number / number number / number class xpv number emma lilly number number number number number / number number / number class xpv number george smith number number number number number / number number / number class tn2 number tom phillips number number number number number / number number / number class tn2 number tom phillips number number number number number / number number / number class tn2 number george smith number number number number number / number number / number class tn2 number tom phillips number number number number number / number number / number class tn2 number emma lilly number number number number number / number number / number class tn2 number george smith number number number number number / number number / number class tn2 number ted james number number number number number / number number / number class tn2 number tom phillips number number number number number / number number / number class tn2 number george smith number number number number number / number number / number class tn2 number george smith number number number number number / number number / number class tn2 number george smith number number number number number / number number / number class tn2 number tom phillips number number number number number / number number / number class number zn number emma lilly number number number number number / number number / number class number zn number ted james number number number number number / number number / number class number zn number george smith number number number number number / number number / number class number zn number emma lilly number number number number number / number number / number class number zn number tom phillips number number	0
Q_20	calculate previous chance figure for use in chi square test	C_20_13	var = df . pivot_table ( cols = string , rows = string , values = string , aggfunc = len ) . fillna ( number )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_14	df . groupby ( [ string , string ] ) [ string ] . aggregate ( len ) . unstack ( ) . fillna ( number )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_15	date emma lilly george smith ted james tom phillips number number / number number / number number number number number number number / number number / number number number number number number number / number number / number number number number number number number / number number / number number number number number	0
Q_20	calculate previous chance figure for use in chi square test	C_20_16	var = appr . sum ( axis = number )	0
Q_20	calculate previous chance figure for use in chi square test	C_20_17	date number number / number number / number number number number / number number / number number number number / number number / number number number number / number number / number number	0
Q_20	calculate previous chance figure for use in chi square test	C_20_18	var = appr . apply ( lambda x x / total_appr ) . shift ( number ) . fillna ( number ) . cumsum ( ) df [ string ] = [ var [ var [ string ] ] [ var [ string ] ] for var , var in df . iterrows ( ) ]	0
Q_20	calculate previous chance figure for use in chi square test	C_20_19	date cls tag name cnt1 cnt frac number number number / number number / number class xpv number george smith number number number . number number number number / number number / number class xpv number ted james number number number . number number number number / number number / number class xpv number emma lilly number number number . number number number number / number number / number class xpv number george smith number number number . number number number number / number number / number class tn2 number tom phillips number number number . number number number number / number number / number class tn2 number tom phillips number number number . number number number number / number number / number class tn2 number george smith number number number . number number number number / number number / number class tn2 number tom phillips number number number . number number number number / number number / number class tn2 number emma lilly number number number . number number number number / number number / number class tn2 number george smith number number number . number number number number / number number / number class tn2 number ted james number number number . number number number number / number number / number class tn2 number tom phillips number number number . number number number number / number number / number class tn2 number george smith number number number . number number number number / number number / number class tn2 number george smith number number number . number number number number / number number / number class tn2 number george smith number number number . number number number number / number number / number class tn2 number tom phillips number number number . number number number number / number number / number class number zn number emma lilly number number number . number number number number / number number / number class number zn number ted james number number number . number number number number / number number / number class number zn number george smith number number number . number number number number / number number / number class number zn number emma lilly number number number . number number number number / number number / number class number zn number tom phillips number number number . number	0
Q_21	port inv_regex py to javascript	C_21_0	function literal ( literal ) { this . literal = literal } literal . prototype . first = function ( ) { this . i = number } literal . prototype . next = function ( ) { this . i + + } literal . prototype . ok = function ( ) { return this . i = = number } literal . prototype . get = function ( ) { return this . literal } literal . prototype . clone = function ( ) { return new literal ( this . literal ) }	1
Q_21	port inv_regex py to javascript	C_21_1	function character_class ( chars ) { this . chars = chars } character_class . prototype . first = function ( ) { this . i = number } character_class . prototype . next = function ( ) { this . i + + } character_class . prototype . ok = function ( ) { return this . i < this . chars . length } character_class . prototype . get = function ( ) { return this . chars . char_at ( this . i ) } character_class . prototype . clone = function ( ) { return new character_class ( this . chars ) }	0
Q_21	port inv_regex py to javascript	C_21_2	function sequence ( iterators ) { if ( arguments . length > number ) { this . iterators = iterators . length ? iterators [ new literal ( string ) ] } } sequence . prototype . first = function ( ) { for ( var i in this . iterators ) this . iterators [ i ] . first ( ) } sequence . prototype . next = function ( ) { if ( this . ok ( ) ) { var i = this . iterators . length while ( this . iterators [ _ i ] . next ( ) , i > number this . iterators [ i ] . ok ( ) ) { this . iterators [ i ] . first ( ) } } } sequence . prototype . ok = function ( ) { return this . iterators [ number ] . ok ( ) } sequence . prototype . get = function ( ) { var retval = string for ( var i in this . iterators ) { retval + = this . iterators [ i ] . get ( ) } return retval } sequence . prototype . clone = function ( ) { return new sequence ( this . iterators . map ( function ( it ) { return it . clone ( ) } ) ) }	0
Q_21	port inv_regex py to javascript	C_21_3	function choice ( iterators ) { this . iterators = iterators } choice . prototype . first = function ( ) { this . count = number for ( var i in this . iterators ) this . iterators [ i ] . first ( ) } choice . prototype . next = function ( ) { if ( this . ok ( ) ) { this . iterators [ this . count ] . next ( ) while ( this . ok ( ) this . iterators [ this . count ] . ok ( ) ) this . count + + } } choice . prototype . ok = function ( ) { return this . count < this . iterators . length } choice . prototype . get = function ( ) { return this . iterators [ this . count ] . get ( ) } choice . prototype . clone = function ( ) { return new choice ( this . iterators . map ( function ( it ) { return it . clone ( ) } ) ) }	0
Q_21	port inv_regex py to javascript	C_21_4	function optional ( iterator ) { if ( arguments . length > number ) { choice . call ( this , [ new literal ( string ) , iterator ] ) } } optional . prototype = new choice ( )	0
Q_21	port inv_regex py to javascript	C_21_5	function repeat_from_zero ( max_times , iterator ) { if ( arguments . length > number ) { optional . call ( this , new repeat ( number , max_times , iterator ) ) } } repeat_from_zero . prototype = new optional ( ) function repeat ( min_times , max_times , iterator ) { if ( arguments . length > number ) { var sequence = [ ] for ( var i = number i < min_times i + + ) { sequence . push ( iterator . clone ( ) ) / / need to clone the iterator } if ( min_times < max_times ) { sequence . push ( new repeat_from_zero ( max_times _ min_times , iterator ) ) } sequence . call ( this , sequence ) } } repeat . prototype = new sequence ( )	0
Q_21	port inv_regex py to javascript	C_21_6	function enumerator ( iterator ) { this . iterator = iterator this . each = function ( callback ) { for ( this . iterator . first ( ) this . iterator . ok ( ) this . iterator . next ( ) ) { callback ( this . iterator . get ( ) ) } } }	0
Q_21	port inv_regex py to javascript	C_21_7	( [ ab ] { number } ) { number , number } [ cd ] ( f ef { number , number } e )	0
Q_21	port inv_regex py to javascript	C_21_8	function get_iterations_as_html ( ) { var iterator = new choice ( [ new repeat ( number , number , new repeat ( number , number , new character_class ( string ) ) ) , new sequence ( [ new character_class ( string ) , new choice ( [ new literal ( string ) , new sequence ( [ new literal ( string ) , new repeat_from_zero ( number , new literal ( string ) ) , new literal ( string ) ] ) ] ) ] ) ] ) var iterations = string var enumerator = new enumerator ( iterator ) enumerator . each ( function ( iteration ) { iterations + = string + iteration + string } ) return iterations + string }	0
Q_21	port inv_regex py to javascript	C_21_9	function reference ( iterator ) { this . iterator = iterator } reference . prototype . first = function ( ) { this . i = number } reference . prototype . next = function ( ) { this . i + + } reference . prototype . ok = function ( ) { return this . i = = number } reference . prototype . get = function ( ) { return this . iterator . get ( ) } reference . prototype . clone = function ( ) { return new reference ( this . iterator ) }	0
Q_21	port inv_regex py to javascript	C_21_10	var groups = new array ( ) var iterator = new sequence ( [ groups [ number ] = new choice ( [ new literal ( string ) , new literal ( string ) ] ) , groups [ number ] = new character_class ( string ) , new reference ( groups [ number ] ) , new reference ( groups [ number ] ) ] )	0
Q_21	port inv_regex py to javascript	C_21_11	function parse_tree_mapper ( ) { this . capturing_groups = [ ] } parse_tree_mapper . prototype . map_to_iterator = function ( parse_tree ) { switch ( parse_tree . type ) { case ret . types . root case ret . types . group var me = this var map_to_sequence = function ( parse_trees ) { return new sequence ( parse_trees . map ( function ( t ) { return me . map_to_iterator ( t ) } ) ) } var group = parse_tree . options ? new choice ( parse_tree . options . map ( map_to_sequence ) ) map_to_sequence ( parse_tree . stack ) if ( parse_tree . remember ) { this . capturing_groups . push ( group ) } return group case ret . types . set return new character_class ( this . map_to_character_class ( parse_tree . set ) ) case ret . types . repetition return new repeat ( parse_int ( parse_tree . min ) , parse_int ( parse_tree . max ) , this . map_to_iterator ( parse_tree . value ) ) case ret . types . reference var ref = parse_int ( parse_tree . value ) _ number return ref in this . capturing_groups ? new reference ( this . capturing_groups [ ref ] ) new literal ( string ) case ret . types . char return new literal ( string . from_char_code ( parse_tree . value ) ) default return new literal ( string ) } } parse_tree_mapper . prototype . map_to_character_class = function ( parse_trees ) { var chars = string for ( var i in parse_trees ) { var tree = parse_trees [ i ] switch ( tree . type ) { case ret . types . char chars + = string . from_char_code ( tree . value ) break case ret . types . range for ( var code = tree . from code < = tree . to code + + ) { chars + = string . from_char_code ( code ) } break } } return chars }	0
Q_21	port inv_regex py to javascript	C_21_12	var regex = string var parse_tree = ret ( regex ) / / requires ret . js var iterator = new parse_tree_mapper ( ) . map_to_iterator ( parse_tree )	0
Q_22	special tensor contraction in python	C_22_0	var , var = number , number b = np . random . rand ( number ) c = np . random . rand ( number , var ) d = np . random . rand ( number , var ) out = np . zeros ( ( var , var ) ) for var in ( number , number ) for k in ( number , number ) for l in ( number , number ) if var + k + l in ( number , number ) out + = b [ var ] * c [ k , , none ] * d [ l , none , ]	1
Q_22	special tensor contraction in python	C_22_1	out array ( [ [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number number , number . number , number . number ] , [ number . number , number . number number , number . number number , number . number , number . number ] ] )	0
Q_22	special tensor contraction in python	C_22_2	np . einsum ( string , b , c , d ) _ np . einsum ( string , b , c , d ) array ( [ [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number number , number . number , number . number ] , [ number . number , number . number number , number . number number , number . number , number . number ] ] )	0
Q_22	special tensor contraction in python	C_22_3	( np . einsum ( string , b , c , d ) _ . np . einsum ( string , b , c , d ) )	0
Q_22	special tensor contraction in python	C_22_4	value_error operands could not be broadcast together with remapped shapes [ original _ > remapped ] ( number ) _ > ( number , newaxis , newaxis ) ( number , number ) _ > ( number , newaxis , number , newaxis ) ( number , number ) _ > ( number , newaxis , newaxis , number )	0
Q_22	special tensor contraction in python	C_22_5	( np . einsum ( string , b , c , d [ , none ] ) _ . np . einsum ( string , b , c , d [ , none ] ) ) array ( [ [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number number , number . number , number . number ] , [ number . number , number . number number , number . number number , number . number , number . number ] ] )	0
Q_22	special tensor contraction in python	C_22_6	var = np . random . rand ( number , number ) c = np . random . rand ( number , number , number ) d = np . random . rand ( number , number ) c_idx = ( slice ( none ) , ) + ( none , ) * ( var . ndim _ number ) d_idx = c_idx + ( none , ) * ( c . ndim _ number ) ( np . einsum ( string , var , c [ c_idx ] , d [ d_idx ] ) _ . np . einsum ( string , var , c [ c_idx ] , d [ d_idx ] ) ) . shape ( number l , number l , number l , number l )	0
Q_22	special tensor contraction in python	C_22_7	var = np . random . rand ( number , number , number ) c = np . random . rand ( number , number , number , number ) d = np . random . rand ( number , number , number ) c_idx = ( slice ( none ) , ) * number + ( none , ) * ( var . ndim _ number ) d_idx = c_idx + ( none , ) * ( c . ndim _ number ) ( np . einsum ( string , var , c [ c_idx ] , d [ d_idx ] ) _ . np . einsum ( string , var , c [ c_idx ] , d [ d_idx ] ) ) . shape ( number l , number l , number l , number l )	0
Q_22	special tensor contraction in python	C_22_8	var = ( slice ( none ) , ) * d + ( none , ) * ( b . ndim _ d ) d_idx = var + ( none , ) * ( c . ndim _ d )	0
Q_22	special tensor contraction in python	C_22_9	( number , number , number , number , number , number ) ( number , number , number , number , number , number ) ( number , number , number , number , number , number )	0
Q_22	special tensor contraction in python	C_22_10	var , var = number , number b = np . random . rand ( number ) c = np . random . rand ( number , var ) d = np . random . rand ( number , var ) def calc1 ( var , c , d ) return ( np . einsum ( string , var , c , d ) _ np . einsum ( string , var , c , d ) ) def calc2 ( var , c , d ) return np . einsum ( string , calc2 . e , var , c , d ) calc2 . e = np . ones ( ( number , number , number ) ) calc2 . e [ number , number , number ] = number calc2 . e [ number , number , number ] = number	0
Q_22	special tensor contraction in python	C_22_11	timeit calc1 ( b , c , d ) number loops , best of number number ms per loop timeit calc2 ( b , c , d ) number loops , best of number number ms per loop np . allclose ( calc1 ( b , c , d ) , calc2 ( b , c , d ) ) out [ number ] true	0
Q_23	convert django model object to dict with all of the field intact	C_23_0	number . < code > instance . _dict_ < / code > instance . _dict_	1
Q_23	convert django model object to dict with all of the field intact	C_23_1	{ string < other_model other_model object > , string < django . db . models . base . model_state at number > , string datetime . datetime ( number , number , number , number , number , number , number , tzinfo = < utc > ) , string number l , string number l , string number , string number }	0
Q_23	convert django model object to dict with all of the field intact	C_23_2	number . model_to_dict from django . forms . models import model_to_dict model_to_dict ( instance )	0
Q_23	convert django model object to dict with all of the field intact	C_23_3	{ u string number l , string number l , string [ number l ] , string number }	0
Q_23	convert django model object to dict with all of the field intact	C_23_4	number . model_to_dict with fields from django . forms . models import model_to_dict model_to_dict ( instance , fields = [ var . name for var in instance . _meta . fields ] )	0
Q_23	convert django model object to dict with all of the field intact	C_23_5	{ u string number l , string number l , string number }	0
Q_23	convert django model object to dict with all of the field intact	C_23_6	number . query_set . values ( ) some_model . objects . filter ( id = instance . id ) . values ( ) [ number ]	0
Q_23	convert django model object to dict with all of the field intact	C_23_7	{ string datetime . datetime ( number , number , number , number , number , number , tzinfo = < utc > ) , u string number l , string number l , string number l , string number l }	0
Q_23	convert django model object to dict with all of the field intact	C_23_8	from django . db . models . fields . related import many_to_many_field def to_dict ( instance ) opts = instance . _meta data = { } for var in opts . concrete_fields + opts . many_to_many if isinstance ( var , many_to_many_field ) if instance . pk is none data [ var . name ] = [ ] else data [ var . name ] = list ( var . value_from_object ( instance ) . values_list ( string , flat = true ) ) else data [ var . name ] = var . value_from_object ( instance ) return data	0
Q_23	convert django model object to dict with all of the field intact	C_23_9	{ string datetime . datetime ( number , number , number , number , number , number , number , tzinfo = < utc > ) , u string number , string number , string [ number ] , string number , string number }	0
Q_23	convert django model object to dict with all of the field intact	C_23_10	from django . db import models from django . db . models . fields . related import many_to_many_field class printable_model ( models . model ) def _repr_ ( self ) return str ( self . to_dict ( ) ) def to_dict ( self ) opts = self . _meta data = { } for var in opts . concrete_fields + opts . many_to_many if isinstance ( var , many_to_many_field ) if self . pk is none data [ var . name ] = [ ] else data [ var . name ] = list ( var . value_from_object ( self ) . values_list ( string , flat = true ) ) else data [ var . name ] = var . value_from_object ( self ) return data class meta abstract = true	0
Q_23	convert django model object to dict with all of the field intact	C_23_11	class other_model ( printable_model ) pass class some_model ( printable_model ) value = models . integer_field ( ) value2 = models . integer_field ( editable = false ) created = models . date_time_field ( auto_now_add = true ) reference1 = models . foreign_key ( other_model , related_name = string ) reference2 = models . many_to_many_field ( other_model , related_name = string )	0
Q_23	convert django model object to dict with all of the field intact	C_23_12	{ string datetime . datetime ( number , number , number , number , number , number , number , tzinfo = < utc > ) , string number , string number , string number , u string number , string [ number ] }	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_0	in [ number ] import numpy as np in [ number ] c_order = np . arange ( number ) . reshape ( number , number , number ) in [ number ] f_order = c_order . copy ( order = string ) in [ number ] c_order out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] ) in [ number ] f_order out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] )	1
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_1	in [ number ] c_order . flags out [ number ] c_contiguous true f_contiguous false owndata false writeable true aligned true updateifcopy false in [ number ] f_order . flags out [ number ] c_contiguous false f_contiguous true owndata true writeable true aligned true updateifcopy false	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_2	in [ number ] c_order . ravel ( order = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] f_order . ravel ( order = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_3	in [ number ] c_order [ number , number , number ] out [ number ] number in [ number ] f_order [ number , number , number ] out [ number ] number	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_4	import numpy as np shape = ( number , number , number ) c_order = np . fromfile ( string , dtype = np . uint8 ) . reshape ( shape ) f_order = np . fromfile ( string , dtype = np . uint8 ) . reshape ( shape , order = string ) assert np . all ( c_order = = f_order )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_5	in [ number ] np . fromfile ( string , dtype = np . uint8 ) [ number ] out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] , dtype = uint8 ) in [ number ] np . fromfile ( string , dtype = np . uint8 ) [ number ] out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] , dtype = uint8 )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_6	def plot ( data ) fig , axes = plt . subplots ( ncols = number ) for var , var in enumerate ( axes ) slices = [ slice ( none ) , slice ( none ) , slice ( none ) ] slices [ var ] = data . shape [ var ] / / number var . imshow ( data [ tuple ( slices ) ] . t , cmap = string ) return fig plot ( c_order ) . suptitle ( string ) plot ( f_order ) . suptitle ( string ) plt . show ( )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_7	var = np . fromfile ( string , dtype = np . uint8 ) . reshape ( shape ) plot ( var )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_8	var = np . fromfile ( string , dtype = np . uint8 ) . reshape ( [ number , number , number ] ) rev_f_order = np . fromfile ( string , dtype = np . uint8 ) . reshape ( [ number , number , number ] )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_9	plot ( c_order ) . suptitle ( string ) plot ( rev_f_order ) . suptitle ( string )	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_10	in [ number ] rev_f_order . flags out [ number ] c_contiguous true f_contiguous false owndata false writeable true aligned true updateifcopy false in [ number ] c_order . flags out [ number ] c_contiguous true f_contiguous false owndata false writeable true aligned true updateifcopy false	0
Q_24	best practice with reading and operate on fortran order array with numpy	C_24_11	arr . ravel ( order = string ) . tofile ( string )	0
Q_25	sum of even fibonacci number up to tagint million	C_25_0	f [ n + number ] = f [ n ] + f [ n _ number ]	1
Q_25	sum of even fibonacci number up to tagint million	C_25_1	f [ n _ number ] = f [ n + number ] _ f [ n ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_2	f [ n ] = f [ n + number ] _ f [ n + number ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_3	sum ( n = number to n ) f [ n ] = ( f [ number ] _ f [ number ] ) + ( f [ number ] _ f [ number ] ) + ( f [ number ] _ f [ number ] ) + . + ( f [ n + number ] _ f [ n + number ] ) = f [ n + number ] _ f [ number ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_4	f [ number , number , number number ] _ number	0
Q_25	sum of even fibonacci number up to tagint million	C_25_5	f [ n + number ] = number * f [ n + number ] _ f [ n ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_6	f [ n + number ] = number * f [ n ] + f [ n _ number ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_7	var = sum ( k = number to k ) f [ number * k ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_8	f [ number * k + number ] + s _ f [ number ] = number * s + ( _ f [ number * k ] + s + f [ number ] )	0
Q_25	sum of even fibonacci number up to tagint million	C_25_9	number * s = ( f [ number * k ] + f [ number * k ] ) _ ( f [ number ] + f [ number ] ) = number * f [ number * k + number ] _ number * f [ number ]	0
Q_25	sum of even fibonacci number up to tagint million	C_25_10	var = ( f [ number * k + number ] _ number ) / number	0
Q_25	sum of even fibonacci number up to tagint million	C_25_11	var = floor ( log ( sqrt ( number ) * max ) / log ( number . number * ( number + sqrt ( number ) ) ) )	0
Q_25	sum of even fibonacci number up to tagint million	C_25_12	var = ( f [ number ] _ number ) / number	0
Q_25	sum of even fibonacci number up to tagint million	C_25_13	( f [ number , number , number ] _ number ) / number	0
Q_26	python process each row independently use map function	C_26_0	var = [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] map ( f , var )	1
Q_26	python process each row independently use map function	C_26_1	map ( lambda r map ( f , r ) , m )	0
Q_26	python process each row independently use map function	C_26_2	[ map ( f , var ) for var in m ]	0
Q_26	python process each row independently use map function	C_26_3	from functools import partial newf = partial ( map , f ) map ( newf , m )	0
Q_26	python process each row independently use map function	C_26_4	var = [ number , number , number , number ] sum ( var )	0
Q_26	python process each row independently use map function	C_26_5	var = [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] map ( sum , var )	0
Q_26	python process each row independently use map function	C_26_6	var = [ number , number , number , number ] [ sum ( var ) ] + [ number , ] * ( len ( var ) _ number ) [ number , number , number , number ]	0
Q_26	python process each row independently use map function	C_26_7	var = [ number , number , number , number ]	0
Q_26	python process each row independently use map function	C_26_8	var = [ number , number , number , number ] [ sum ( var ) ] + [ number , ] * ( len ( var ) _ number ) [ number , number , number , number ]	0
Q_26	python process each row independently use map function	C_26_9	map ( lambda row [ sum ( row ) ] + [ number , ] * ( len ( row ) _ number ) , m ) [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ]	0
Q_26	python process each row independently use map function	C_26_10	var = lambda r [ sum ( r ) ] + [ number , ] * ( len ( r ) _ number ) var ( row ) [ number , number , number , number ]	0
Q_26	python process each row independently use map function	C_26_11	map ( f , m ) [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ]	0
Q_26	python process each row independently use map function	C_26_12	[ f ( var ) for var in m ]	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_0	import numpy from matplotlib import pyplot as plt width , height = number , number xs = numpy . arange ( width ) ys = numpy . arange ( height ) data = numpy . dstack ( numpy . meshgrid ( xs , ys ) )	1
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_1	from colorsys import hsv_to_rgb import random def data_to_color ( var , var ) return ( ( var / width ) * * ( number . number + random . random ( ) * number ) , ( var / height ) * * number , ( var / width * var / height ) * number . number + random . random ( ) * number . number ) colors = [ [ data_to_color ( var , var ) for var , var in row ] for row in data ] colors = numpy . array ( colors ) colors . shape	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_2	plt . imshow ( colors , origin = string ) plt . show ( )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_3	from scipy . interpolate import griddata gridpoints = data . reshape ( width * height , number ) d = { ( var , var ) data_to_color ( var , var ) for var , var in gridpoints if not random . randint ( number , number ) } len ( d )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_4	var , var = zip ( * d . items ( ) ) var = numpy . array ( var ) var = numpy . array ( var ) reds = var [ , number ] greens = var [ , number ] blues = var [ , number ]	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_5	var = griddata ( points , reds , ( data [ , , number ] , data [ , , number ] ) , method = string ) new_greens = griddata ( points , greens , ( data [ , , number ] , data [ , , number ] ) , method = string ) new_blues = griddata ( points , blues , ( data [ , , number ] , data [ , , number ] ) , method = string ) new_colors = numpy . dstack ( [ var , new_greens , new_blues ] ) new_colors [ numpy . isnan ( new_colors ) ] = number . number	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_6	plt . triplot ( points [ , number ] , points [ , number ] , string , linewidth = number , alpha = number . number ) plt . imshow ( new_colors , extent = ( number , width , number , height ) , origin = string ) plt . show ( )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_7	import scipy def extrapolate_nans ( x , y , v ) string string string if numpy . ma . is_masked ( v ) nans = v . mask else nans = numpy . isnan ( v ) notnans = numpy . logical_not ( nans ) v [ nans ] = scipy . interpolate . griddata ( ( x [ notnans ] , y [ notnans ] ) , v [ notnans ] , ( x [ nans ] , y [ nans ] ) , method = string ) . ravel ( ) return v new_reds = extrapolate_nans ( data [ , , number ] , data [ , , number ] , new_reds ) new_greens = extrapolate_nans ( data [ , , number ] , data [ , , number ] , new_greens ) new_blues = extrapolate_nans ( data [ , , number ] , data [ , , number ] , new_blues ) new_colors = numpy . dstack ( [ new_reds , new_greens , new_blues ] ) plt . imshow ( new_colors , extent = ( number , width , number , height ) , origin = string ) plt . show ( )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_8	import numpy from matplotlib import pyplot as plt from numpy . core . umath_tests import inner1d width , height = number , number xs , ys = numpy . mgrid [ width , height ] coordinates = numpy . dstack ( [ xs , ys ] ) light_sources = { ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , ( number , number ) ( number , number , number ) , } weights = numpy . zeros ( [ width , height ] ) values = numpy . zeros ( [ width , height , number ] )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_9	for var , var in light_sources . items ( )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_10	var = coordinates _ coordinate + number e _ number inverse_distances = ( var * * number ) . sum ( axis = _ number ) * * ( _ number / number )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_11	weights + = inverse_distances values + = inverse_distances [ , , numpy . newaxis ] . repeat ( number , axis = _ number ) * value / number	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_12	values / = weights [ . , numpy . newaxis ]	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_13	plt . imshow ( values , origin = string ) plt . show ( )	0
Q_27	plot sort of a heatmap whose color be a result of a function x y _ r g b	C_27_14	var = [ number . number , number . number ] inverse_distances = [ number / number , number ] sum_weighting = number / number blue_levels = number / ( number / number ) = number	0
Q_28	access cascade dictionary of unknown number	C_28_0	var = { string { string { string number } } } reduce ( dict . get , [ string , string , string ] , var ) number	1
Q_28	access cascade dictionary of unknown number	C_28_1	var = { string { string { string number } } }	0
Q_28	access cascade dictionary of unknown number	C_28_2	dct . get ( string ) { string { string number } } dct . get ( string ) . get ( string ) { string number } dct . get ( string ) . get ( string ) . get ( string ) number	0
Q_28	access cascade dictionary of unknown number	C_28_3	reduce ( dict . get , [ string , string , string ] , dct ) number	0
Q_28	access cascade dictionary of unknown number	C_28_4	def getdeep ( dct , deepkey ) . return reduce ( dict . get , deepkey , dct ) .	0
Q_28	access cascade dictionary of unknown number	C_28_5	getdeep ( dct , [ string , string ] ) { string number }	0
Q_28	access cascade dictionary of unknown number	C_28_6	getdeep ( dct , [ string , string , string ] ) number	0
Q_28	access cascade dictionary of unknown number	C_28_7	getdeep ( dct , ( string , string , string ) ) number	0
Q_28	access cascade dictionary of unknown number	C_28_8	var = ( string , string , string ) getdeep ( dct , var ) number	0
Q_28	access cascade dictionary of unknown number	C_28_9	reduce ( dict . get , deepkey [ _ number ] , dct ) { string number } reduce ( dict . get , deepkey [ _ number ] , dct ) [ deepkey [ _ number ] ] = number dct { string { string { string number } } }	0
Q_28	access cascade dictionary of unknown number	C_28_10	def setdeep ( dct , deepkey , val ) getdeep ( dct , deepkey [ _ number ] ) [ deepkey [ _ number ] ] = val	0
Q_29	graph n iteration of a function_ python	C_29_0	def logiter ( c , x0 , n ) y = [ ] x = x0 for var in range ( n ) x = c * x * ( number _ x ) y . append ( x ) return np . array ( y )	1
Q_29	graph n iteration of a function_ python	C_29_1	class logistics ( ) def _init_ ( self , c , x0 ) self . x = x0 self . c = c def next_iter ( self ) self . x = self . c * self . x * ( number _ self . x ) return self . x	0
Q_29	graph n iteration of a function_ python	C_29_2	def logiter ( c , x0 , n ) l = logistics ( c , x0 ) return np . array ( [ l . next_iter ( ) for var in range ( n ) ] )	0
Q_29	graph n iteration of a function_ python	C_29_3	def log_generator ( c , x0 ) x = x0 while true x = c * x * ( number _ x ) yield x def logiter ( c , x0 , n ) l = log_generator ( c , x0 ) return np . array ( [ l . next ( ) for var in range ( n ) ] )	0
Q_29	graph n iteration of a function_ python	C_29_4	def logiter ( c , x0 , n ) res = np . empty ( ( n , len ( x0 ) ) ) res [ number ] = c * x0 * ( number _ x0 ) for var in range ( number , n ) res [ var ] = c * res [ var _ number ] * ( number _ res [ var _ number ] ) return res	0
Q_29	graph n iteration of a function_ python	C_29_5	logiter ( number . number , linspace ( number , number , number ) , number )	0
Q_29	graph n iteration of a function_ python	C_29_6	var = logiter ( number . number , np . linspace ( number , number , number ) , number )	0
Q_29	graph n iteration of a function_ python	C_29_7	import matplotlib . pyplot as plt plt . plot ( data ) plt . show ( )	0
Q_29	graph n iteration of a function_ python	C_29_8	var = logiter ( number . number , np . linspace ( number . number , number . number , number ) , number )	0
Q_29	graph n iteration of a function_ python	C_29_9	var = np . array ( [ number , number , number ] ) color2 = np . array ( [ number , number , number ] ) for var , var in enumerate ( np . linspace ( number , number , data . shape [ number ] ) ) plt . plot ( data [ , var ] , string , color = ( number _ var ) * var + var * color2 )	0
Q_29	graph n iteration of a function_ python	C_29_10	var = logiter ( number . number , np . linspace ( number , number , number ) , number ) plt . imshow ( var . t , cmap = plt . cm . bwr , interpolation = string , origin = string , extent = [ number , number , number , number ] , vmin = number , vmax = number ) plt . axis ( string ) plt . colorbar ( )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_0	import datetime import calendar def meetup_day ( year , month , day_name , week_num ) year_int = int ( year ) month_int = int ( month ) day_int = list ( calendar . day_name ) . index ( day_name ) relevant_mdays = [ var for var in zip ( * calendar . monthcalendar ( year_int , month_int ) ) [ day_int ] if var = number ] return datetime . date ( year_int , month_int , relevant_mdays [ week_num ] )	1
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_1	in [ number ] meetup_day ( string , string , string , number ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , number ) out [ number ] datetime . date ( number , number , number )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_2	in [ number ] list ( calendar . day_name ) . index ( day_name ) out [ number ] number	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_3	in [ number ] calendar . monthcalendar ( year_int , month_int ) out [ number ] [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ]	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_4	in [ number ] zip ( * _ ) out [ number ] [ ( number , number , number , number , number ) , ( number , number , number , number , number ) , ( number , number , number , number , number ) , ( number , number , number , number , number ) , ( number , number , number , number , number ) , ( number , number , number , number , number ) , ( number , number , number , number , number ) ]	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_5	in [ number ] _ [ day_int ] out [ number ] ( number , number , number , number , number )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_6	in [ number ] [ var for var in _ if var = number ] out [ number ] [ number , number , number , number ]	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_7	in [ number ] _ [ number ] out [ number ] number	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_8	in [ number ] datetime . date ( year_int , month_int , _ ) out [ number ] datetime . date ( number , number , number )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_9	in [ number ] datetime . date ( int ( year ) , int ( month ) , [ var for var in zip ( * calendar . monthcalendar ( int ( year ) , int ( month ) ) ) [ list ( calendar . day_name ) . index ( day_name ) ] if var = number ] [ week_num ] ) out [ number ] datetime . date ( number , number , number )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_10	def meetup_day ( year , month , day_name , week_num ) year_int = int ( year ) month_int = int ( month ) day_int = list ( calendar . day_name ) . index ( day_name ) relevant_mdays = [ var for var in zip ( * calendar . monthcalendar ( year_int , month_int ) ) [ day_int ] if var = number ] if week_num = = string mday = next ( ( var for var in relevant_mdays if var in range ( number , number ) ) , none ) else if week_num = = string week_int = _ number else week_int = int ( week_num [ number ] ) _ number mday = relevant_mdays [ week_int ] return datetime . date ( year_int , month_int , mday )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_11	in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number ) in [ number ] meetup_day ( string , string , string , string ) out [ number ] datetime . date ( number , number , number )	0
Q_30	python strptime take weekday name and return tm_mday tagint regardless of actual mday	C_30_12	def meetup_day ( year , month , day_name , week_num ) year_int = int ( year ) month_int = int ( month ) day_int = list ( calendar . day_name ) . index ( day_name ) relevant_mdays = [ var for var in list ( zip ( * calendar . monthcalendar ( year_int , month_int ) ) ) [ day_int ] if var = number ] if week_num = = string mday = next ( ( var for var in relevant_mdays if var in range ( number , number ) ) , none ) else if week_num = = string week_int = _ number else week_int = int ( week_num [ number ] ) _ number mday = relevant_mdays [ week_int ] return datetime . date ( year_int , month_int , mday )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_0	in [ number ] dct = { number number , number number , number number , number number } in [ number ] arr = np . array ( [ number , number , number , number ] ) in [ number ] arr [ number ] out [ number ] number in [ number ] dct [ number ] out [ number ] number	1
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_1	in [ number ] index = np . array ( [ number , number , number , number ] ) in [ number ] arr [ index ] out [ number ] array ( [ number , number , number , number ] )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_2	in [ number ] [ dct [ var ] for var in index ] out [ number ] [ number , number , number , number ]	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_3	in [ number ] timeit arr [ index ] number loops , best of number number ns per loop in [ number ] timeit [ dct [ var ] for var in index ] number loops , best of number number . number s per loop	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_4	import numpy as np color = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , ] , dtype = string ) . reshape ( _ number , number , number ) color2ind = { ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number , ( number , number , number ) number }	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_5	def rgb2int ( arr ) string string string return arr [ . , number ] * ( number * * number ) + arr [ . , number ] * number + arr [ . , number ] def rgb2vals ( color , color2ind ) int_colors = rgb2int ( color ) int_keys = rgb2int ( np . array ( color2ind . keys ( ) , dtype = string ) ) int_array = np . r_ [ int_colors . ravel ( ) , int_keys ] uniq , index = np . unique ( int_array , return_inverse = true ) color_labels = index [ int_colors . size ] key_labels = index [ _ len ( color2ind ) ] colormap = np . empty_like ( int_keys , dtype = string ) colormap [ key_labels ] = color2ind . values ( ) out = colormap [ color_labels ] . reshape ( color . shape [ number ] ) return out print ( rgb2vals ( color , color2ind ) )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_6	[ [ number number ] [ number number ] [ number number ] [ number number ] ]	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_7	def using_loops ( color , color2ind ) m , n = color . shape [ number ] out = np . zeros ( ( m , n ) ) for var in range ( m ) for j in range ( n ) out [ var ] [ j ] = color2ind [ tuple ( color [ var , j , ] ) ] return out	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_8	in [ number ] color = np . tile ( color , ( number , number , number ) ) in [ number ] ( rgb2vals ( color , color2ind ) = = using_loops ( color , color2ind ) ) . all ( ) out [ number ] true in [ number ] timeit rgb2vals ( color , color2ind ) number loops , best of number number . number ms per loop in [ number ] timeit using_loops ( color , color2ind ) number loops , best of number number ms per loop	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_9	in [ number ] int_colors = rgb2int ( color ) in [ number ] int_colors out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] , dtype = uint32 )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_10	in [ number ] int_keys = rgb2int ( np . array ( color2ind . keys ( ) , dtype = string ) ) in [ number ] int_keys out [ number ] array ( [ number , number , number , number , number , number , number , number ] , dtype = uint32 )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_11	in [ number ] int_array = np . r_ [ int_colors . ravel ( ) , int_keys ] in [ number ] uniq , index = np . unique ( int_array , return_inverse = true ) in [ number ] index out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] uniq out [ number ] array ( [ number , number , number , number , number , number , number , number ] , dtype = uint32 )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_12	in [ number ] ( uniq [ index ] = = int_array ) . all ( ) out [ number ] true	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_13	var = index [ int_colors . size ] key_labels = index [ _ len ( color2ind ) ]	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_14	colormap [ key_labels ] = color2ind . values ( )	0
Q_31	convert a tagint _d array to tagint _d array base on dictionary	C_31_15	var = colormap [ color_labels ] . reshape ( color . shape [ number ] ) in [ number ] var out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] , dtype = uint32 )	0
Q_32	access multiple element of an array	C_32_0	var = np . arange ( number ) . reshape ( number , number ) * . number startend = [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] index_list = [ np . arange ( var [ number ] , var [ number ] ) + var * var . shape [ number ] for var , var in enumerate ( startend ) ]	1
Q_32	access multiple element of an array	C_32_1	array ( [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] )	0
Q_32	access multiple element of an array	C_32_2	a . flat [ np . r_ [ tuple ( index_list ) ] ]	0
Q_32	access multiple element of an array	C_32_3	var = [ np . arange ( var [ number ] , var [ number ] ) for var , var in enumerate ( startend ) ] a [ np . arange ( a . shape [ number ] ) [ , none ] , var ]	0
Q_32	access multiple element of an array	C_32_4	np . array ( idx ) array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_32	access multiple element of an array	C_32_5	var = np . array ( [ number , number , number , number ] ) idx = var [ , none ] + np . arange ( number )	0
Q_32	access multiple element of an array	C_32_6	np . arange ( a . shape [ number ] ) [ , none ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_32	access multiple element of an array	C_32_7	in [ number ] timeit np . choose ( idx , a . t [ , , none ] ) number loops , best of number number . number s per loop in [ number ] timeit a [ np . arange ( a . shape [ number ] ) [ , none ] , idx ] number loops , best of number number . number s per loop in [ number ] timeit a . flat [ idx + np . arange ( a . shape [ number ] ) [ , none ] * a . shape [ number ] ] number loops , best of number number . number s per loop	0
Q_32	access multiple element of an array	C_32_8	var = np . arange ( number ) . reshape ( number , number ) * . number col_start = np . arange ( number , number ) idx = col_start [ , none ] + np . arange ( number ) in [ number ] timeit var [ np . arange ( var . shape [ number ] ) [ , none ] , idx ] number loops , best of number number s per loop in [ number ] timeit var . flat [ idx + np . arange ( var . shape [ number ] ) [ , none ] * var . shape [ number ] ] number loops , best of number number . number s per loop	0
Q_32	access multiple element of an array	C_32_9	var = np . array ( [ number , number , number , number ] ) idx = var [ , none ] + np . arange ( number ) a [ np . arange ( a . shape [ number ] ) [ , none ] , idx ]	0
Q_32	access multiple element of an array	C_32_10	var = var . clip ( number , a . shape [ number ] _ number )	0
Q_32	access multiple element of an array	C_32_11	[ number . number , number . number , number . number ]	0
Q_32	access multiple element of an array	C_32_12	np . pad ( a , ( ( number , number ) , ( number , number ) ) , string ) [ np . arange ( a . shape [ number ] ) [ , none ] , idx ]	0
Q_32	access multiple element of an array	C_32_13	var = [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] index_list = [ np . arange ( var [ number ] , var [ number ] ) + var * a . shape [ number ] for var , var in enumerate ( var ) ]	0
Q_33	curve curvature in numpy	C_33_0	import numpy as np a = np . array ( [ [ number . , number . ] , [ number . number , number . ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . , _ number . number ] , [ number . number , _ number . number ] , [ number . number number , _ number . number ] , [ number . number , _ number . number ] , [ number . number number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] ] )	1
Q_33	curve curvature in numpy	C_33_1	var = np . gradient ( a [ , number ] ) dy_dt = np . gradient ( a [ , number ] ) velocity = np . array ( [ [ var [ var ] , dy_dt [ var ] ] for var in range ( var . size ) ] )	0
Q_33	curve curvature in numpy	C_33_2	array ( [ [ number . number , number . ] , [ number . number , _ number . number number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number number ] , [ number . number , _ number . number ] , [ number . , _ number . number ] , [ number . number , _ number . number number ] , [ number . number , _ number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number number ] , [ number . number number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number number ] ] )	0
Q_33	curve curvature in numpy	C_33_3	var = np . sqrt ( dx_dt * dx_dt + dy_dt * dy_dt )	0
Q_33	curve curvature in numpy	C_33_4	array ( [ number . number , number . number , number . number number , number . number , number . number , number . number number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number number ] )	0
Q_33	curve curvature in numpy	C_33_5	var = np . array ( [ number / ds_dt ] * number ) . transpose ( ) * velocity	0
Q_33	curve curvature in numpy	C_33_6	array ( [ [ number . , number . ] , [ number . number , _ number . number number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , _ number . number ] , [ number . number , number . number number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number ] ] )	0
Q_33	curve curvature in numpy	C_33_7	in [ number ] np . sqrt ( tangent [ , number ] * tangent [ , number ] + tangent [ , number ] * tangent [ , number ] ) out [ number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] )	0
Q_33	curve curvature in numpy	C_33_8	var = tangent [ , number ] tangent_y = tangent [ , number ] deriv_tangent_x = np . gradient ( var ) deriv_tangent_y = np . gradient ( tangent_y ) d_t_dt = np . array ( [ [ deriv_tangent_x [ var ] , deriv_tangent_y [ var ] ] for var in range ( deriv_tangent_x . size ) ] ) length_d_t_dt = np . sqrt ( deriv_tangent_x * deriv_tangent_x + deriv_tangent_y * deriv_tangent_y ) normal = np . array ( [ number / length_d_t_dt ] * number ) . transpose ( ) * d_t_dt	0
Q_33	curve curvature in numpy	C_33_9	array ( [ [ _ number . number number , _ number . number ] , [ _ number . number , _ number . number ] , [ _ number . number , _ number . number ] , [ _ number . number , _ number . number ] , [ _ number . number , _ number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ number . number , number . number ] , [ _ number . number number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number ] , [ _ number . number , number . number number ] , [ _ number . number , _ number . number ] , [ _ number . number , _ number . number ] , [ _ number . number , _ number . number ] ] )	0
Q_33	curve curvature in numpy	C_33_10	var = np . gradient ( ds_dt ) d2x_dt2 = np . gradient ( dx_dt ) d2y_dt2 = np . gradient ( dy_dt ) curvature = np . abs ( d2x_dt2 * dy_dt _ dx_dt * d2y_dt2 ) / ( dx_dt * dx_dt + dy_dt * dy_dt ) * * number . number t_component = np . array ( [ var ] * number ) . transpose ( ) n_component = np . array ( [ curvature * ds_dt * ds_dt ] * number ) . transpose ( ) acceleration = t_component * tangent + n_component * normal	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_0	var = data [ number ] [ c [ number ] > h [ _ number ] ]	1
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_1	var = np . pad ( h [ _ number ] , ( number , number ) , mode = string , constant_values = ( np . nan , ) )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_2	def shift ( data , amount ) data = data [ _ amount ] pad = ( amount , number ) return np . pad ( data , pad , mode = string , constant_values = ( np . nan , ) )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_3	df [ df . c > df . h . shift ( number ) ]	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_4	import numpy as np x = np . arange ( number ) x2 = x [ number ]	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_5	var = np . linspace ( _ number , _ number , number )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_6	in [ number ] x2 > y _ value_error traceback ( most recent call last ) < ipython _ input _ number _ eec160476995 > in < module > ( ) _ > number x2 > y value_error operands could not be broadcast together with shapes ( number ) ( number )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_7	in [ number ] x2 > y [ number ] out [ number ] array ( [ true , true , true , true ] , dtype = bool )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_8	var = np . pad ( x [ _ number ] , ( number , number ) , mode = string , constant_values = ( np . nan , ) )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_9	var = np . hstack ( [ number * [ np . nan ] , x [ _ number ] ] )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_10	in [ number ] x2 out [ number ] array ( [ nan , nan , number . , number . , number . , number . ] ) in [ number ] x2 > _ np . inf out [ number ] array ( [ false , false , true , true , true , true ] , dtype = bool )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_11	in [ number ] y out [ number ] array ( [ _ number . , _ number . number , _ number . number , _ number . number , _ number . number , _ number . ] ) in [ number ] x2 > y out [ number ] array ( [ false , false , true , true , true , true ] , dtype = bool )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_12	import numpy as np def main ( ) data = np . array ( [ [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number number , number . number , number . number ] , [ number . number , number . number number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ] ) o , h , l , c = data . t values = data [ c > shift ( h , number ) ] print values def shift ( data , amount ) data = data [ _ amount ] pad = ( amount , number ) return np . pad ( data , pad , mode = string , constant_values = ( np . nan , ) ) main ( )	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_13	[ [ number . number number . number number . number number . number ] [ number . number number . number number . number number . number ] [ number . number number . number number number . number number . ] [ number . number number . number number number . number number . number ] ]	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_14	import pandas as pd df = pd . data_frame ( [ [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] , [ number . number , number . number number , number . number , number . number ] , [ number . number , number . number number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ] , columns = [ string , string , string , string ] ) values = df [ df . c > df . h . shift ( number ) ] print values	0
Q_34	filter numpy array by compare element to element in prior row without loop	C_34_15	o h l c number number . number number . number number . number number . number number number . number number . number number . number number . number number number . number number . number number number . number number . number number number . number number . number number number . number number . number	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_0	w _ number , w _ number , w0 , w1 , w2	1
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_1	start _ number , start _ number , w0 , w1 , w2	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_2	start _ number , w _ number , w0 , w1 , w2	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_3	features ( w _ number ) , features ( w _ number ) , features ( w0 ) , features ( w1 ) , features ( w2 )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_4	n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_5	n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number n [ string ] = number	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_6	( number , number , number , number , number , number , number , number , number , number , number , number , number , number )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_7	( number , number , number , number , number , number , number )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_8	( number , number , number , number , number , number , number )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_9	word ( w _ number ) , tag ( w _ number ) , word ( w0 ) , word ( w1 )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_10	apple_b i_phone_m number _number white_c number gb_s dual _ core_na	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_11	def get_features ( i , word , context , prev ) string string string def add ( name , * args ) features . add ( string . join ( ( name , ) + tuple ( args ) ) ) features = set ( ) add ( string )	0
Q_35	some doubt model some feature for the libsvm scikit_learn library in python	C_35_12	var = [ string , string , string , string , string , string ] prev = string i = number word = string	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_0	for var in ( string , string ) df = reindexed [ var ] . str . extract ( r string ) . astype ( string ) reindexed [ var ] = df [ string ] * number + df [ string ]	1
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_1	for var in ( string , string ) newcol = string . format ( var ) df = reindexed [ var ] . str . extract ( r string ) . astype ( string ) reindexed [ newcol ] = df [ string ] * number + df [ string ]	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_2	import numpy as np import pandas as pd np . random . seed ( number ) df = pd . data_frame ( np . random . rand ( number ) * number , columns = [ string ] ) df [ string ] = pd . to_timedelta ( ( number * df [ string ] ) . astype ( string ) , unit = string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_3	minutes hh mm ss number number . number number number number number number number number . number number number number number number . number number number number number	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_4	in [ number ] df [ string ] . iloc [ number ] out [ number ] timedelta ( string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_5	in [ number ] df . to_csv ( string , date_format = string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_6	, minutes , hh mm ss number , number . number , number days number number number number number . number number , number . number , number days number number number . number number , number . number , number days number number number number . number	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_7	np . random . seed ( number ) df = pd . data_frame ( np . random . rand ( number ) * number , columns = [ string ] ) df [ string ] = pd . to_timedelta ( ( number * df [ string ] ) . astype ( string ) , unit = string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_8	minutes hh mm ss number number . number number days number number number number number number . number number days number number number number number . number number days number number number number	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_9	df [ string ] = pd . to_timedelta ( ( number * df [ string ] ) . astype ( string ) , unit = string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_10	import operator fmt = operator . methodcaller ( string , string ) df [ string ] = pd . to_datetime ( df [ string ] , unit = string ) . map ( fmt )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_11	in [ number ] df [ string ] . iloc [ number ] out [ number ] string	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_12	in [ number ] df . to_csv ( string , date_format = string )	0
Q_36	convert column of time in minute format to time in hh mm s format in panda	C_36_13	, minutes , hh mm ss number , number . number , number number number number number number , number . number , number number number number , number . number , number number number number	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_0	def dict_key_filter ( obj , obj_filter ) if isinstance ( obj , dict ) retdict = { } . return retdict	1
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_1	var = [ ] for var in obj child = dict_key_filter0 ( var , obj_filter ) if child var . append ( child )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_2	var = [ dict_key_filter ( var , obj_filter ) for var in obj if dict_key_filter ( var , obj_filter ) ]	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_3	var = [ var for var in ( dict_key_filter ( var , obj_filter ) for var in obj ) if var ]	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_4	def dict_key_filter ( obj , obj_filter ) def inner_dict_key_filter ( obj ) return dict_key_filter ( obj , obj_filter ) . retlist = list ( filter ( len , map ( inner_dict_key_filter , obj ) ) )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_5	def dict_key_filter ( obj , obj_filter ) def inner_dict_key_filter ( obj ) return dict_key_filter ( obj , obj_filter ) if isinstance ( obj , dict ) retdict = { } . return retdict elif isinstance ( obj , list ) return list ( filter ( len , map ( inner_dict_key_filter , obj ) ) ) else return [ ]	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_6	def build_subtree ( key , value ) if key in obj_filter return copy . deepcopy ( value )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_7	var = { } for var , var in obj . items ( ) var [ var ] = build_subtree ( var , var )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_8	var = { var build_subtree ( var , var ) for var , var in obj . items ( ) if build_subtree ( var , var ) }	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_9	var = { var var for var , var in ( ( var , build_subtree ( var , value ) ) for var , value in obj . items ( ) ) if var }	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_10	def to_keep ( subtree ) return not ( isinstance ( subtree , ( dict , list ) ) or len ( subtree ) = = number )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_11	def to_keep ( subtree ) return not isinstance ( subtree , ( dict , list ) ) or subtree	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_12	def dict_key_filter ( obj , obj_filter ) def inner_dict_key_filter ( obj ) return dict_key_filter ( obj , obj_filter ) def to_keep ( subtree ) return not isinstance ( subtree , ( dict , list ) ) or subtree def build_subtree ( var , var ) if var in obj_filter return copy . deepcopy ( var )	0
Q_37	how to filter by key through a nest dictionary in a pythonic way	C_37_13	var = { string { string [ number , number ] } , string [ { string number } , { string { string number } } ] , string { string number } } obj_filter = [ string , string ] print ( dict_key_filter ( var , obj_filter ) )	0
Q_38	numpy index multidimensional array with array and slice	C_38_0	in [ number ] y [ np . array ( [ number , number , number ] ) [ . , none ] , np . array ( [ number , number ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	1
Q_38	numpy index multidimensional array with array and slice	C_38_1	in [ number ] np . broadcast_arrays ( np . array ( [ number , number , number ] ) [ . , none ] , np . array ( [ number , number ] ) ) out [ number ] [ array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_2	y [ np . array ( [ number , number , number ] ) ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_3	y [ [ number , number , number ] , ] [ , number number ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_4	y [ , number number ] , y [ number , ] , y [ number , number number ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_5	y [ [ number , number , number ] , ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_6	in [ number ] i = [ [ number , number ] , [ number , number ] ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_7	in [ number ] y [ i , [ number , number ] ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] )	0
Q_38	numpy index multidimensional array with array and slice	C_38_8	in [ number ] np . broadcast_arrays ( i , [ number , number ] ) out [ number ] [ array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) ]	0
Q_38	numpy index multidimensional array with array and slice	C_38_9	in [ number ] y [ i , number number ] out [ number ] array ( [ [ [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] ] ] )	0
Q_38	numpy index multidimensional array with array and slice	C_38_10	y [ np . array ( i ) [ . , none ] , [ number , number ] ]	0
Q_39	write select function for customize pony	C_39_0	from datetime import datetime , timedelta from pony . orm import * db = database ( string , string ) class user ( db . entity ) username = required ( str , unique = true ) password = required ( str ) friends = set ( string , reverse = string )	1
Q_39	write select function for customize pony	C_39_1	def active_users ( ) return user . select ( lambda user not user . disabled )	0
Q_39	write select function for customize pony	C_39_2	def active_users ( ) return select ( var for var in user if not user . disabled )	0
Q_39	write select function for customize pony	C_39_3	var = active_users ( ) . filter ( lambda user user . name . startswith ( string ) ) . order_by ( user . name ) [ number ]	0
Q_39	write select function for customize pony	C_39_4	def recent_users ( days = number ) return active_users ( ) . filter ( lambda u u . last_visit > datetime . now ( ) _ timedelta ( days ) )	0
Q_39	write select function for customize pony	C_39_5	def users_with_at_least_n_friends ( n = number ) return active_users ( ) . filter ( lambda u count ( u . friends ) > = n ) def online_users ( ) return user . select ( lambda u u . online ) def online_users_with_at_least_n_online_friends ( n = number ) return online_users ( ) . filter ( lambda u count ( var for var in u . friends if var . online ) > = n ) users = online_users_with_at_least_n_online_friends ( n = number ) . order_by ( user . name ) [ number ]	0
Q_39	write select function for customize pony	C_39_6	class user ( db . entity ) username = required ( str , unique = true ) . classmethod def name_starts_with ( cls , prefix ) return cls . select ( lambda user not user . disabled and user . name . startswith ( prefix ) ) . users = user . name_starts_with ( string ) . order_by ( desc ( user . last_visit ) ) [ number ]	0
Q_39	write select function for customize pony	C_39_7	def select_active ( cls ) return cls . select ( lambda obj not obj . deleted ) select_active ( message ) . filter ( lambda msg msg . author = = current_user )	0
Q_39	write select function for customize pony	C_39_8	def active_users ( ) return user . select ( lambda user not user . disabled ) def name_starts_with ( query , prefix ) return query . filter ( lambda user user . name . startswith ( string ) )	0
Q_39	write select function for customize pony	C_39_9	var = name_starts_with ( active_users ( ) , string ) . order_by ( user . last_visited ) users2 = name_starts_with ( recent_users ( ) , string ) . filter ( lambda user user . online )	0
Q_39	write select function for customize pony	C_39_10	select ( var for var in user ) . recent ( days = number ) . name_starts_with ( string ) [ number ]	0
Q_40	be it possible to access inner function and class via code object	C_40_0	from inspect import iscode for var in func . _code_ . co_consts if iscode ( var )	1
Q_40	be it possible to access inner function and class via code object	C_40_1	< code object a at number , file string , line number > represents a class string < code object a at number , file string , line number > represents a function string < code object < lambda > at number , file string , line number > represents a function string	0
Q_40	be it possible to access inner function and class via code object	C_40_2	static int compute_code_flags ( struct compiler * c ) { py_st_entry_object * ste = c _ > u _ > u_ste . if ( ste _ > ste_type = = function_block ) { flags = co_newlocals co_optimized if ( ste _ > ste_nested ) flags = co_nested if ( ste _ > ste_generator ) flags = co_generator if ( ste _ > ste_varargs ) flags = co_varargs if ( ste _ > ste_varkeywords ) flags = co_varkeywords } / * ( only ) inherit compilerflags in py_cf_mask * / flags = ( c _ > c_flags _ > cf_flags py_cf_mask ) n = py_dict_size ( c _ > u _ > u_freevars ) . if ( n = = number ) { n = py_dict_size ( c _ > u _ > u_cellvars ) . if ( n = = number ) { flags = co_nofree } } . }	0
Q_40	be it possible to access inner function and class via code object	C_40_3	from inspect import iscode for var in complex_func . _code_ . co_consts if iscode ( var )	0
Q_40	be it possible to access inner function and class via code object	C_40_4	from dis import bytecode from inspect import iscode from itertools import groupby def _group ( i ) if i . starts_line is not none _group . starts = i return _group . starts bytecode = bytecode ( func ) for var , var in groupby ( bytecode , _group ) var = list ( var ) try code = next ( arg . argval for arg in var if iscode ( arg . argval ) )	0
Q_40	be it possible to access inner function and class via code object	C_40_5	"from inspect import iscode , ismethod , getsource from textwrap import dedent def nested_sources ( ob ) if ismethod ( ob ) ob = ob . _func_ try code = ob . _code_ except attribute_error raise type_error ( string t inspect { r } string < string < lambda > "" yield dedent ( getsource ( var ) )"	0
Q_40	be it possible to access inner function and class via code object	C_40_6	def complex_func ( ) lambda var number def decorator ( cls ) return lambda cls ( ) decorator class b ( ) def method ( ) pass class c ( int , metaclass = abc . abc_meta ) def method ( ) pass { var for var in ( ) } { var var for var in ( ) } [ var for var in ( ) ] ( var for var in ( ) )	0
Q_40	be it possible to access inner function and class via code object	C_40_7	in [ number ] nested_sources ( complex_func ) out [ number ] < generator object nested_sources at number > in [ number ] for var in _ . print ( var , end = string * number + string ) . lambda x number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = def decorator ( cls ) return lambda cls ( ) = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = decorator class b ( ) def method ( ) pass = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = class c ( int , metaclass = abc . abc_meta ) def method ( ) pass = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =	0
Q_40	be it possible to access inner function and class via code object	C_40_8	in [ number ] source = sources [ number ] in [ number ] eval ( source , func . _globals_ ) out [ number ] < function _main_ . < lambda	0
Q_40	be it possible to access inner function and class via code object	C_40_9	in [ number ] source , local = sources [ number ] , { } in [ number ] exec ( source , func . _globals_ , local ) in [ number ] local . popitem ( ) [ number ] out [ number ] < function _main_ . decorator >	0
Q_40	be it possible to access inner function and class via code object	C_40_10	in [ number ] source , local = sources [ number ] , { } in [ number ] exec ( source , func . _globals_ , local ) in [ number ] local . popitem ( ) [ number ] out [ number ] _main_ . c	0
Q_41	place a numpy record array inside another record array python	C_41_0	in [ number ] dt1 = np . dtype ( type ) in [ number ] dt1 out [ number ] dtype ( [ ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_41	place a numpy record array inside another record array python	C_41_1	in [ number ] dt2 = np . dtype ( { string ( string , string , string , string ) , string ( string , string , string , ( dt1 , number ) ) } ) in [ number ] registers = np . zeros ( number , dtype = dt2 ) in [ number ] registers out [ number ] array ( [ ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , [ ( string , string ) , ( string , string ) , ( string , string ) ] , ( number , ) ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_2	in [ number ] registers [ string ] = string . split ( )	0
Q_41	place a numpy record array inside another record array python	C_41_3	in [ number ] registers [ string ] = [ number , number , number , number ] in [ number ] registers [ string ] = [ number , number , number , number ] in [ number ] registers out [ number ] array ( [ ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , [ ( string , string ) , ( string , string ) , ( string , string ) ] , ( number , ) ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_4	in [ number ] registers [ number ] [ string ] out [ number ] array ( [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_5	in [ number ] registers [ number ] = ( string , string , string ) . value_error size of tuple must match number of fields .	0
Q_41	place a numpy record array inside another record array python	C_41_6	in [ number ] regfield = np . zeros ( number , dtype = dt1 ) in [ number ] regfield out [ number ] array ( [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) ] ) in [ number ] regfield [ number ] = ( string , number , number ) in [ number ] regfield [ number ] = ( string , number , number ) in [ number ] regfield [ number ] = ( string , number , number )	0
Q_41	place a numpy record array inside another record array python	C_41_7	in [ number ] registers [ number ] = ( string , string , string , regfield ) in [ number ] registers [ number ] out [ number ] ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_8	in [ number ] fieldnames = registers [ string ] [ string ] [ number ] in [ number ] registers [ string ] [ string ] out [ number ] array ( [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] , dtype = string ) in [ number ] registers [ string ] [ string ] = fieldnames in [ number ] registers [ string ] [ string ] out [ number ] array ( [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] , dtype = string ) in [ number ] registers [ string ] out [ number ] array ( [ [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_9	in [ number ] dt3 = np . dtype ( { string ( string , string , string , string ) , string ( string , string , string , string ) } ) in [ number ] registers = np . zeros ( number , dtype = dt3 ) in [ number ] registers out [ number ] array ( [ ( string , string , string , number ) , ( string , string , string , number ) , ( string , string , string , number ) , ( string , string , string , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_41	place a numpy record array inside another record array python	C_41_10	in [ number ] registers [ number ] = ( string , string , string , regfield ) in [ number ] registers out [ number ] array ( [ ( string , string , string , [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ] ) , ( string , string , string , number ) , ( string , string , string , number ) , ( string , string , string , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ) .	0
Q_41	place a numpy record array inside another record array python	C_41_11	in [ number ] id ( regfield ) out [ number ] number in [ number ] id ( registers [ number ] [ string ] ) out [ number ] number	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_0	from sqlalchemy import func session = ( . ) ( . ) engine = create_engine ( string , echo = true ) q = session . query ( model . id ) . filter ( model . some = = func . hex ( string ) ) print q . statement . compile ( bind = engine ) select model . id from model where model . some = hex ( ? )	1
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_1	from sqlalchemy import func session = ( . ) ( . ) engine = create_engine ( string , echo = true ) m = new model ( hash = func . hex ( string ) ) session . add ( m ) session . commit ( ) insert into model ( hash ) values ( hex ( s ) )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_2	from sqlalchemy . types import varchar from sqlalchemy import func class hash_column ( varchar ) def bind_expression ( self , bindvalue )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_3	from sqlalchemy import column , types from sqlalchemy . ext . declarative import declarative_base base = declarative_base ( ) class model ( base ) _tablename_ = string id = column ( types . integer , primary_key = true ) col = column ( hash_column ( number ) ) def _repr_ ( self ) return string self . col	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_4	( . ) session = create_session ( . ) ( . ) model = model ( col = string ) session . add ( model ) session . commit ( )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_5	insert into model ( col ) values ( hex ( ? ) ) _ ( string , )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_6	session . query ( model ) . first ( ) model ( col = string )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_7	select model . id as model_id , unhex ( model . col ) as model_col from model limit ? _ ( number , )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_8	session . query ( model ) . filter ( model . col = = string ) . first ( ) model ( col = string )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_9	select model . id as model_id , unhex ( model . col ) as model_col from model where model . col = hex ( ? ) limit ? _ ( string , number )	0
Q_42	python_sqlalchemy binary column type hex and unhex	C_42_10	import uuid from sqlalchemy . types import type_decorator , varchar class uuid4 ( type_decorator ) string string varchar ( number ) string string impl = varchar ( number ) def process_bind_param ( self , value , dialect ) if value is none return value else if not isinstance ( value , uuid . uuid ) return str ( uuid . uuid ( value ) ) else	0
Q_43	how to create a numpy array of list	C_43_0	var = np . array ( [ [ number , number ] , [ number , number ] ] , dtype = object )	1
Q_43	how to create a numpy array of list	C_43_1	in [ number ] a = np . array ( [ [ number , number ] , [ ] , [ number , number , number , number ] ] ) in [ number ] a out [ number ] array ( [ [ number , number ] , [ ] , [ number , number , number , number ] ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_2	in [ number ] for var in a var . append ( number ) in [ number ] a out [ number ] array ( [ [ number , number , number ] , [ number ] , [ number , number , number , number , number ] ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_3	in [ number ] a = np . empty ( ( number , ) , dtype = object ) in [ number ] a out [ number ] array ( [ none , none , none ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_4	in [ number ] a . fill ( [ ] ) in [ number ] a out [ number ] array ( [ [ ] , [ ] , [ ] ] , dtype = object ) in [ number ] for var in a var . append ( number ) in [ number ] a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_5	in [ number ] b = [ [ ] ] * number in [ number ] b out [ number ] [ [ ] , [ ] , [ ] ] in [ number ] for var in b var . append ( number ) in [ number ] b out [ number ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_43	how to create a numpy array of list	C_43_6	in [ number ] a = np . empty ( ( number , ) , dtype = object ) in [ number ] for var , var in enumerate ( a ) a [ var ] = [ var , var ] in [ number ] a out [ number ] array ( [ [ none , number ] , [ none , number ] , [ none , number ] ] , dtype = object ) in [ number ] for var in a var . append ( number ) in [ number ] a out [ number ] array ( [ [ none , number , number ] , [ none , number , number ] , [ none , number , number ] ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_7	in [ number ] np . append ( a , [ [ number , number ] ] ) out [ number ] array ( [ [ none , number , number ] , [ none , number , number ] , [ none , number , number ] , number , number ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_8	in [ number ] np . append ( a , np . empty ( ( number , ) , dtype = object ) ) out [ number ] array ( [ [ none , number , number ] , [ none , number , number ] , [ none , number , number ] , none ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_9	in [ number ] a [ , none ] out [ number ] array ( [ [ [ none , number , number ] ] , [ [ none , number , number ] ] , [ [ none , number , number ] ] ] , dtype = object )	0
Q_43	how to create a numpy array of list	C_43_10	in [ number ] a [ , none ] . tolist ( ) out [ number ] [ [ [ none , number , number ] ] , [ [ none , number , number ] ] , [ [ none , number , number ] ] ]	0
Q_43	how to create a numpy array of list	C_43_11	np . frompyfunc ( list , number , number ) ( np . empty ( ( number , number ) , dtype = object ) )	0
Q_44	pickle method descriptor object in python	C_44_0	python number . number method descriptors work out of the box python number . number . number continuum analytics , inc . ( default , oct number number , number number number ) [ gcc number . number . number number ( red hat number . number . number _ number ) ] on linux type string , string , string or string for var information . import pickle pickle . dumps ( set . union ) b string f = pickle . loads ( pickle . dumps ( set . union ) ) f ( { number , number , number } , { number } ) { number , number , number , number }	1
Q_44	pickle method descriptor object in python	C_44_1	"python number . number use < a href = string rel = string > < code > copyreg < / code > < / a > to provide a way for < code > pickle < / code > to work with < code > method_descriptor < / code > python number . number . number continuum analytics , inc . ( default , jun number number , number number number ) [ gcc number . number . number number ( red hat number . number . number _ number ) ] on linux type string , string , string or string for var information . import pickle pickle . dumps ( set . union ) traceback ( most recent call last ) file string , line number , in < module > _pickle . pickling_error can string method_descriptor "" > attribute lookup builtins . method_descriptor failed"	0
Q_44	pickle method descriptor object in python	C_44_2	type ( set . union ) < class string >	0
Q_44	pickle method descriptor object in python	C_44_3	def _reduce_method_descriptor ( m ) . return getattr , ( m . _objclass_ , m . _name_ ) . import copyreg copyreg . pickle ( type ( set . union ) , _reduce_method_descriptor )	0
Q_44	pickle method descriptor object in python	C_44_4	pickle . dumps ( set . union ) b string f = pickle . loads ( pickle . dumps ( set . union ) ) f ( { number , number , number } , { number } ) { number , number , number , number }	0
Q_44	pickle method descriptor object in python	C_44_5	import cloudpickle cloudpickle . dumps ( set . union ) b string f = pickle . loads ( pickle . dumps ( set . union ) ) f ( { number , number , number } , { number } ) { number , number , number , number }	0
Q_44	pickle method descriptor object in python	C_44_6	python number . number . number continuum analytics , inc . ( default , oct number number , number number number number ) [ gcc number . number . number number ( red hat number . number . number _ number ) ] on linux2 type string , string , string or string for var information . anaconda is brought to you by continuum analytics . please check out http / / continuum . io / thanks and https / / anaconda . org import pickle pickle . dumps ( set . union ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in dumps pickler ( file , protocol ) . dump ( obj ) file string , line number , in dump self . save ( obj ) file string , line number , in save rv = reduce ( self . proto ) file string , line number , in _reduce_ex raise type_error , string t pickle s objects string t pickle method_descriptor objects	0
Q_44	pickle method descriptor object in python	C_44_7	type ( set . union ) < type string >	0
Q_44	pickle method descriptor object in python	C_44_8	def _reduce_method_descriptor ( m ) . return getattr , ( m . _objclass_ , m . _name_ ) . import copy_reg copy_reg . pickle ( type ( set . union ) , _reduce_method_descriptor ) pickle . dumps ( set . union ) string union string	0
Q_44	pickle method descriptor object in python	C_44_9	var = pickle . loads ( pickle . dumps ( set . union ) ) var ( set ( [ number , number , number ] ) , set ( [ number ] ) )	0
Q_44	pickle method descriptor object in python	C_44_10	set ( [ number , number , number , number ] ) import cloudpickle cloudpickle . dumps ( set . union ) string f = pickle . loads ( cloudpickle . dumps ( set . union ) ) f ( set ( [ number , number , number ] ) , set ( [ number ] ) ) set ( [ number , number , number , number ] )	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_0	in [ number ] import numpy as np n = number a1 = np . random . rand ( n , n ) a2 = np . random . rand ( n , n ) a = np . stack ( ( a1 . flat , a2 . flat ) ) a . shape out [ number ] ( number , number )	1
Q_45	run in parallel a heavy loop on numpy chunk	C_45_1	in [ number ] chunks = np . array_split ( a , number , axis = number ) len ( chunks ) out [ number ] number in [ number ] chunks [ number ] out [ number ] array ( [ [ number . number , number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ] )	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_2	in [ number ] def slow_function ( pair ) return np . asscalar ( pair [ number ] ) + np . asscalar ( pair [ number ] ) def apply_on_chunk ( chunk ) return np . apply_along_axis ( slow_function , number , chunk ) apply_on_chunk ( chunks [ number ] ) out [ number ] array ( [ number . number number , number . number , number . number , number . number ] )	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_3	in [ number ] import dask . bag as db mybag = db . from_sequence ( chunks ) in [ number ] time myresult = mybag . map ( apply_on_chunk ) out [ number ] cpu times user number ms , sys number ns , total number ms wall time number . number ms	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_4	in [ number ] time myresult = myresult . compute ( ) out [ number ] cpu times user number ms , sys number ms , total number ms wall time number ms	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_5	in [ number ] myresult [ number ] out [ number ] [ array ( [ number . number number , number . number , number . number , number . number ] ) , array ( [ number . number , number . number , number . number , number . number number ] ) , array ( [ number . number , number . number , number . number , number . number ] ) , array ( [ number . number , number . number , number . number , number . number number ] ) , array ( [ number . number , number . number , number . number , number . number ] ) ]	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_6	in [ number ] time myresult = np . concatenate ( db . from_sequence ( np . array_split ( np . stack ( ( a1 . flat , a2 . flat ) ) , number , axis = number ) ) . map ( apply_on_chunk ) . compute ( ) ) out [ number ] cpu times user number ms , sys number ms , total number ms wall time number ms	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_7	in [ number ] time myresult_ = np . apply_along_axis ( slow_function , number , np . stack ( ( a1 . flat , a2 . flat ) ) ) out [ number ] cpu times user number ms , sys number ns , total number ms wall time number . number ms	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_8	in [ number ] n = number a1 = np . random . rand ( n , n ) a2 = np . random . rand ( n , n ) import time def slow_function ( pair ) time . sleep ( number . number number ) return np . asscalar ( pair [ number ] ) + np . asscalar ( pair [ number ] ) def apply_on_chunk ( chunk ) return np . apply_along_axis ( slow_function , number , chunk )	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_9	in [ number ] time myresult = np . concatenate ( db . from_sequence ( np . array_split ( np . stack ( ( a1 . flat , a2 . flat ) ) , number , axis = number ) ) . map ( apply_on_chunk ) . compute ( ) ) out [ number ] cpu times user number ms , sys number ms , total number ms wall time number . number s in [ number ] time myresult_ = np . apply_along_axis ( slow_function , number , np . stack ( ( a1 . flat , a2 . flat ) ) ) out [ number ] cpu times user number ms , sys number ms , total number ms wall time number . number s	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_10	in [ number ] np . testing . assert_array_equal ( myresult , myresult_ ) print ( string ) out [ number ] success	0
Q_45	run in parallel a heavy loop on numpy chunk	C_45_11	np . asarray ( xs ) , np . asarray ( ys ) , np . asarray ( idxs )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_0	in [ number ] a = np . ones ( ( number , number , number , number ) ) in [ number ] m1 = np . ones ( ( number , ) , bool ) in [ number ] m2 = np . ones ( ( number , ) , bool ) in [ number ] m2 [ _ number ] = false in [ number ] i , j = np . ix_ ( m1 , m2 ) in [ number ] a [ , i , j , ] . shape out [ number ] ( number , number , number , number )	1
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_1	in [ number ] i . shape out [ number ] ( number , number ) in [ number ] j . shape out [ number ] ( number , number )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_2	in [ number ] b = np . arange ( number * number * number ) . reshape ( ( number , number , number ) ) in [ number ] n1 = np . array ( [ true , false , true ] ) in [ number ] n2 = np . array ( [ true , false ] ) in [ number ] b [ , n1 , n2 ] out [ number ] array ( [ [ number , number ] ,	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_3	in [ number ] b [ np . ix_ ( np . arange ( b . shape [ number ] ) , n1 , n2 ) ]	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_4	in [ number ] m = np . arange ( number ) . reshape ( number , number ) in [ number ] m out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_5	in [ number ] m1 = np . arange ( number ) m2 = np . arange ( number )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_6	in [ number ] m [ m1 , m2 ] out [ number ] array ( [ number , number ] )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_7	in [ number ] m [ m1 [ , none ] , m2 ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_8	in [ number ] m2 = np . arange ( number ) in [ number ] m [ m1 [ , none ] , m2 ]	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_9	in [ number ] m2 = np . arange ( number ) in [ number ] m [ m1 , m2 ] out [ number ] array ( [ number , number ] )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_10	in [ number ] m1 = np . ones ( number , bool ) m2 = np . ones ( number , bool ) in [ number ] m [ m1 , m2 ] . value_error shape mismatch objects cannot be broadcast to a single shape in [ number ] m2 [ number ] = false	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_11	in [ number ] n1 out [ number ] array ( [ true , false , true ] , dtype = bool ) in [ number ] np . nonzero ( n1 ) out [ number ] ( array ( [ number , number ] , dtype = int32 ) , ) in [ number ] n2 out [ number ] array ( [ true , false ] , dtype = bool ) in [ number ] np . nonzero ( n2 ) out [ number ] ( array ( [ number ] , dtype = int32 ) , )	0
Q_46	numpy multi_dimensional slicing with multiple boolean array	C_46_12	in [ number ] np . broadcast_arrays ( np . array ( [ number , number ] ) , np . array ( [ number ] ) ) out [ number ] [ array ( [ number , number ] ) , array ( [ number , number ] ) ] in [ number ] np . broadcast_arrays ( np . array ( [ number , number ] ) [ , none ] , np . array ( [ number ] ) ) out [ number ] [ array ( [ [ number ] , [ number ] ] ) , array ( [ [ number ] , [ number ] ] ) ]	0
Q_47	multiply all combination of array element in numpy	C_47_0	import numpy t = [ number , number ] b = [ number , number , number , number ] numpy . outer ( t , b ) array ( [ [ number , number , number , number ] , [ number , number , number , number ] ] )	1
Q_47	multiply all combination of array element in numpy	C_47_1	number number number number _ + _ number number number number number number number number number number	0
Q_47	multiply all combination of array element in numpy	C_47_2	numpy . outer ( b , t ) array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_47	multiply all combination of array element in numpy	C_47_3	number number _ + _ number number number number number number number number number number number number	0
Q_47	multiply all combination of array element in numpy	C_47_4	numpy . dot ( [ number , number , number ] , [ number , number , number ] ) number	0
Q_47	multiply all combination of array element in numpy	C_47_5	number number number _ + _ number number number number	0
Q_47	multiply all combination of array element in numpy	C_47_6	array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_47	multiply all combination of array element in numpy	C_47_7	array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_47	multiply all combination of array element in numpy	C_47_8	number number number number number number _ + _ number number number number number number number number number number number number number number number	0
Q_47	multiply all combination of array element in numpy	C_47_9	[ [ number , number , number , number ] ] _ + _ [ [ number ] , number number number number [ number ] ] number number number number	0
Q_47	multiply all combination of array element in numpy	C_47_10	[ [ number ] , [ number ] , [ number ] , [ number ] ] _ + _ [ [ number , number ] ] ?	0
Q_47	multiply all combination of array element in numpy	C_47_11	[ [ number , number ] ] _ + _ [ [ number ] , number number [ number ] , number number [ number ] , number number [ number ] ] number number	0
Q_48	pyglet image render	C_48_0	self . blocks [ string ] = pyglet . image . load ( string )	1
Q_48	pyglet image render	C_48_1	var = pyglet . var . sprite ( pyglet . image . load ( string ) ) var . draw ( )	0
Q_48	pyglet image render	C_48_2	var = pyglet . graphics . batch ( ) background = pyglet . graphics . ordered_group ( number )	0
Q_48	pyglet image render	C_48_3	var = pyglet . image . load ( string ) for var in range ( number )	0
Q_48	pyglet image render	C_48_4	class base_sprite ( pyglet . sprite . sprite ) def _init_ ( self , texture , x , y , batch , subgroup ) self . texture = texture super ( base_sprite , self ) . _init_ ( self . texture , batch = batch , group = subgroup ) self . x = x self . y = y def move ( self , x , y ) string string string self . x + = x self . y + = y def _draw ( self ) string string string self . draw ( )	0
Q_48	pyglet image render	C_48_5	var = pyglet . graphics . batch ( ) background = pyglet . graphics . ordered_group ( number ) monster_image = pyglet . image . load ( string ) self . blocks [ string ] = base_sprite ( monster_image , number , number , var , background ) self . blocks [ string ] = base_sprite ( monster_image , number , number , var , background ) . var . draw ( )	0
Q_48	pyglet image render	C_48_6	class main ( pyglet . window . window ) def _init_ ( self ) super ( main , self ) . _init_ ( number , number , fullscreen = false ) self . x , self . y = number , number self . sprites = { } self . batches = { } self . subgroups = { } self . alive = number def on_draw ( self ) self . render ( ) def on_close ( self ) self . alive = number def render ( self ) self . clear ( ) for var , var in self . batches . items ( ) var . draw ( ) for sprite_name , sprite in self . sprites . items ( ) sprite . _draw ( ) self . flip ( )	0
Q_48	pyglet image render	C_48_7	import pyglet from pyglet . gl import * gl_enable ( gl_blend ) gl_blend_func ( gl_src_alpha , gl_one_minus_src_alpha ) gl_enable ( gl_line_smooth ) gl_hint ( gl_line_smooth_hint , gl_dont_care ) pyglet . clock . set_fps_limit ( number ) class base_sprite ( pyglet . sprite . sprite ) def _init_ ( self , texture , x , y , batch , subgroup ) self . texture = texture super ( base_sprite , self ) . _init_ ( self . texture , batch = batch , group = subgroup ) self . x = x self . y = y def move ( self , x , y ) string string string self . x + = x self . y + = y def _draw ( self ) string string string self . draw ( ) class main ( pyglet . window . window ) def _init_ ( self ) super ( main , self ) . _init_ ( number , number , fullscreen = false ) self . x , self . y = number , number self . sprites = { } self . batches = { } self . subgroups = { } self . _handles = { } self . batches [ string ] = pyglet . graphics . batch ( ) self . subgroups [ string ] = pyglet . graphics . ordered_group ( number ) monster_image = pyglet . image . load ( string ) for var in range ( number ) self . _handles [ string + str ( var ) ] = base_sprite ( monster_image , randint ( number , number ) , randint ( number , number ) , self . batches [ string ] , self . subgroups [ string ] )	0
Q_48	pyglet image render	C_48_8	var = { string ( number , number ) }	0
Q_48	pyglet image render	C_48_9	class base_sprite ( pyglet . sprite . sprite ) def _init_ ( self , texture , x , y , batch , subgroup ) self . texture = texture super ( base_sprite , self ) . _init_ ( self . texture , batch = batch , group = subgroup ) self . x = x + global_settings [ string ] [ number ]	0
Q_48	pyglet image render	C_48_10	class monster ( base_sprite ) def _init_ ( self , monster_image , main_batch , background ) super ( monster , self ) . _init_ ( imgage = monster_image , x = number , y = number , batch = main_batch , group = background ) def update ( self ) self . x = x + global_settings [ string ] [ number ]	0
Q_49	efficient way of append extract list element	C_49_0	in [ number ] r1 , r2 , r3 , r4 = np . arange ( number ) , np . ones ( number ) , np . zeros ( number ) , np . arange ( number ) [ _ number ] in [ number ] x1 = np . array ( ( r1 , r2 ) ) in [ number ] x2 = np . array ( ( r3 , r4 ) ) in [ number ] rays = [ x1 , x2 ] in [ number ] rays out [ number ] [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) , array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ]	1
Q_49	efficient way of append extract list element	C_49_1	in [ number ] ray_arr = np . array ( ( x1 , x2 ) ) in [ number ] ray_arr out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] ) in [ number ] ray_arr . shape out [ number ] ( number , number , number ) in [ number ] ray_arr [ _ number ] out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_2	in [ number ] ray_arr [ , , _ number ] out [ number ] array ( [ [ number . , number . ] , [ number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_3	in [ number ] [ var [ , _ number ] for var in rays ] out [ number ] [ array ( [ number . , number . ] ) , array ( [ number . , number . ] ) ]	0
Q_49	efficient way of append extract list element	C_49_4	in [ number ] list ( zip ( [ string , string ] , [ string , string ] ) ) out [ number ] [ ( string , string ) , ( string , string ) ] in [ number ] list ( zip ( [ string , string ] , [ string , string ] ) ) [ _ number ] out [ number ] ( string , string )	0
Q_49	efficient way of append extract list element	C_49_5	in [ number ] list ( zip ( [ string , string , string ] , [ string ] ) ) out [ number ] [ ( string , string ) ] in [ number ] list ( itertools . zip_longest ( [ string , string , string ] , [ string ] ) ) out [ number ] [ ( string , string ) , ( string , none ) , ( string , none ) ]	0
Q_49	efficient way of append extract list element	C_49_6	in [ number ] allrays = np . array ( [ r1 , r2 , r3 , r4 ] ) in [ number ] allrays out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_7	in [ number ] allrays [ , _ number ] out [ number ] array ( [ number . , number . , number . , number . ] )	0
Q_49	efficient way of append extract list element	C_49_8	in [ number ] allrays [ number number , ] out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_9	in [ number ] allrays [ number , ] out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_10	in [ number ] allrays [ [ number , number , number ] , ] out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] ) in [ number ] allrays [ [ number ] , ] out [ number ] array ( [ [ number . , number . , number . ] ] )	0
Q_49	efficient way of append extract list element	C_49_11	in [ number ] ind = [ [ number , number , number ] , [ number ] ] in [ number ] [ allrays [ var ] for var in ind ] out [ number ] [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] ) , array ( [ [ number . , number . , number . ] ] ) ]	0
Q_49	efficient way of append extract list element	C_49_12	in [ number ] np . split ( allrays , [ number ] ) out [ number ] [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] ) , array ( [ [ number . , number . , number . ] ] ) ]	0
Q_49	efficient way of append extract list element	C_49_13	in [ number ] ind1 = [ var [ _ number ] for var in ind ]	0
Q_50	use a function as argument to re sub in python	C_50_0	in [ number ] m = re . search ( r string , s ) in [ number ] m . group ( ) out [ number ] string	1
Q_50	use a function as argument to re sub in python	C_50_1	in [ number ] m . group ( number ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_2	in [ number ] m . groups ( ) out [ number ] ( string , )	0
Q_50	use a function as argument to re sub in python	C_50_3	in [ number ] m . group ( number ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_4	re . sub ( r string , lambda m func_replace ( m . group ( ) ) , s )	0
Q_50	use a function as argument to re sub in python	C_50_5	in [ number ] re . search ( r string , s ) . group ( ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_6	in [ number ] re . search ( r string , s ) . group ( number ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_7	in [ number ] func_replace ( string ) out [ number ] string in [ number ] func_replace ( string ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_8	import re def func_replace ( each_func ) i = number wordsineach_func = [ ] while len ( each_func ) > number i = i + number word_found = longest_word ( each_func ) if len ( word_found ) > number wordsineach_func . append ( word_found ) each_func = each_func . replace ( word_found , string ) return string . join ( wordsineach_func ) def longest_word ( phrase ) phrase_length = len ( phrase ) words_found = [ ] index = number outerstring = string while index < phrase_length outerstring = outerstring + phrase [ index ] index = index + number if outerstring in words or outerstring . lower ( ) in words words_found . append ( outerstring ) if len ( words_found ) = = number words_found . append ( phrase ) return max ( words_found , key = len ) words = [ ]	0
Q_50	use a function as argument to re sub in python	C_50_9	what the hello what the hello gob a c k	0
Q_50	use a function as argument to re sub in python	C_50_10	def foo ( m ) result = func_replace ( m . group ( ) ) print ( m . group ( ) , result ) return result in [ number ] re . sub ( r string , foo , s ) ( string , string ) < _ this shows you what m . group ( ) and func_replace ( m . group ( ) ) returns ( string , string ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_11	in [ number ] func_replace ( string ) out [ number ] string	0
Q_50	use a function as argument to re sub in python	C_50_12	in [ number ] func_replace ( hashtags [ number ] ) out [ number ] string in [ number ] func_replace ( string ) out [ number ] string	0
Q_51	sum number in a nest list	C_51_0	var = [ [ none ] * len ( table1 [ number ] ) ] * len ( table1 )	1
Q_51	sum number in a nest list	C_51_1	var = [ none ] * len ( table1 [ number ] ) ]	0
Q_51	sum number in a nest list	C_51_2	var = [ [ none ] * number ] * number var [ [ none , none , none ] , [ none , none , none ] ] var [ number ] [ number ] = number var [ [ none , number , none ] , [ none , number , none ] ]	0
Q_51	sum number in a nest list	C_51_3	var = [ [ none for var in table1 [ number ] ] for y in table1 ] var [ [ none , none , none ] , [ none , none , none ] ] var [ number ] [ number ] = number var [ [ none , number , none ] , [ none , none , none ] ]	0
Q_51	sum number in a nest list	C_51_4	var = [ [ none ] * len ( table1 [ number ] ) for var in table1 ] var [ [ none , none , none ] , [ none , none , none ] ] var [ number ] [ number ] = number var [ [ none , number , none ] , [ none , none , none ] ]	0
Q_51	sum number in a nest list	C_51_5	var = [ ] for var in table1 sumrow = [ ] index = number for i in table1 [ number ] sumrow . append ( table1 [ counter ] [ index ] + table2 [ counter ] [ index ] ) index + = number var . append ( sumrow ) counter + = number	0
Q_51	sum number in a nest list	C_51_6	for var , var in zip ( table1 , table2 ) sumrow = [ ] for item1 , item2 in zip ( var , var ) sumrow . append ( item1 + item2 ) table3 . append ( sumrow )	0
Q_51	sum number in a nest list	C_51_7	for var , var in zip ( table1 , table2 ) table3 . append ( [ item1 + item2 for item1 , item2 in zip ( var , var ) ] )	0
Q_51	sum number in a nest list	C_51_8	for var , var in zip ( table1 , table2 ) table3 . append ( list ( map ( sum , zip ( var , var ) ) ) )	0
Q_51	sum number in a nest list	C_51_9	var = [ list ( map ( sum , zip ( var , var ) ) ) for var , var in zip ( table1 , table2 ) ]	0
Q_51	sum number in a nest list	C_51_10	var = [ list ( map ( sum , zip ( * var ) ) ) for var in zip ( table1 , table2 ) ]	0
Q_52	2_d numpy_array with data type	C_52_0	in [ number ] a = np . zeros ( shape = ( number ) , dtype = string ) in [ number ] a out [ number ] array ( [ ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) , ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) ] , dtype = [ ( string , string ) , ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] )	1
Q_52	2_d numpy_array with data type	C_52_1	in [ number ] a [ string ] out [ number ] array ( [ number , number ] )	0
Q_52	2_d numpy_array with data type	C_52_2	in [ number ] a [ string ] out [ number ] array ( [ [ number . , number . , number . , number . ] , [ number . , number . , number . , number . ] ] )	0
Q_52	2_d numpy_array with data type	C_52_3	in [ number ] a [ number ] out [ number ] ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] )	0
Q_52	2_d numpy_array with data type	C_52_4	in [ number ] np . sum ( a [ string ] , axis = number ) out [ number ] array ( [ number . , number . ] )	0
Q_52	2_d numpy_array with data type	C_52_5	in [ number ] a = np . zeros ( shape = ( number ) , dtype = string )	0
Q_52	2_d numpy_array with data type	C_52_6	in [ number ] a [ string ] = [ number , number ]	0
Q_52	2_d numpy_array with data type	C_52_7	in [ number ] a [ string ] = number in [ number ] a out [ number ] array ( [ ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) , ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) ] , dtype = [ ( string , string ) , ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] )	0
Q_52	2_d numpy_array with data type	C_52_8	in [ number ] a [ string ] [ number , number ] = number in [ number ] a out [ number ] array ( [ ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) , ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) ] , dtype = [ ( string , string ) , ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] )	0
Q_52	2_d numpy_array with data type	C_52_9	in [ number ] a [ number ] = [ number , [ number , number , number ] , [ number , number , number , number ] ] . type_error string does not support the buffer interface	0
Q_52	2_d numpy_array with data type	C_52_10	in [ number ] a [ number ] = ( number , [ number , number , number ] , [ number , number , number , number ] ) in [ number ] a out [ number ] array ( [ ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) , ( number , [ number . number , number . number , number . number ] , [ number . number , number . number , number . number , number . number ] ) ] , dtype = [ ( string , string ) , ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] )	0
Q_53	multi post query	C_53_0	var = { string string , string string , string string , string string , string string , string string , string string , string string , } form2 = { string string , string string , string string , string string , string string , string string , string string , string string , string string } sub_url = string with requests . session ( ) as s s . post ( sub_url , data = var ) r = ( s . get ( string ) ) s . post ( string , data = form2 ) r = s . get ( string ) print ( r . content )	1
Q_53	multi post query	C_53_1	< h1 > your electricity offers < / h1 >	0
Q_53	multi post query	C_53_2	import scrapy class spider ( scrapy . spider ) name = string start_urls = [ string ] form1 = { string string , string string , string string , string string , string string , string string , string string , string string , } sub_url = string form2 = { string string , string string , string string , string string , string string , string string , string string , string string , string string } def start_requests ( self ) return [ scrapy . form_request ( self . sub_url , formdata = form1 , callback = self . parse ) ] def parse ( self , response ) return scrapy . form_request . from_response ( response , formdata = form2 , callback = self . after ) def after ( self , response ) print ( string in response . body )	0
Q_53	multi post query	C_53_3	number _ number number _ number number number number number [ scrapy ] debug crawled ( number ) < get https / / compare . switchon . vic . gov . au / offers	0
Q_53	multi post query	C_53_4	with requests . session ( ) as s s . post ( sub_url , data = form1 ) r = ( s . get ( string ) ) s . post ( string , data = form2 ) r = s . get ( string ) print ( r . json ( ) )	0
Q_53	multi post query	C_53_5	{ u string { u string false , u string false , u string true , u string true , u string false , u string true } , u string [ { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string true , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string false , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string false , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string false , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string true , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string true , u string none , u string u string , u string u string , u string false , u string u string , u string false , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string true , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string true , u string none , u string u string , u string u string , u string false , u string u string , u string true , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string true , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string true , u string none , u string u string , u string u string , u string false , u string u string , u string true , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string false , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string true , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string u string , u string u string , u string false , u string u string , u string true , u string none , u string number , u string u string , u string number , u string u string , u string u string } ] , u string false , u string false , u string number } , { u string [ { u string number , u string u string , u string u string , u string number , u string [ number ] , u string false , u string { } , u string number , u string false , u string number , u string u string , u string u string , u string number , u string number , u string number , u string u string , u string u string , u string [ u string ] , u string false , u string none , u string	0
Q_53	multi post query	C_53_6	https / / compare . switchon . vic . gov . au / service / offer / tariff / number / number	0
Q_53	multi post query	C_53_7	var = { string string , string string , string string , string string , string string , string string , string string , string string } form2 = { string string , string string , string string , string string , string string , string string , string string , string string , string string , string string } import json with requests . session ( ) as s s . post ( sub_url , data = var ) r = ( s . get ( string ) ) s . post ( string , data = form2 ) js = s . get ( string ) . json ( ) [ string ] by_discount = sorted ( js , key = lambda d d [ string ] [ number ] [ string ] )	0
Q_53	multi post query	C_53_8	from pprint import pprint as pp pp ( by_discount [ number ] )	0
Q_53	multi post query	C_53_9	[ { u string false , u string false , u string [ { u string number , u string number , u string [ u string ] , u string number , u string number , u string number , u string [ number ] , u string number , u string number , u string number , u string number , u string none , u string false , u string true , u string u string , u string false , u string false , u string false , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string none , u string { } , u string u string , u string u string } ] , u string number } , { u string false , u string false , u string [ { u string number , u string number , u string [ u string ] , u string number , u string number , u string number , u string [ number ] , u string number , u string number , u string number , u string number , u string none , u string false , u string true , u string u string , u string false , u string false , u string true , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string none , u string { } , u string u string , u string u string } ] , u string number } ]	0
Q_53	multi post query	C_53_10	var = sorted ( js , key = lambda d d [ string ] [ number ] [ string ] ) from pprint import pprint as pp pp ( var [ number ] ) [ { u string false , u string false , u string [ { u string number , u string number , u string [ u string ] , u string number , u string number , u string number , u string [ number ] , u string number , u string number , u string number , u string number , u string none , u string false , u string false , u string u string , u string false , u string false , u string false , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string none , u string { } , u string u string , u string u string } ] , u string number } , { u string false , u string false , u string [ { u string number , u string number , u string [ u string ] , u string number , u string number , u string number , u string [ number ] , u string number , u string number , u string number , u string number , u string none , u string false , u string false , u string u string , u string false , u string false , u string false , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string u string , u string none , u string { } , u string u string , u string u string } ] , u string number } ]	0
Q_53	multi post query	C_53_11	def order_by ( l , k , is_tou = false ) if not is_tou filt = filter ( lambda x not x [ string ] [ number ] [ string ] , l ) return sorted ( filt , key = lambda d d [ string ] [ number ] [ k ] ) return sorted ( l , key = lambda d d [ string ] [ number ] [ k ] ) import json with requests . session ( ) as s s . post ( sub_url , data = form1 ) r = ( s . get ( string ) ) s . post ( string , data = form2 ) js = s . get ( string ) . json ( ) [ string ] by_price = by_discount ( js , string , false ) print ( by_price [ number )	0
Q_53	multi post query	C_53_12	ng _ click = string conditional_price string ng _ click = string full_discounted_price string	0
Q_54	how to create consistent lambda function use a loop	C_54_0	import sys def foo ( ) result = [ ] for var in range ( number ) def bar ( ) return var result . append ( bar ) return result	1
Q_54	how to create consistent lambda function use a loop	C_54_1	_ string local variables { i number , result [ bar _ function _ number , bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_2	_ string local variables { } _ string local variables { i number , result [ bar _ function _ number , bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_3	_ string local variables { } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_4	_ string local variables { } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_5	def foo ( ) result = [ ] for var in range ( number ) def bar ( j = var ) return j result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_6	_ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_7	_ string local variables { j number } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_8	def foo ( ) result = [ ] for var in range ( number ) def bar ( var = var ) return var result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_9	_ string local variables { i number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_10	_ string local variables { i number } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_11	def make_bar ( j ) def bar ( ) return j return bar def foo ( ) result = [ ] for var in range ( number ) bar = make_bar ( var ) result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_12	_ string local variables { } _ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { make_bar make_bar _ function , foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_13	_ string local variables { } _ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { make_bar make_bar _ function , foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_14	var = [ ] for var in range ( number ) def make_f ( j ) def f ( x ) return j * x var . append ( make_f ( var ) )	0
Q_54	how to create consistent lambda function use a loop	C_54_15	var = [ ] for var in range ( number ) var . append ( ( lambda j lambda x j * x ) ( var ) )	0
Q_54	how to create consistent lambda function use a loop	C_54_16	var = [ ( lambda j lambda x j * x ) ( var ) for var in range ( number ) ]	0
Q_54	how to create consistent lambda function use a loop	C_54_17	var = [ lambda x , var = var var * x for var in range ( number ) ]	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_0	import os from multiprocessing import pool print ( os . getpid ( ) , string ) def func ( i ) print ( os . getpid ( ) , string , end = string ) if string in globals ( ) print ( globals ( ) [ string ] , end = string ) else print ( string , end = string ) if string in globals ( ) print ( globals ( ) [ string ] ) else print ( string ) print ( string ) pool1 = pool ( number ) pool1 . map ( func , range ( number ) )	1
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_1	number parent _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number second < function func at number > < function func at number > number second < function func at number > < function func at number > _ map _ number number second < function func at number > < function func at number > number second < function func at number > < function func at number >	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_2	func2 number func [ pickle ] globals ( ) [ string ] number	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_3	_ map _ number process pool_worker _ number process pool_worker _ number traceback ( most recent call last ) traceback ( most recent call last ) file string , line number , in _bootstrap file string , line number , in _bootstrap self . run ( ) self . run ( ) file string , line number , in run file string , line number , in run self . _target ( * self . _args , * * self . _kwargs ) self . _target ( * self . _args , * * self . _kwargs ) file string , line number , in worker file string , line number , in worker task = get ( ) task = get ( ) file string , line number , in get file string , line number , in get return recv ( ) return recv ( ) attribute_error string object has no attribute string attribute_error string object has no attribute string	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_4	_ map _ number process pool_worker _ number traceback ( most recent call last ) file string , line number , in _bootstrap process pool_worker _ number traceback ( most recent call last ) file string , line number , in _bootstrap self . run ( ) self . run ( ) file string , line number , in run file string , line number , in run self . _target ( * self . _args , * * self . _kwargs ) self . _target ( * self . _args , * * self . _kwargs ) file string , line number , in worker file string , line number , in worker task = get ( ) task = get ( ) file string , line number , in get file string , line number , in get return recv ( ) return recv ( ) attribute_error string object has no attribute string attribute_error string object has no attribute string	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_5	var , var , var , var , var = task print ( string , os . getpid ( ) , var , var , var , var , var )	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_6	number parent _ map _ number ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals _ map _ number ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals _ map _ number ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number first < function func at number > no func2 in globals _ map _ number ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number second < function func at number > < function func at number > ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number second < function func at number > < function func at number > _ map _ number ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) ( string , number , number , number , < function mapstar at number > , ( ( < function func at number > , ( number , ) ) , ) , { } ) number second < function func at number > < function func at number > number second < function func at number > < function func at number >	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_7	print ( func ) < function func at number >	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_8	print ( string , func . _name_ ) func . _name_ func print ( string , func2 . _name_ ) func2 . _name_ func	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_9	if name is none name = getattr ( obj , string , none )	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_10	if name is none name = obj . _name_ .	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_11	if obj2 is not obj raise pickling_error ( . )	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_12	import os from multiprocessing import pool print ( os . getpid ( ) , string ) def func ( i ) print ( os . getpid ( ) , string , end = string ) if string in globals ( ) print ( globals ( ) [ string ] , end = string ) else print ( string , end = string ) if string in globals ( ) print ( globals ( ) [ string ] ) else print ( string ) print ( string ) pool1 = pool ( number ) pool1 . map ( func , range ( number ) )	0
Q_55	python multiprocessing pool interaction with namespace at creation	C_55_13	number parent _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number first < function func at number > no func2 in globals number first < function func at number > no func2 in globals _ map _ number number second < function func at number > < function func at number > number second < function func at number > < function func at number > _ map _ number number second < function func at number > < function func at number > number second < function func at number > < function func at number >	0
Q_56	python search through html file grab a tag with the href and text content	C_56_0	var = urllib3 . pool_manager ( ) my_url = string var = var . request ( string , my_url ) html = var . data . decode ( string ) from bs4 import beautiful_soup print ( [ var [ string ] for var in beautiful_soup ( html ) . find_all ( string , href = true ) ] )	1
Q_56	python search through html file grab a tag with the href and text content	C_56_1	var = beautiful_soup ( html ) print ( [ var [ string ] for var in var . select ( string ) ] )	0
Q_56	python search through html file grab a tag with the href and text content	C_56_2	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_56	python search through html file grab a tag with the href and text content	C_56_3	var = beautiful_soup ( html ) a_tags = var . select ( string ) from pprint import pprint as pp paired = dict ( ( var . text , var [ string ] ) for var in a_tags ) pp ( paired )	0
Q_56	python search through html file grab a tag with the href and text content	C_56_4	"{ u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string s new i_phone faces challenge measuring up in china , india string https / / in . finance . yahoo . com / news / apples _ iphone _ faces _ challenge _ measuring _ number number . html string bad run continues for string , website down again on second day string https / / in . finance . yahoo . com / news / bad _ run _ continues _ freedom _ number _ number number . html string capital iq string http / / www . capitaliq . com string commodity systems , inc . ( csi ) string http / / www . csidata . com string download the new yahoo mail app string https / / in . mobile . yahoo . com / mail / string exclusive _ common mobile software could have opened san bernardino shooter string string , u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string s stock as wall st eyes new i_phone string https / / in . finance . yahoo . com / news / signs _ life _ apples _ stock _ wall _ number . html string solid support for var in i_phone encryption fight _ reuters / ipsos string https / / in . finance . yahoo . com / news / solid _ support _ apple _ iphone _ encryption _ number . html string u . s . appeals court upholds var e _ book settlement string https / / in . finance . yahoo . com / news / u _ appeals _ court _ upholds _ apple _ number . html string u . s . , var ratchet up rhetoric in fight over encryption string https / / in . finance . yahoo . com / news / u _ apple _ ratchet _ rhetoric _ fight _ number number . html string with china weakening , var turns to india string https / / in . finance . yahoo . com / news / china _ weakening _ apple _ turns _ india _ number number . html string yahoo string https / / in . yahoo . com / string yahoo india finance string https / / in . finance . yahoo . com string other exchanges string http / / help . yahoo . com / l / in / yahoo / finance / basics / fitadelay2 . html string premium service . string http / / billing . finance . yahoo . com / realtime_quotes / signup ? . src = quote . refer = quote "" }"	0
Q_56	python search through html file grab a tag with the href and text content	C_56_5	from lxml . etree import fromstring , html_parser xml = fromstring ( _html , html_parser ( ) ) a_tags = xml . xpath ( string yfncsumtab string ) paired = dict ( ( var . xpath ( string ) [ number ] . strip ( ) , var . xpath ( string ) [ number ] ) for var in a_tags ) from pprint import pprint as pp pp ( paired )	0
Q_56	python search through html file grab a tag with the href and text content	C_56_6	"{ string string , string string , string string , string string , string string , string string , string string , string s new i_phone faces challenge measuring up in china , india string https / / in . finance . yahoo . com / news / apples _ iphone _ faces _ challenge _ measuring _ number number . html string bad run continues for string , website down again on second day string https / / in . finance . yahoo . com / news / bad _ run _ continues _ freedom _ number _ number number . html string exclusive _ common mobile software could have opened san bernardino shooter string string , string string , string string , string string , string string , string s stock as wall st eyes new i_phone string https / / in . finance . yahoo . com / news / signs _ life _ apples _ stock _ wall _ number . html string solid support for var in i_phone encryption fight _ reuters / ipsos string https / / in . finance . yahoo . com / news / solid _ support _ apple _ iphone _ encryption _ number . html string u . s . appeals court upholds var e _ book settlement string https / / in . finance . yahoo . com / news / u _ appeals _ court _ upholds _ apple _ number . html string u . s . , var ratchet up rhetoric in fight over encryption string https / / in . finance . yahoo . com / news / u _ apple _ ratchet _ rhetoric _ fight _ number number . html string with china weakening , var turns to india string https / / in . finance . yahoo . com / news / china _ weakening _ apple _ turns _ india _ number number . html "" }"	0
Q_56	python search through html file grab a tag with the href and text content	C_56_7	var = beautiful_soup ( _html ) a_tags = var . select ( string ) from pprint import pprint as pp paired = dict ( ( var . text , var [ string ] ) for var in a_tags ) pp ( paired )	0
Q_56	python search through html file grab a tag with the href and text content	C_56_8	"{ u string string , u string string , u string string , u string string , u string string , u string string , u string string , u string s new i_phone faces challenge measuring up in china , india string https / / in . finance . yahoo . com / news / apples _ iphone _ faces _ challenge _ measuring _ number number . html string bad run continues for string , website down again on second day string https / / in . finance . yahoo . com / news / bad _ run _ continues _ freedom _ number _ number number . html string exclusive _ common mobile software could have opened san bernardino shooter string string , u string string , u string string , u string string , u string string , u string s stock as wall st eyes new i_phone string https / / in . finance . yahoo . com / news / signs _ life _ apples _ stock _ wall _ number . html string solid support for var in i_phone encryption fight _ reuters / ipsos string https / / in . finance . yahoo . com / news / solid _ support _ apple _ iphone _ encryption _ number . html string u . s . appeals court upholds var e _ book settlement string https / / in . finance . yahoo . com / news / u _ appeals _ court _ upholds _ apple _ number . html string u . s . , var ratchet up rhetoric in fight over encryption string https / / in . finance . yahoo . com / news / u _ apple _ ratchet _ rhetoric _ fight _ number number . html string with china weakening , var turns to india string https / / in . finance . yahoo . com / news / china _ weakening _ apple _ turns _ india _ number number . html "" }"	0
Q_56	python search through html file grab a tag with the href and text content	C_56_9	var = xml . xpath ( string yfncsumtab string ) paired = dict ( ( var . xpath ( string ) [ number ] . strip ( ) , var . xpath ( string ) [ number ] ) for var in var ) from pprint import pprint as pp pp ( paired )	0
Q_56	python search through html file grab a tag with the href and text content	C_56_10	{ string string , string s new i_phone faces challenge measuring up in china , india string https / / in . finance . yahoo . com / news / apples _ iphone _ faces _ challenge _ measuring _ number number . html string foxconn says in talks with sharp over deal hitch hopes for agreement string https / / in . finance . yahoo . com / news / sharp _ shares _ plunge _ foxconn _ puts _ number number . html string samsung wins appeal in patent dispute with var string https / / in . finance . yahoo . com / news / samsung _ wins _ appeal _ patent _ dispute _ number number . html string signs of life for var string string , string string }	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_0	in [ number ] xl = [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] in [ number ] [ var . var ( number ) for var , var in enumerate ( xl ) if number in var ] out [ number ] [ number , number , number ]	1
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_1	in [ number ] xa = np . array ( xl ) in [ number ] [ var . var ( number ) for var , var in enumerate ( xa ) if number in var ] . attribute_error string object has no attribute string	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_2	in [ number ] xs = sparse . csr_matrix ( xl ) in [ number ] xs out [ number ] < number x3 sparse matrix of type string numpy . int32 string with number stored elements in compressed sparse row format > in [ number ] [ var . var ( number ) for var , var in enumerate ( xs ) if number in var ] . value_error the truth value of an array with more than one element is ambiguous . use a . any ( ) or a . all ( ) .	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_3	in [ number ] [ var . var ( number ) for var , var in enumerate ( xs ) ] . attribute_error var not found	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_4	in [ number ] [ ( var , var ) for var , var in enumerate ( xs ) ] out [ number ] [ ( number , < number x3 sparse matrix of type string numpy . int32 string with number stored elements in compressed sparse row format > ) , ( number , < number x3 sparse matrix of type string numpy . int32 string with number stored elements in compressed sparse row format > ) , ( number , < number x3 sparse matrix of type string numpy . int32 string with number stored elements in compressed sparse row format > ) ]	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_5	in [ number ] number in xa [ number ] out [ number ] true in [ number ] number in xs [ number ] . value_error the truth value of an array with more than one element is ambiguous . use a . any ( ) or a . all ( ) .	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_6	in [ number ] if np . array ( [ true , false , true ] ) string . value_error the truth value of an array with more than one element is ambiguous . use a . any ( ) or a . all ( )	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_7	in [ number ] [ var . var ( number ) for var , var in enumerate ( xs . toarray ( ) . tolist ( ) ) if number in var ] out [ number ] [ number , number , number ]	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_8	in [ number ] xs = = number out [ number ] < number x3 sparse matrix of type string numpy . bool_ string with number stored elements in compressed sparse row format > in [ number ] ( xs = = number ) . a out [ number ] array ( [ [ false , true , false ] , [ false , false , true ] , [ true , true , false ] ] , dtype = bool )	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_9	in [ number ] ( xs = = number ) . nonzero ( ) out [ number ] ( array ( [ number , number , number , number ] , dtype = int32 ) , array ( [ number , number , number , number ] , dtype = int32 ) )	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_10	in [ number ] [ var . nonzero ( ) for var in ( xs = = number ) ] out [ number ] [ ( array ( [ number ] , dtype = int32 ) , array ( [ number ] , dtype = int32 ) ) , ( array ( [ number ] , dtype = int32 ) , array ( [ number ] , dtype = int32 ) ) , ( array ( [ number , number ] , dtype = int32 ) , array ( [ number , number ] , dtype = int32 ) ) ]	0
Q_57	find y index of a sparse tagint _d matrix by it value in python	C_57_11	in [ number ] [ var . nonzero ( ) [ number ] . tolist ( ) for var in ( xs = = number ) ] out [ number ] [ [ number ] , [ number ] , [ number , number ] ]	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_0	from itertools import groupby dataset = [ [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , ]	1
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_1	[ [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] ] [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] false [ ( number , number ) ] true [ ( number , number ) , ( number , number ) , ( number , number ) ] false [ ( number , number ) , ( number , number ) , ( number , number ) ] [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] false [ ( number , number ) ] true [ ( number , number ) ] false [ ( number , number ) ] true [ ( number , number ) ] false [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_2	from itertools import groupby dataset = [ [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , [ string , number , number ] , ]	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_3	[ ( number , number ) , ( number , number ) ] ( number , number )	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_4	print max ( ( max ( len ( list ( var ) ) for var , var in groupby ( zip ( col , col [ number ] ) , key = lambda t t [ number ] = = t [ number ] + number ) if var ) , i ) for i , col in enumerate ( ( sorted ( col ) for col in zip ( * dataset ) [ number ] ) , number ) )	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_5	def keyfunc ( t ) return t [ number ] _ t [ number ] < = number	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_6	def runlen ( seq ) return number + seq [ _ number ] [ number ] _ seq [ number ] [ number ]	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_7	def keyfunc ( t ) return t [ number ] _ t [ number ] < = number def runlen ( seq ) return number + seq [ _ number ] [ number ] _ seq [ number ] [ number ]	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_8	var = ( runlen ( list ( var ) ) for var , var in groupby ( pairs , key = keyfunc ) if var ) try m = max ( var ) except value_error m = number runs . append ( ( m , i ) )	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_9	from itertools import groupby dataset = [ [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , [ string , number , number , number ] , ] def keyfunc ( t ) return t [ number ] _ t [ number ] < = number def find_runs ( col ) pairs = zip ( col , col [ number ] )	0
Q_58	quick way to determine the long consecutive value range in a tagint _d_array	C_58_10	[ ( number , number ) , ( number , number ) , ( number , number ) ] ( number , number )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_0	in [ number ] a = sparse . csr_matrix ( [ [ number , number , number ] ,	1
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_1	in [ number ] ( aa . dot ( aa . t ) ) [ idx [ , number ] , idx [ , number ] ] out [ number ] array ( [ number , number , number , number ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_2	in [ number ] ( a * a . t ) [ idx [ , number ] , idx [ , number ] ] out [ number ] matrix ( [ [ number , number , number , number ] ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_3	in [ number ] ( aa [ idx [ , number ] ] * aa [ idx [ , number ] ] ) . sum ( axis = number ) out [ number ] array ( [ number , number , number , number ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_4	in [ number ] np . einsum ( string , aa [ idx [ , number ] ] , aa [ idx [ , number ] ] ) out [ number ] array ( [ number , number , number , number ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_5	in [ number ] ( a [ idx [ , number ] ] . multiply ( a [ idx [ , number ] ] ) ) . sum ( axis = number ) out [ number ] matrix ( [ [ number ] , [ number ] , [ number ] , [ number ] ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_6	in [ number ] timeit np . einsum ( string , aa [ idx [ , number ] ] , aa [ idx [ , number ] ] ) number loops , best of number number . number s per loop in [ number ] timeit ( a [ idx [ , number ] ] . multiply ( a [ idx [ , number ] ] ) ) . sum ( axis = number ) number loops , best of number number . number ms per loop in [ number ] timeit ( aa . dot ( aa . t ) ) [ idx [ , number ] , idx [ , number ] ] number loops , best of number number . number s per loop in [ number ] timeit ( a * a . t ) [ idx [ , number ] , idx [ , number ] ] number loops , best of number number s per loop	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_7	in [ number ] timeit [ aa [ var ] . dot ( aa [ var ] ) for var , var in idx ] number loops , best of number number . number s per loop in [ number ] timeit [ a [ var ] . multiply ( a [ var ] ) . sum ( ) for var , var in idx ] number loops , best of number number . number ms per loop	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_8	in [ number ] al = a . tolil ( ) in [ number ] timeit a [ idx [ , number ] ] number loops , best of number number s per loop in [ number ] timeit al [ idx [ , number ] ] number loops , best of number number s per loop	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_9	def extractor ( indices , n ) string string string indptr = np . arange ( len ( indices ) + number , dtype = int ) data = np . ones ( len ( indices ) , dtype = int ) shape = ( len ( indices ) , n ) return sparse . csr_matrix ( ( data , indices , indptr ) , shape = shape ) in [ number ] timeit . a1 = extractor ( idx [ , number ] , number ) * a . a2 = extractor ( idx [ , number ] , number ) * a . ( a1 . multiply ( a2 ) ) . sum ( axis = number ) . number loops , best of number number . number ms per loop	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_10	in [ number ] extractor ( idx [ , number ] , number ) . a out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ) in [ number ] a [ idx [ , number ] , ] . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = int32 ) in [ number ] ( extractor ( idx [ , number ] , number ) * a ) . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = int32 )	0
Q_59	numpy scipy broadcast calculate scalar product for a certain element	C_59_11	( a [ idx [ , number ] ] . multiply ( a [ idx [ , number ] ] ) ) . sum ( axis = number )	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_0	in [ number ] def func ( x ) . return x * * number .	1
Q_60	python make a list that include function but have as_yet undefined argument	C_60_1	in [ number ] [ func ( x * i ) , func ( x * i * * number ) ] . name_error name string is not defined	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_2	in [ number ] [ lambda x , i func ( x * i ) , lambda x , i func ( x * i * * number ) ] out [ number ] [ < function _main_ . < lambda , < function _main_ . < lambda ] in [ number ] flist = _	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_3	in [ number ] x = np . arange ( number ) in [ number ] i = number in [ number ] [ var ( x , i ) for var in flist ] out [ number ] [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_4	in [ number ] [ [ var ( x , i ) for var in flist ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_5	in [ number ] np . array ( _ ) out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] ] ] )	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_6	in [ number ] def func1 ( x , i , var = number ) . return func ( x * i * * var ) in [ number ] [ [ func1 ( x , i , var ) for var in [ number , number ] ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_7	in [ number ] from functools import partial in [ number ] flist = [ partial ( func1 , p = number ) , partial ( func1 , p = number ) ] in [ number ] [ [ var ( x , i ) for var in flist ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_8	in [ number ] def func1 ( x , i = number , p = number ) return func ( x * i * * p ) in [ number ] flist = [ partial ( func1 , p = number ) , partial ( func1 , p = number ) ] in [ number ] fflist = [ [ partial ( var , i = i ) for var in flist ] for i in range ( number ) ] in [ number ] fflist out [ number ] [ [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] , [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] , [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_9	in [ number ] [ [ var ( x ) for var in ff ] for ff in fflist ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_10	var = [ [ partial ( func1 , var = var , var = var ) for var in [ number , number ] ] for var in range ( number ) ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_11	in [ number ] z = [ [ partial ( var , x ) for var in ff ] for ff in fflist ] in [ number ] z out [ number ] [ [ functools . partial ( < function func1 at number > , array ( [ number , number , number ] ) , i = number , p = number ) , functools . partial ( < function func1 at number > , array ( [ number , number , number ] ) , i = number , p = number ) ] , . ] ] in [ number ] [ [ var ( ) for var in ff ] for ff in z ]	0
Q_61	how can i relatively scale something between two point	C_61_0	/ / an array of keys . the ? represents the applicable number value var keys = [ { time number , / / the state of an object at time number pos { x ? , y ? } , / / position scale ? , rotation ? , colour [ ? , ? , ? ] , / / rgb colour , just for the hell of it / / and whatever else you may want to animate } , { time number , / / the state of the object at time number pos { x ? , y ? } , scale ? , rotation ? , colour [ ? , ? , ? ] , / / and whatever else you may want to animate } ]	1
Q_61	how can i relatively scale something between two point	C_61_1	var current_time = number var time_dif = current_time _ keys [ number ] . time / / difference from start time to current / / to get the normalised time divid by the differance var norm_time = time_dif / ( keys [ number ] . time _ keys [ number ] . time ) / / divide by the differance in time between keys	0
Q_61	how can i relatively scale something between two point	C_61_2	var scale_dif = keys [ number ] . scale _ keys [ number ] . scale / / get diff in scale var scale_change = scale_dif * norm_time / / multiply by the normalised time var current_scale = keys [ number ] . scale + scale_change / / add to the starting scale	0
Q_61	how can i relatively scale something between two point	C_61_3	function tween_keys ( time , key1 , key2 ) { var nt = ( time _ key1 . time ) / ( key2 . time _ key1 . time ) / / get normalised time / / because you can not divide by zero we need a little check . javascript return infinity if we div by zero but we want the value number nt = nt < infinity ? nt number / / zero if there was a divide by zero var ck = { } / / ck for current key . the key represents the state at time ck . scale = key1 . scale + ( key2 . scale _ key1 . scale ) * nt ck . rotation = key1 . rotation + ( key2 . rotation _ key1 . rotation ) * nt ck . pos . x = key1 . pos . x + ( key2 . pos . x _ key1 . pos . x ) * nt ck . pos . y = key1 . pos . y + ( key2 . pos . y _ key1 . pos . y ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt return ck / / return the newly create state }	0
Q_61	how can i relatively scale something between two point	C_61_4	var p1 = { x ? , y ? } / / ? represent some number value var p2 = { x ? , y ? } / / ? represent some number value	0
Q_61	how can i relatively scale something between two point	C_61_5	var c = { x ? , y ? } / / ? represent some number value	0
Q_61	how can i relatively scale something between two point	C_61_6	var dist = math . sqrt ( math . pow ( p2 . x _ p1 . x , number ) + math . pow ( p2 . y _ p1 . y , number ) ) / / for the twisted world of ie users and var dist = math . hypot ( p2 . x _ p1 . x , p2 . y _ p1 . y ) / / for all good browsers	0
Q_61	how can i relatively scale something between two point	C_61_7	var norm_dist = math . hypot ( c . x _ p1 . x , c . y _ p1 . y ) / math . hypot ( p2 . x _ p1 . x , p2 . y _ p1 . y ) / / because you can not divide by zero we need a little check . javascript returns infinity if we div by zero but we want the value number norm_dist = norm_dist < infinity ? norm_dist number / / zero if there was a divide by zero	0
Q_61	how can i relatively scale something between two point	C_61_8	var current_scale = ( keys [ number ] . scale _ keys [ number ] . scale ) * norm_dist + keys [ number ] . scale	0
Q_61	how can i relatively scale something between two point	C_61_9	/ / get the unit distance on the line p1 , p2 of point c representing / / the distance along the line that is closest to c function unit_dist_of_point ( p1 , p2 , c ) { var v1 = { } / / working vectors var v2 = { } v1 . x = p2 . x _ p1 . x / / vector between p1 , p2 v1 . y = p2 . y _ p1 . y v2 . x = c . x _ p1 . x / / vector to c from p1 v2 . y = c . y _ p1 . y / / a little math magic . divide the dot product of the vectors v2 , v1 / / by the square of line length return ( v2 . x * v1 . x + v2 . y * v1 . y ) / ( v1 . y * v1 . y + v1 . x * v1 . x ) }	0
Q_61	how can i relatively scale something between two point	C_61_10	/ / return the state for a object at point c in terms of key1 , to key2 function tween_keys_via_pos ( c , key1 , key2 ) { / / get the normalised distance of the point c between keys number and number var nd = unit_dist_of_point ( c , key1 . pos , key2 . pos ) / / nd for normalised distance / / you may want to constrain the position to only between the points / / do that by clamping the value nd between number and number inclusive nd = math . max ( number , math . min ( number , nd ) ) / / clamp the normalise distance var ck = { } / / ck for current key . the key represents the state at time ck . scale = key1 . scale + ( key2 . scale _ key1 . scale ) * nt ck . rotation = key1 . rotation + ( key2 . rotation _ key1 . rotation ) * nt ck . pos . x = key1 . pos . x + ( key2 . pos . x _ key1 . pos . x ) * nt ck . pos . y = key1 . pos . y + ( key2 . pos . y _ key1 . pos . y ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt return ck / / return the newly create state }	0
Q_61	how can i relatively scale something between two point	C_61_11	/ / returns the distance point c is from the line p1 , p2 . if on the line / / the the return value is number . if befor point p1 or after p2 then the distance / / is the distance to p1 , or p2 respectively function dist_from_line ( p1 , p2 , c ) { var v1 = { } / / working vectors var v2 = { } v1 . x = p2 . x _ p1 . x / / vector between p1 , p2 v1 . y = p2 . y _ p1 . y v2 . x = c . x _ p1 . x / / vector to c from p1 v2 . y = c . y _ p1 . y / / a little math magic . divide the dot product of the vectors v2 , v1 / / by the square of line length var u = ( v2 . x * v1 . x + v2 . y * v1 . y ) / ( v1 . y * v1 . y + v1 . x * v1 . x ) var v3 = { } if ( u < number ) { / / befor the start return math . hypot ( v2 . x , v2 . y ) / / distance to p1 } if ( u > number ) { / / after end return math . hypot ( c . x _ p2 . x , c . y p2 . y ) / / distance to p2 } / / get the point on the line that is closest v3 . x = p1 . x + v1 . x * u v3 . y = p1 . y + v1 . y * u / / return the distance from that point to c return math . hypot ( c . x _ v3 . x , c . y _ v3 . y ) / / distance from line of c }	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_0	import argparse parser_a = argparse . argument_parser ( ) a1 = parser_a . add_argument ( string , string , string ) print ( a1 ) print ( ) parser_b = argparse . argument_parser ( ) b1 = parser_b . add_argument ( string , string , string ) print ( b1 ) b1 . dest = string	1
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_1	number / mypy python3 stack38071986 . py _store_action ( option_strings = [ string , string , string ] , dest = string , nargs = none , const = none , default = none , type = none , choices = none , help = none , metavar = none ) _store_action ( option_strings = [ string , string , string ] , dest = string , nargs = none , const = none , default = none , type = none , choices = none , help = none , metavar = none ) [ _store_action ( option_strings = [ string , string ] , dest = string , nargs = none , const = none , default = none , type = none , choices = none , help = none , metavar = none ) , _help_action ( option_strings = [ string , string ] , dest = string , nargs = number , const = none , default = string , type = none , choices = none , help = string , metavar = none ) , _store_action ( option_strings = [ string , string , string ] , dest = string , nargs = none , const = none , default = none , type = none , choices = none , help = none , metavar = none ) ] usage stack38071986 . py [ _ f foo ] optional arguments help show this help message and exit _ f foo , _ foo foo usage stack38071986 . py [ _ f foo ] [ _ h ] [ _ g bar ] optional arguments _ f foo , _ foo foo _ h , _ help show this help message and exit _ g bar , _ goo bar , _ bar bar	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_2	import argparse def pp ( adict ) for var in adict v = adict [ var ] print ( string var , v . option_strings , v . dest ) def new_resolve ( self , action , conflicting_actions ) rename_dict = { string string } for option_string , action in conflicting_actions new_string = rename_dict . get ( option_string , none ) if new_string	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_3	number / mypy python3 stack38071986 . py _ var1 number _ var number [ string ] action _ var [ string ] var1 action _ g [ string , string ] goo action _ foo [ string , string ] foo action _ h [ string , string ] help action _ goo [ string , string ] goo action _ help [ string , string ] help action _ f [ string , string ] foo _store_action ( option_strings = [ string ] , dest = string , nargs = none , const = none , default = none , type = none , choices = none , help = none , metavar = none ) action _ g [ string , string ] goo action _ var1 [ string ] var1 action _ foo [ string , string ] foo action _ h [ string , string ] help action _ goo [ string , string ] goo action _ help [ string , string ] help action _ f [ string , string ] foo usage stack38071986 . py [ _ f foo ] [ _ var1 var1 ] optional arguments help show this help message and exit _ f foo , _ foo foo _ var1 var1 usage stack38071986 . py [ _ f foo ] [ _ var1 var1 ] [ _ h ] [ _ g goo ] [ _ var var ] optional arguments _ f foo , _ foo foo _ var1 var1 _ h , _ help show this help message and exit _ g goo , _ goo goo _ var var namespace ( foo = none , goo = none , var = string , var1 = string )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_4	var = argparse . argument_parser ( ) var . add_argument ( . )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_5	import argparse def add_actions ( parser , other , skip_list = none , rename_dict = none )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_6	number / mypy python3 stack38071986_1 . py _ var_a number _ var_b number skipping help skipping help usage stack38071986_1 . py [ _ h ] [ _ f foo ] [ _ var_a vara ] [ _ g goo ] [ _ var_b varb ] optional arguments _ h , _ help show this help message and exit _ f foo , _ foo foo _ var_a vara _ g goo , _ goo goo _ var_b varb namespace ( foo = none , goo = none , var_a = string , var_b = string )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_7	print ( string ) for var in parser_c . _actions print ( var . option_strings , var . dest )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_8	parser_c actions [ string , string ] help [ string , string ] foo [ string ] var_a [ string , string ] goo [ string ] var_b	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_9	for var in parser_c . _actions if var . dest . startswith ( string ) var . dest = var . dest + string print ( parser_c . parse_args ( ) )	0
Q_62	how to get argument for tagint different object from the command line when there be a naming conflict in python argparse	C_62_10	namespace ( foo = none , goo = none , var_a_c = none , var_b_c = string )	0
Q_63	select row contain certain value from panda dataframe	C_63_0	in [ number ] df out [ number ] a b c number apple banana pear number pear pear apple number banana pear pear number apple apple pear	1
Q_63	select row contain certain value from panda dataframe	C_63_1	in [ number ] df = = string out [ number ] a b c number false true false number false false false number true false false number false false false	0
Q_63	select row contain certain value from panda dataframe	C_63_2	in [ number ] ( df = = string ) . any ( axis = number ) out [ number ] number true number false number true number false dtype bool	0
Q_63	select row contain certain value from panda dataframe	C_63_3	in [ number ] df [ ( df = = string ) . any ( axis = number ) ] out [ number ] a b c number apple banana pear number banana pear pear	0
Q_63	select row contain certain value from panda dataframe	C_63_4	in [ number ] df out [ number ] a b c number apple banana pear number pear pear apple number banana pear pear number apple apple pear	0
Q_63	select row contain certain value from panda dataframe	C_63_5	in [ number ] np . isin ( df , [ string , string ] ) out [ number ] array ( [ [ true , false , true ] , [ true , true , true ] , [ false , true , true ] , [ true , true , true ] ] )	0
Q_63	select row contain certain value from panda dataframe	C_63_6	in [ number ] df out [ number ] a b c number apple banana pear number pear pear apple number banana pear pear number apple apple pear	0
Q_63	select row contain certain value from panda dataframe	C_63_7	in [ number ] np . equal . outer ( df . to_numpy ( copy = false ) , [ string , string ] ) . any ( axis = number ) out [ number ] array ( [ [ true , true ] , [ true , true ] , [ true , false ] , [ true , true ] ] )	0
Q_63	select row contain certain value from panda dataframe	C_63_8	in [ number ] np . equal . outer ( df . to_numpy ( copy = false ) , [ string , string , string ] ) . any ( axis = number ) out [ number ] array ( [ [ true , true , true ] , [ true , false , true ] , [ false , true , true ] , [ true , false , true ] ] )	0
Q_63	select row contain certain value from panda dataframe	C_63_9	in [ number ] np . equal . outer ( df . to_numpy ( copy = false ) , [ string , string ] ) . any ( axis = number ) out [ number ] array ( [ [ true , true ] , [ true , true ] , [ true , false ] , [ true , true ] ] )	0
Q_63	select row contain certain value from panda dataframe	C_63_10	in [ number ] np . equal . outer ( df . to_numpy ( copy = false ) , [ string , string ] ) . any ( axis = number ) . all ( axis = number ) out [ number ] array ( [ true , true , false , true ] )	0
Q_63	select row contain certain value from panda dataframe	C_63_11	in [ number ] df [ np . equal . outer ( df . to_numpy ( copy = false ) , [ string , string ] ) . any ( axis = number ) . all ( axis = number ) ] out [ number ] a b c number apple banana pear number pear pear apple number apple apple pear	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_0	in [ number ] x = np . arange ( number )	1
Q_64	discriminate basic and advance slicing of numpy array	C_64_1	in [ number ] x [ ( number , number , number ) , ] out [ number ] array ( [ number , number , number ] ) in [ number ] x [ [ number , number , number ] ] out [ number ] array ( [ number , number , number ] )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_2	in [ number ] x [ ( number , number , number ) ] . index_error too many indices for array	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_3	in [ number ] x [ number , number , number ] index_error too many indices for array	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_4	in [ number ] ( ( number , number , number ) ) out [ number ] ( number , number , number ) in [ number ] ( ( number , number , number ) , ) out [ number ] ( ( number , number , number ) , )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_5	in [ number ] x = np . arange ( number ) . reshape ( number , number , number )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_6	in [ number ] x [ ( number , number , number ) ] out [ number ] number in [ number ] x [ number , number , number ] out [ number ] number	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_7	in [ number ] x [ number , number , ] out [ number ] array ( [ number , number , number , number ] )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_8	in [ number ] x [ ( number , number , ) ] . syntax_error invalid syntax	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_9	in [ number ] x [ ( number , number , slice ( none ) ) ] out [ number ] array ( [ number , number , number , number ] ) in [ number ] x [ [ number , number , slice ( none ) ] ] out [ number ] array ( [ number , number , number , number ] )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_10	in [ number ] x [ np . r_ [ number , number , number number ] ] out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_64	discriminate basic and advance slicing of numpy array	C_64_11	in [ number ] np . r_ [ number , number , number number ] out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_0	import pandas as pd import numpy as np n = number np . random . seed ( [ number , number ] ) data = np . random . rand ( n ) tidx = pd . date_range ( string , periods = n , freq = string , name = string )	1
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_1	var = pd . data_frame ( np . subtract . outer ( tidx , tidx ) , tidx , tidx ) . abs ( )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_2	var = ( distances < = delta ) . stack ( ) var = var [ var ]	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_3	pd . series ( ts . ix [ lt_delta . index . to_series ( ) . str . get ( number ) ] . values , lt_delta . index )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_4	super function def groupbydelta ( ts , delta ) tidx = ts . index distances = pd . data_frame ( np . subtract . outer ( tidx , tidx ) , tidx , tidx ) . abs ( ) lt_delta = ( distances < = delta ) . stack ( ) lt_delta = lt_delta [ lt_delta ] closest = pd . series ( ts . ix [ lt_delta . index . to_series ( ) . str . get ( number ) ] . values , lt_delta . index ) return closest . groupby ( level = number )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_5	"inspired by root string lo string hi "" tidx + delta } , tidx ) return pd . concat ( [ ts . loc [ var . lo var . hi ] for var , var in iv . iterrows ( ) ] , keys = iv . index ) . groupby ( level = number )"	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_6	var = groupbydelta ( ts , pd . timedelta ( number , string ) ) . mean ( ) rolling = ts . rolling ( number , center = true ) . mean ( ) pd . concat ( [ var , rolling ] , axis = number , keys = [ string , string ] ) . head ( )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_7	np . random . seed ( [ number , number ] ) n = number data = np . random . rand ( n ) tidx = ( pd . to_datetime ( [ string ] ) + np . random . rand ( n ) * pd . timedelta ( number , string ) ) irregular_series = pd . series ( data , tidx , name = string ) . sort_index ( )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_8	var = ( irregular_series _ gbirr . mean ( ) ) / gbirr . std ( )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_9	var , var = plt . subplots ( number , number , sharey = true , figsize = [ number , number ] ) irregular_series . plot ( style = string , ax = var [ number ] , title = string ) zd . plot ( style = string , ax = var [ number ] , title = string )	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_10	var = groupbydelta ( ts , pd . timedelta ( number , string ) ) ts . sub ( var . mean ( ) ) . div ( var . std ( ) ) time number _ number number _ number number number number number number . number number _ number number _ number number number number number number _ number . number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number _ number . number number _ number number _ number number number number number number _ number . number number _ number number _ number number number number number number _ number . number number _ number number _ number number number number number number _ number . number number number _ number number _ number number number number number number number . number number number _ number number _ number number number number number number number . number number number _ number number _ number number number number number number _ number . number number number _ number number _ number number number number number number . number number number _ number number _ number number number number number _ number . number number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number _ number . number number _ number number _ number number number number number number . number number number _ number number _ number number number number number _ number . number number _ number number _ number number number number number _ number . number number _ number number _ number number number number number number . number number number _ number number _ number number number number number number . number freq t , dtype float64	0
Q_65	transform irregular timeseries into zscores relative to close neighbor	C_65_11	def pirsquared ( ts , delta ) gbd = groupbydelta ( ts , delta ) return ts . sub ( gbd . mean ( ) ) . div ( gbd . std ( ) ) cols = [ string , string ] ts_len = [ number , number , number , number , number ] dt_len = [ number , number , number , number ] summary = pd . data_frame ( [ ] , pd . multi_index . from_product ( [ ts_len , dt_len ] , names = [ string , string ] ) , cols ) for var in ts_len for d in dt_len np . random . seed ( [ number , number ] ) data = np . random . rand ( var ) tidx = ( pd . to_datetime ( [ string ] ) + np . random . rand ( var ) * pd . timedelta ( number , string ) ) ts = pd . series ( data , tidx , name = string ) . sort_index ( ) delta = pd . timedelta ( d , string ) pt = timeit ( lambda pirsquared ( ts , delta ) , number = number ) / number rt = timeit ( lambda root ( ts , delta ) , number = number ) / number summary . loc [ ( var , d ) , cols ] = pt , rt summary . unstack ( ) . swaplevel ( number , number , number ) . sort_index ( number )	0
Q_66	recursive to iterative use a systematic method	C_66_0	def fac ( n ) if n = = number return number else return n * fac ( n _ number )	1
Q_66	recursive to iterative use a systematic method	C_66_1	def fac_ ( n , r ) return ( n + number ) * r def fac ( n ) if n = = number return number else r = fac ( n _ number ) return fac_ ( n _ number , r )	0
Q_66	recursive to iterative use a systematic method	C_66_2	def fac_opt ( n ) if n = = number return number x = number r = number while x = n x = x + number r = fac_ ( x _ number , r ) return r	0
Q_66	recursive to iterative use a systematic method	C_66_3	def fac_opt ( n ) r = number for var in range ( number , n + number ) r * = var return r	0
Q_66	recursive to iterative use a systematic method	C_66_4	def fib ( n ) if n = = number return number elif n = = number return number else return fib ( n _ number ) + fib ( n _ number )	0
Q_66	recursive to iterative use a systematic method	C_66_5	def fib_ext_ ( n , r_ext ) return r_ext [ number ] + r_ext [ number ] , r_ext [ number ] def fib_ext ( n ) if n = = number return number , number elif n = = number return number , number else r_ext = fib_ext ( n _ number ) return fib_ext_ ( n _ number , r_ext ) def fib ( n ) return fib_ext ( n ) [ number ]	0
Q_66	recursive to iterative use a systematic method	C_66_6	def fib_ext_opt ( n ) if n = = number return number , number if n = = number return number , number x = number r_ext = number , number while x = n x = x + number r_ext = fib_ext_ ( x _ number , r_ext ) return r_ext def fib_opt ( n ) return fib_ext_opt ( n ) [ number ]	0
Q_66	recursive to iterative use a systematic method	C_66_7	def fib_opt ( n ) if n < number return n a , b = number , number for var in range ( n _ number ) a , b = b , a + b return b	0
Q_66	recursive to iterative use a systematic method	C_66_8	def bin ( n , k ) if k = = number or k = = n return number else return bin ( n _ number , k _ number ) + bin ( n _ number , k )	0
Q_66	recursive to iterative use a systematic method	C_66_9	def bin_ext_ ( r ) return [ var + var for var , var in zip ( [ number ] + r , r + [ number ] ) ] def bin_ext ( n ) if n = = number return [ number ] else r = bin_ext ( n _ number ) return bin_ext_ ( r ) def bin ( n , k ) return bin_ext ( n ) [ k ]	0
Q_66	recursive to iterative use a systematic method	C_66_10	def bin_ext_opt ( n ) if n = = number return [ number ] x = number r = [ number , number ] while x = n r = bin_ext_ ( r ) x + = number return r def bin_opt ( n , k ) return bin_ext_opt ( n ) [ k ]	0
Q_66	recursive to iterative use a systematic method	C_66_11	def bin_ext_ ( n , k_from , k_to , r ) if k_from = = number and k_to = = n return [ var + var for var , var in zip ( [ number ] + r , r + [ number ] ) ] elif k_from = = number return [ var + var for var , var in zip ( [ number ] + r [ _ number ] , r ) ] elif k_to = = n return [ var + var for var , var in zip ( r , r [ number ] + [ number ] ) ] else return [ var + var for var , var in zip ( r [ _ number ] , r [ number ] ) ] def bin_ext ( n , k_from , k_to ) if n = = number return [ number ] else r = bin_ext ( n _ number , max ( number , k_from _ number ) , min ( n _ number , k_to + number ) ) return bin_ext_ ( n , k_from , k_to , r ) def bin ( n , k ) return bin_ext ( n , k , k ) [ number ] def bin_ext_opt ( n , k_from , k_to ) if n = = number return [ number ] ks = [ ( k_from , k_to ) ] for i in range ( number , n ) ks . append ( ( max ( number , ks [ _ number ] [ number ] _ number ) , min ( n _ i , ks [ _ number ] [ number ] + number ) ) ) x = number r = [ number ] while x = n x + = number r = bin_ext_ ( x , * ks [ n _ x ] , r ) return r def bin_opt ( n , k ) return bin_ext_opt ( n , k , k ) [ number ]	0
Q_67	find the row index of several value in a numpy array	C_67_0	np . where ( ( x = = searched_values [ , none ] ) . all ( _ number ) ) [ number ]	1
Q_67	find the row index of several value in a numpy array	C_67_1	var = x . max ( number ) + number out = np . where ( np . in1d ( np . ravel_multi_index ( x . t , var ) , np . ravel_multi_index ( searched_values . t , var ) ) ) [ number ]	0
Q_67	find the row index of several value in a numpy array	C_67_2	var = x . max ( number ) + number x1_d = np . ravel_multi_index ( x . t , var ) searched_values_id = np . ravel_multi_index ( searched_values . t , var ) sidx = x1_d . argsort ( ) out = sidx [ np . searchsorted ( x1_d , searched_values_id , sorter = sidx ) ]	0
Q_67	find the row index of several value in a numpy array	C_67_3	in [ number ] x out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_67	find the row index of several value in a numpy array	C_67_4	in [ number ] dims out [ number ] array ( [ number , number ] )	0
Q_67	find the row index of several value in a numpy array	C_67_5	in [ number ] out = np . zeros ( dims , dtype = int ) in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] )	0
Q_67	find the row index of several value in a numpy array	C_67_6	in [ number ] out [ number , number ] = number in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] )	0
Q_67	find the row index of several value in a numpy array	C_67_7	in [ number ] np . where ( out . ravel ( ) ) [ number ] out [ number ] array ( [ number ] )	0
Q_67	find the row index of several value in a numpy array	C_67_8	in [ number ] np . ravel_multi_index ( x . t , dims ) out [ number ] array ( [ number , number , number , number , number ] )	0
Q_67	find the row index of several value in a numpy array	C_67_9	in [ number ] x out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_67	find the row index of several value in a numpy array	C_67_10	in [ number ] dims = x . max ( axis = number ) + number	0
Q_68	intersection of np array and set	C_68_0	in [ number ] data = np . random . randint ( number , number , ( number , number , number ) , dtype = np . uint8 )	1
Q_68	intersection of np array and set	C_68_1	in [ number ] data . reshape ( number , _ number , number )	0
Q_68	intersection of np array and set	C_68_2	in [ number ] aset = { tuple ( var ) for var in data . reshape ( _ number , number ) } in [ number ] aset out [ number ] { ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , . in [ number ] len ( aset ) out [ number ] number	0
Q_68	intersection of np array and set	C_68_3	in [ number ] selection_data = { tuple ( data [ number , number , ] ) , ( number , number , number ) , tuple ( data [ number , number , ] ) } in [ number ] selection_data out [ number ] { ( number , number , number ) , ( number , number , number ) , ( number , number , number ) } in [ number ] selection_data aset out [ number ] { ( number , number , number ) , ( number , number , number ) }	0
Q_68	intersection of np array and set	C_68_4	in [ number ] timeit { tuple ( var ) for var in data . reshape ( _ number , number ) . tolist ( ) } number loops , best of number number . number s per loop in [ number ] timeit { tuple ( var ) for var in data . reshape ( _ number , number ) } number loops , best of number number s per loop in [ number ] timeit data . reshape ( _ number , number ) . tolist ( ) number loops , best of number number . number s per loop in [ number ] timeit { tuple ( var . tolist ( ) ) for var in data . reshape ( _ number , number ) } number loops , best of number number s per loop	0
Q_68	intersection of np array and set	C_68_5	in [ number ] dt = np . dtype ( string ) in [ number ] data1 = data . reshape ( _ number , number ) . view ( dt ) . ravel ( ) in [ number ] data1 out [ number ] array ( [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , . dtype = [ ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_68	intersection of np array and set	C_68_6	in [ number ] selection = [ data [ number , number , ] , [ number , number , number ] , data [ number , number , ] ] in [ number ] selection = np . array ( selection , np . uint8 ) . view ( dt ) in [ number ] selection out [ number ] array ( [ [ ( number , number , number ) ] , [ ( number , number , number ) ] , [ ( number , number , number ) ] ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_68	intersection of np array and set	C_68_7	in [ number ] np . in1d ( selection , data1 ) out [ number ] array ( [ true , false , true ] , dtype = bool )	0
Q_68	intersection of np array and set	C_68_8	in [ number ] np . where ( np . in1d ( data1 , selection ) ) out [ number ] ( array ( [ number , number ] , dtype = int32 ) , )	0
Q_68	intersection of np array and set	C_68_9	in [ number ] np . where ( np . in1d ( data1 , selection ) . reshape ( number , number ) ) out [ number ] ( array ( [ number , number ] , dtype = int32 ) , array ( [ number , number ] , dtype = int32 ) )	0
Q_68	intersection of np array and set	C_68_10	in [ number ] timeit . data1 = data . reshape ( _ number , number ) . view ( dt ) . ravel ( ) . np . in1d ( data1 , selection ) . number loops , best of number number . number s per loop in [ number ] timeit selection_data { tuple ( var ) for var in data . reshape ( _ number , number ) . tolist ( ) } number loops , best of number number . number s per loop	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_0	in [ number ] from scipy import sparse in [ number ] a = np . array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] at = a . t	1
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_1	in [ number ] m . data out [ number ] array ( [ [ number , number ] , [ ] , [ number ] , [ number ] , [ number ] ] , dtype = object ) in [ number ] m . rows out [ number ] array ( [ [ number , number ] , [ ] , [ number ] , [ number ] , [ number ] ] , dtype = object )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_2	in [ number ] m . data [ number ] = [ number , number , number , number , number ] in [ number ] m . rows [ number ] = [ number , number , number , number , number ] in [ number ] m . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , dtype = int32 )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_3	in [ number ] mc = m . tocsr ( ) in [ number ] mc . data out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] , dtype = int32 ) in [ number ] mc . indices out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number ] , dtype = int32 ) in [ number ] mc . indptr out [ number ] array ( [ number , number , number , number , number , number ] , dtype = int32 )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_4	in [ number ] mc . sum ( axis = number ) out [ number ] matrix ( [ [ number ] , [ number ] , [ number ] , [ number ] , [ number ] ] , dtype = int32 ) in [ number ] mc / mc . sum ( axis = number ) out [ number ] matrix ( [ [ number . , number . , number . number , number . , number . number ] , [ number . number , number . number , number . number , number . number , number . number ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_5	in [ number ] mc . multiply ( sparse . csr_matrix ( number / mc . sum ( axis = number ) ) ) out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format >	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_6	in [ number ] ms = sparse . csc_matrix ( a ) in [ number ] ms . sum ( axis = number ) out [ number ] matrix ( [ [ number , number , number , number , number ] ] , dtype = int32 )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_7	in [ number ] ms [ , number ] = np . ones ( number , int ) [ , none ] / usr / lib / python3 / dist _ packages / scipy / sparse / compressed . py number sparse_efficiency_warning changing the sparsity structure of a csc_matrix is expensive . lil_matrix is more efficient . sparse_efficiency_warning ) in [ number ] ms . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_8	in [ number ] mo = sparse . coo_matrix ( a ) in [ number ] mo . col out [ number ] array ( [ number , number , number , number , number ] , dtype = int32 ) in [ number ] mo . col = = np . arange ( mo . shape [ number ] ) [ , none ] out [ number ] array ( [ [ false , true , false , false , true ] , [ false , false , false , false , false ] , [ true , false , false , false , false ] , [ false , false , true , false , false ] , [ false , false , false , true , false ] ] , dtype = bool ) in [ number ] idx = np . nonzero ( ( mo . col = = np . arange ( mo . shape [ number ] ) [ , none ] ) . any ( axis = number ) ) [ number ] in [ number ] idx out [ number ] array ( [ number ] , dtype = int32 )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_9	in [ number ] n = mo . shape [ number ] in [ number ] data = np . concatenate ( [ mo . data , np . ones ( n , int ) ] ) in [ number ] row = np . concatenate ( [ mo . row , np . arange ( n ) ] ) in [ number ] col = np . concatenate ( [ mo . col , np . ones ( n , int ) * idx ] ) in [ number ] mo1 = sparse . coo_matrix ( ( data , ( row , col ) ) , shape = mo . shape ) in [ number ] mo1 . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_10	mo . data , mo . col , mo . row = data , col , row	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_11	in [ number ] mo1 / mo1 . sum ( axis = number ) out [ number ] matrix ( [ [ number . , number . number , number . , number . , number . ] , [ number . , number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . , number . ] , [ number . , number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . , number . ] ] )	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_12	in [ number ] mo1 . multiply ( sparse . coo_matrix ( number / mo1 . sum ( axis = number ) ) ) out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format >	0
Q_69	scipy sparse coo_matrix how to fast find all zero column fill with tagint and normalize	C_69_13	number _ np . in1d ( np . arange ( mo . shape [ number ] ) , mo . col )	0
Q_70	delete repeat column of array keep the order	C_70_0	a [ , np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) . any ( number ) ]	1
Q_70	delete repeat column of array keep the order	C_70_1	in [ number ] a out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] ) in [ number ] a [ , np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) . any ( number ) ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_70	delete repeat column of array keep the order	C_70_2	in [ number ] a out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] )	0
Q_70	delete repeat column of array keep the order	C_70_3	in [ number ] a [ , none , ] = = a [ . , none ] out [ number ] array ( [ [ [ true , false , false , false , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ false , false , false , true , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ false , false , false , false , false , false , true ] ] , [ [ true , false , false , true , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ true , false , false , true , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ false , false , false , false , false , false , true ] ] ] , dtype = bool )	0
Q_70	delete repeat column of array keep the order	C_70_4	in [ number ] ( a [ , none , ] = = a [ . , none ] ) . all ( number ) out [ number ] array ( [ [ true , false , false , false , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ false , false , false , true , false , false , false ] , [ false , true , false , false , true , false , false ] , [ false , false , true , false , false , true , false ] , [ false , false , false , false , false , false , true ] ] , dtype = bool )	0
Q_70	delete repeat column of array keep the order	C_70_5	in [ number ] np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) out [ number ] array ( [ [ false , false , false , false , false , false , false ] , [ false , false , false , false , true , false , false ] , [ false , false , false , false , false , true , false ] , [ false , false , false , false , false , false , false ] , [ false , false , false , false , false , false , false ] , [ false , false , false , false , false , false , false ] , [ false , false , false , false , false , false , false ] ] , dtype = bool )	0
Q_70	delete repeat column of array keep the order	C_70_6	in [ number ] ( np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) ) . any ( number ) out [ number ] array ( [ false , false , false , false , true , true , false ] , dtype = bool )	0
Q_70	delete repeat column of array keep the order	C_70_7	in [ number ] ( np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) ) . any ( number ) out [ number ] array ( [ true , true , true , true , false , false , true ] , dtype = bool )	0
Q_70	delete repeat column of array keep the order	C_70_8	in [ number ] a [ , ( np . triu ( ( a [ , none , ] = = a [ . , none ] ) . all ( number ) , number ) ) . any ( number ) ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_70	delete repeat column of array keep the order	C_70_9	var = np . ravel_multi_index ( a , a . max ( number ) + number ) out = a [ , np . sort ( np . unique ( var , return_index = number ) [ number ] ) ]	0
Q_70	delete repeat column of array keep the order	C_70_10	in [ number ] a out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] )	0
Q_70	delete repeat column of array keep the order	C_70_11	in [ number ] lidx = np . ravel_multi_index ( a , a . max ( number ) + number ) in [ number ] lidx out [ number ] array ( [ number , number , number , number , number , number , number ] )	0
Q_70	delete repeat column of array keep the order	C_70_12	in [ number ] np . unique ( lidx , return_index = number ) [ number ] out [ number ] array ( [ number , number , number , number , number ] )	0
Q_70	delete repeat column of array keep the order	C_70_13	in [ number ] np . sort ( np . unique ( lidx , return_index = number ) [ number ] ) out [ number ] array ( [ number , number , number , number , number ] ) in [ number ] a [ , np . sort ( np . unique ( lidx , return_index = number ) [ number ] ) ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_71	panda convert column to list	C_71_0	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) )	1
Q_71	panda convert column to list	C_71_1	member_id number [ number , number , number , number , number ] number [ number , number ] name val , dtype object	0
Q_71	panda convert column to list	C_71_2	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) ) . tolist ( )	0
Q_71	panda convert column to list	C_71_3	[ [ number , number , number , number , number ] , [ number , number ] ]	0
Q_71	panda convert column to list	C_71_4	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) ) . to_dict ( )	0
Q_71	panda convert column to list	C_71_5	{ number [ number , number ] , number [ number , number , number , number , number ] }	0
Q_71	panda convert column to list	C_71_6	df . groupby ( string ) [ string ] . apply ( lambda x sum ( x ) )	0
Q_71	panda convert column to list	C_71_7	member_id number number number number name val , dtype int64	0
Q_71	panda convert column to list	C_71_8	def sum_number_between_zero ( values ) valsum = [ number ] for var in values if var = = number if valsum [ _ number ] = number valsum . append ( number ) valsum . append ( number ) valsum [ _ number ] + = var return valsum	0
Q_71	panda convert column to list	C_71_9	number . a . get sum of all elements sum_number_between_zero ( df [ string ] . tolist ( ) )	0
Q_71	panda convert column to list	C_71_10	[ number l , number , number l , number l ]	0
Q_71	panda convert column to list	C_71_11	number . b . get sum of values groupby < code > member_id < / code > df . groupby ( string ) [ string ] . apply ( lambda x sum_number_between_zero ( ( x ) )	0
Q_71	panda convert column to list	C_71_12	member_id number [ number , number , number , number ] number [ number ] name val , dtype object	0
Q_71	panda convert column to list	C_71_13	sum_number_between_zero ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_71	panda convert column to list	C_71_14	[ number , number , number , number , number , number , number , number , number ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_0	in [ number ] with open ( string , encoding = string ) as f1 . lines = f1 . readlines ( ) .	1
Q_72	how to make a matrix of tagint and tagint	C_72_1	in [ number ] from collections import defaultdict in [ number ] from collections import counter in [ number ] data = defaultdict ( set ) in [ number ] freq = counter ( )	0
Q_72	how to make a matrix of tagint and tagint	C_72_2	in [ number ] for var in lines . sentence , classification = var . strip ( ) . split ( string ) . for word in sentence . split ( ) . data [ word ] . add ( classification ) . freq . update ( [ word ] ) .	0
Q_72	how to make a matrix of tagint and tagint	C_72_3	in [ number ] freq . most_common ( number ) out [ number ] [ ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_4	in [ number ] for var in [ t [ number ] for t in freq . most_common ( number ) ] . print ( var , data [ var ] ) . { string , string } { string } { string } { string , string } { string }	0
Q_72	how to make a matrix of tagint and tagint	C_72_5	in [ number ] string in data out [ number ] true	0
Q_72	how to make a matrix of tagint and tagint	C_72_6	in [ number ] data [ string ] out [ number ] { string }	0
Q_72	how to make a matrix of tagint and tagint	C_72_7	in [ number ] m = [ [ number , number , number , number , number ] for var in range ( number ) ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_8	in [ number ] j = [ var [ number ] for var in freq . most_common ( number ) ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_9	in [ number ] k = [ string , string , string , string , string ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_10	in [ number ] for var , var in enumerate ( j ) . for cat in data [ var ] . m [ var ] [ k . index ( cat ) ] = number .	0
Q_72	how to make a matrix of tagint and tagint	C_72_11	in [ number ] m out [ number ] [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ]	0
Q_72	how to make a matrix of tagint and tagint	C_72_12	in [ number ] import numpy as np in [ number ] m2 = np . zeros ( ( number , number ) , dtype = np . uint8 ) in [ number ] for var , var in enumerate ( j ) . for cat in data [ var ] . m2 [ var , k . index ( cat ) ] = number . in [ number ] m2 out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , dtype = uint8 )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_0	in [ number ] import numpy as np y = np . arange ( number ) . reshape ( number , number )	1
Q_73	understand numpy multi_dimensional array indexing	C_73_1	operation number in [ number ] y [ np . array ( [ number , number , number ] ) , number number ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_2	in [ number ] y [ number , number number ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_3	operation number in [ number ] y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number , number ] ] ) ] _ index_error traceback ( most recent call last ) < ipython _ input _ number _ bf9ee1361144 > in < module > ( ) _ > number y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number , number ] ] ) ] index_error shape mismatch indexing arrays could not be broadcast together with shapes ( number , ) ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_4	in [ number ] np . array ( [ number , number , number ] ) . shape out [ number ] ( number , ) in [ number ] np . array ( [ [ number , number ] ] ) . shape out [ number ] ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_5	np . array ( [ number , number , number ] ) ( number d array ) number np . array ( [ [ number , number ] ] ) ( number d array ) number x number result ( number d array ) number x f	0
Q_73	understand numpy multi_dimensional array indexing	C_73_6	operation number in [ number ] y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number ] , [ number ] ] ) ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_7	in [ number ] np . array ( [ number , number , number ] ) . shape out [ number ] ( number , ) in [ number ] np . array ( [ [ number ] , [ number ] ] ) . shape out [ number ] ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_8	np . array ( [ number , number , number ] ) ( number d array ) number np . array ( [ [ number ] , [ number ] ] ) ( number d array ) number x number result ( number d array ) number x number	0
Q_73	understand numpy multi_dimensional array indexing	C_73_9	in [ number ] y [ np . array ( [ [ number ] , [ number ] , [ number ] ] ) , np . array ( [ number , number ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_10	np . array ( [ [ number ] , [ number ] , [ number ] ] ) ( number d array ) number x number np . array ( [ number , number ] ) ( number d array ) number result ( number d array ) number x number	0
Q_73	understand numpy multi_dimensional array indexing	C_73_11	in [ number ] y [ np . array ( [ [ number ] , [ number ] , [ number ] ] ) , np . array ( [ [ number , number ] ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_12	np . array ( [ [ number ] , [ number ] , [ number ] ] ) ( number d array ) number x number np . array ( [ [ number , number ] ] ) ( number d array ) number x number result ( number d array ) number x number	0
Q_74	access element from array of array call function to execute array of array	C_74_0	in [ number ] a out [ number ] array ( [ [ < _main_ . a object at number > ] , [ < _main_ . a object at number > ] ] , dtype = object )	1
Q_74	access element from array of array call function to execute array of array	C_74_1	def foo ( an_a ) return an_a . method_a ( ) in [ number ] a . shape out [ number ] ( number , number ) in [ number ] foo ( a [ number , number ] ) out [ number ] array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object )	0
Q_74	access element from array of array call function to execute array of array	C_74_2	in [ number ] f = np . frompyfunc ( foo , number , number ) in [ number ] f ( a ) out [ number ] array ( [ [ array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) ] , [ array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) ] ] , dtype = object )	0
Q_74	access element from array of array call function to execute array of array	C_74_3	in [ number ] np . concatenate ( f ( a ) [ , number ] ) out [ number ] array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object )	0
Q_74	access element from array of array call function to execute array of array	C_74_4	in [ number ] res = np . empty ( a . shape , object ) in [ number ] for var , var in np . ndenumerate ( a ) . res [ var ] = foo ( var ) . in [ number ] res out [ number ] array ( [ [ array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) ] , [ array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) ] ] , dtype = object )	0
Q_74	access element from array of array call function to execute array of array	C_74_5	in [ number ] [ foo ( var ) for var in a [ , number ] ] out [ number ] [ array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) , array ( [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , dtype = object ) ] in [ number ] np . array ( [ foo ( var ) for var in a [ , number ] ] ) out [ number ] array ( [ [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] , [ [ < _main_ . c object at number > ] , [ < _main_ . c object at number > ] ] ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , number , number )	0
Q_74	access element from array of array call function to execute array of array	C_74_6	in [ number ] a1 = np . array ( [ a ( number , number , np . array ( [ c ( number , number ) , c ( number , number ) ] ) ) , . a ( number , number , np . array ( [ c ( number , number ) , c ( number , number ) ] ) ) . ] ) in [ number ] np . array ( [ foo ( var ) for var in a1 ] )	0
Q_74	access element from array of array call function to execute array of array	C_74_7	def _repr_ ( self ) return string . format ( self ) def _repr_ ( self ) return string . format ( self )	0
Q_74	access element from array of array call function to execute array of array	C_74_8	array ( [ [ a < number , number , [ [ c < number , number > ] [ c < number , number > ] ] > ] , [ a < number , number , [ [ c < number , number > ] [ c < number , number > ] ] > ] ] , dtype = object )	0
Q_74	access element from array of array call function to execute array of array	C_74_9	[ [ array ( [ [ c < number , number > ] , [ c < number , number > ] ] , dtype = object ) ] [ array ( [ [ c < number , number > ] , [ c < number , number > ] ] , dtype = object ) ] ]	0
Q_74	access element from array of array call function to execute array of array	C_74_10	b < number , number , [ [ a < number , number , [ [ c < number , number > ] [ c < number , number > ] ] > ] [ a < number , number , [ [ c < number , number > ] [ c < number , number > ] ] > ] ] >	0
Q_74	access element from array of array call function to execute array of array	C_74_11	[ [ array ( [ [ c < number , number > ] , [ c < number , number > ] ] , dtype = object ) ] [ array ( [ [ c < number , number > ] , [ c < number , number > ] ] , dtype = object ) ] ]	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_0	in [ number ] import sqlite3 in [ number ] conn = sqlite3 . connect ( string )	1
Q_75	python tagstr cannot be convert to a my_sql type	C_75_1	in [ number ] conn . execute ( string ) out [ number ] < sqlite3 . cursor at number >	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_2	in [ number ] data = np . arange ( number ) . reshape ( number , number ) array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_3	in [ number ] data . tolist ( ) out [ number ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_4	in [ number ] conn . executemany ( string , data . tolist ( ) ) out [ number ] < sqlite3 . cursor at number >	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_5	in [ number ] for var in conn . execute ( string ) . print ( var ) . ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number )	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_6	in [ number ] data = [ np . arange ( number ) . tolist ( ) , np . arange ( number , number ) . tolist ( ) , np . arange ( number , number ) . tolist ( ) ] in [ number ] data out [ number ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] in [ number ] conn . executemany ( string , data ) out [ number ] < sqlite3 . cursor at number > in [ number ] for var in conn . execute ( string ) . print ( var ) . . ( number , number , number ) ( number , number , number ) ( number , number , number )	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_7	in [ number ] data out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_8	in [ number ] conn . executemany ( string , data . tolist ( ) ) _ programming_error traceback ( most recent call last ) < ipython _ input _ number _ number d19a96ab > in < module > ( ) _ > number conn . executemany ( string , data . tolist ( ) ) programming_error incorrect number of bindings supplied . the current statement uses number , and there are number supplied .	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_9	in [ number ] conn . executemany ( string , data . t . tolist ( ) ) out [ number ] < sqlite3 . cursor at number > in [ number ] for var in conn . execute ( string ) . print ( var ) . ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number )	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_10	in [ number ] data . t . tolist ( ) out [ number ] [ [ number , number , number ] , [ number , number , number ] , . [ number , number , number ] ]	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_11	in [ number ] list ( zip ( * data ) ) out [ number ] [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , . ( number , number , number ) , ( number , number , number ) ]	0
Q_75	python tagstr cannot be convert to a my_sql type	C_75_12	for var in data . t . tolist ( ) print ( string tuple ( var ) ) for var in zip ( * data ) print ( string var )	0
Q_76	create all x y pair from two coordinate array	C_76_0	import numpy as np import numpy . random as nprnd a_l = nprnd . randint ( number , number , size = number )	1
Q_76	create all x y pair from two coordinate array	C_76_1	var = [ [ number . number . number . number . number . ] [ number . number . number . number . number . ] ] yv = [ [ number . number . number . number . number . ] [ number . number . number . number . number . ] ]	0
Q_76	create all x y pair from two coordinate array	C_76_2	np . ravel ( xv ) = [ number . number . number . number . number . number . number . number . number . number . ] np . ravel ( yv ) = [ number . number . number . number . number . number . number . number . number . number . ]	0
Q_76	create all x y pair from two coordinate array	C_76_3	var = [ number number number number number number number number number number ] b_l = [ number number number number number number number number number number ]	0
Q_76	create all x y pair from two coordinate array	C_76_4	var = np . stack ( ( np . ravel ( xv ) , np . ravel ( yv ) , a_l , b_l ) , axis = _ number ) var = [ [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] [ number . number . number . number . ] ]	0
Q_76	create all x y pair from two coordinate array	C_76_5	np . savetxt ( string , arr , delimiter = string )	0
Q_76	create all x y pair from two coordinate array	C_76_6	var = number out = [ ] for var in x_l for y in y_l v1 = a_l [ var ] v2 = b_l [ var ] out . append ( ( var , y , v1 , v2 ) )	0
Q_76	create all x y pair from two coordinate array	C_76_7	var = nprnd . randint ( number , number , size = number )	0
Q_76	create all x y pair from two coordinate array	C_76_8	for var in range ( leny ) arr [ var , , number ] = x_l	0
Q_76	create all x y pair from two coordinate array	C_76_9	[ [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] ]	0
Q_76	create all x y pair from two coordinate array	C_76_10	for var in range ( lenx ) arr [ , var , number ] = y_l _ [ [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] ]	0
Q_76	create all x y pair from two coordinate array	C_76_11	var = a_l . reshape ( leny , lenx ) b_reshaped = b_l . reshape ( leny , lenx )	0
Q_76	create all x y pair from two coordinate array	C_76_12	arr [ , , number ] = a_reshaped arr [ , , number ] = b_reshaped _ [ [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] [ [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] [ number number number number ] ] ]	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_0	old_array [ old_array [ , number ] = = number , number ]	1
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_1	in [ number ] a out [ number ] = = = = = = = = = = = = = = = > array ( [ [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , < = = [ number , number , number , number , number , number , number , number ] , < = = [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] ] ) in [ number ] a [ a [ , number ] = = number , number ] out [ number ] array ( [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_2	in [ number ] a [ np . asarray ( np . where ( a [ , number ] = = number ) ) , number ] out [ number ] array ( [ [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] ] )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_3	in [ number ] np . where ( a [ , number ] = = number ) out [ number ] ( array ( [ number , number ] ) , )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_4	a a = number number number number number number number number number number number number number number number number number number number number number number number number find ( a ( , number ) = = number ) ans = number number	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_5	in [ number ] np . where ( a [ , number ] = = number ) [ number ] out [ number ] array ( [ number , number ] )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_6	in [ number ] a [ np . where ( a [ , number ] = = number ) [ number ] ] out [ number ] array ( [ [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] ] ) in [ number ] a [ np . where ( a [ , number ] = = number ) [ number ] , number ] out [ number ] array ( [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_7	in [ number ] a [ a [ , number ] = = number , [ number , number , number , number , number , number ] ] . index_error shape mismatch indexing arrays could . not be broadcast together with shapes ( number , ) ( number , )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_8	in [ number ] a [ , number ] = = number out [ number ] array ( [ false , false , false , false , false , true , true , false , false , false ] , dtype = bool )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_9	in [ number ] np . where ( a [ , number ] = = number ) [ number ] out [ number ] array ( [ number , number ] )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_10	in [ number ] np . ix_ ( a [ , number ] = = number , [ number , number , number , number , number , number ] ) out [ number ] ( array ( [ [ number ] , [ number ] ] ) , array ( [ [ number , number , number , number , number , number ] ] ) )	0
Q_77	python _ how to correctly index numpy array with other numpy array similarly to matlab	C_77_11	in [ number ] a [ np . ix_ ( a [ , number ] = = number , [ number , number , number , number , number , number ] ) ] out [ number ] array ( [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] )	0
Q_78	how to write a generator class	C_78_0	class fib def _init_ ( self ) self . a , self . b = number , number def _iter_ ( self ) while true yield self . a self . a , self . b = self . b , self . a + self . b	1
Q_78	how to write a generator class	C_78_1	var = iter ( fib ( ) ) for var in range ( number ) . print ( next ( var ) ) . number number number	0
Q_78	how to write a generator class	C_78_2	class fib def _init_ ( self ) self . a , self . b = number , number def _next_ ( self ) return_value = self . a self . a , self . b = self . b , self . a + self . b return return_value def _iter_ ( self ) return self	0
Q_78	how to write a generator class	C_78_3	var = fib ( ) for var in range ( number ) . print ( next ( var ) ) . number number number	0
Q_78	how to write a generator class	C_78_4	class fib def _init_ ( self ) self . a , self . b = number , number def _next_ ( self ) yield self . a	0
Q_78	how to write a generator class	C_78_5	< generator object _next_ at number > < generator object _next_ at number > < generator object _next_ at number >	0
Q_78	how to write a generator class	C_78_6	from collections . abc import iterator , generator import unittest class test ( unittest . test_case ) def test_fib ( self ) f = fib ( ) self . assert_equal ( next ( f ) , number ) self . assert_equal ( next ( f ) , number ) self . assert_equal ( next ( f ) , number ) self . assert_equal ( next ( f ) , number )	0
Q_78	how to write a generator class	C_78_7	unittest . main ( exit = false ) . f = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = fail test_fib_is_generator ( _main_ . test ) _ traceback ( most recent call last ) file string , line number , in test_fib_is_generator assertion_error < _main_ . fib object at number > is not an instance of < class string > _ ran number tests in number . number number s failed ( failures = number ) < unittest . main . test_program object at number >	0
Q_78	how to write a generator class	C_78_8	class fib ( generator ) def _init_ ( self ) self . a , self . b = number , number def send ( self , ignored_arg ) return_value = self . a self . a , self . b = self . b , self . a + self . b return return_value def throw ( self , type = none , value = none , traceback = none ) raise stop_iteration	0
Q_78	how to write a generator class	C_78_9	unittest . main ( exit = false ) . _ ran number tests in number . number number s ok < unittest . main . test_program object at number >	0
Q_78	how to write a generator class	C_78_10	class fib ( object ) def _init_ ( self ) self . a , self . b = number , number def send ( self , ignored_arg ) return_value = self . a self . a , self . b = self . b , self . a + self . b return return_value def throw ( self , type = none , value = none , traceback = none ) raise stop_iteration def _iter_ ( self ) return self def next ( self ) return self . send ( none ) def close ( self ) string string string try self . throw ( generator_exit ) except ( generator_exit , stop_iteration ) pass else raise runtime_error ( string )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_0	in [ number ] row = np . array ( [ number , number , number , number , number , number ] ) in [ number ] col = np . array ( [ number , number , number , number , number , number ] ) in [ number ] m = sparse . coo_matrix ( ( np . ones ( number , int ) , ( row , col ) ) ) in [ number ] m out [ number ] < number x5 sparse matrix of type string numpy . int32 string with number stored elements in co_ordinate format > in [ number ] print ( m ) ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number	1
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_1	in [ number ] m . row out [ number ] array ( [ number , number , number , number , number , number ] ) in [ number ] id ( m . row ) , id ( row ) out [ number ] ( number , number )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_2	in [ number ] print ( m . tocsr ( ) . tocoo ( ) ) ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_3	in [ number ] m . tolil ( ) . rows out [ number ] array ( [ [ number , number ] , [ number ] , [ number ] , [ number ] , [ ] , [ number ] ] , dtype = object )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_4	in [ number ] m . sum_duplicates ( ) in [ number ] print ( m ) ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_5	in [ number ] ml = sparse . lil_matrix ( m . shape , dtype = m . dtype ) in [ number ] for var , var in zip ( row , col ) . ml [ var , var ] = number . print ( ml . rows ) . [ [ number ] [ ] [ ] [ ] [ ] [ ] ] [ [ number ] [ number ] [ ] [ ] [ ] [ ] ] [ [ number ] [ number ] [ ] [ number ] [ ] [ ] ] [ [ number ] [ number ] [ ] [ number ] [ ] [ number ] ] [ [ number ] [ number ] [ number ] [ number ] [ ] [ number ] ] [ [ number , number ] [ number ] [ number ] [ number ] [ ] [ number ] ]	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_6	in [ number ] m1 = sparse . random ( number , number , . number ) in [ number ] m1 out [ number ] < number x20 sparse matrix of type string numpy . float64 string with number stored elements in co_ordinate format > in [ number ] m1 . row out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] , dtype = int32 ) in [ number ] m1 . col out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] , dtype = int32 )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_7	in [ number ] m1 . row = = number out [ number ] array ( [ true , false , false , false , false , false , false , false , false , . false , false , false , false , false , false , false , false ] , dtype = bool )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_8	in [ number ] m1 . col [ m1 . row = = number ] out [ number ] array ( [ number , number , number , number , number , number ] , dtype = int32 )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_9	in [ number ] m1 . getrow ( number ) out [ number ] < number x20 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] m1 . getrow ( number ) . indices out [ number ] array ( [ number , number , number , number , number , number ] , dtype = int32 )	0
Q_79	how to preserve order of insertion in sci_py sparse matrix coo_matrix	C_79_10	in [ number ] m1 . tolil ( ) . rows [ number ] out [ number ] [ number , number , number , number , number , number ]	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_0	np . random . seed ( number ) labels = [ number , number , number , number , number , number ] samples = np . random . randn ( number , number , number ) p1 = pd . panel ( samples , items = map ( str , labels ) ) print ( p1 ) < class string > dimensions number ( items ) x number ( major_axis ) x number ( minor_axis ) items axis number to number major_axis axis number to number minor_axis axis number to number print ( p1 [ string ] ) < class string > dimensions number ( items ) x number ( major_axis ) x number ( minor_axis ) items axis number to number major_axis axis number to number minor_axis axis number to number	1
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_1	print ( p1 . to_frame ( ) ) number number number number number number major minor number number number . number number . number number . number _ number . number _ number . number _ number . number number number . number number . number number . number _ number . number _ number . number _ number . number number _ number . number _ number . number _ number . number number . number number . number number . number number _ number . number number _ number . number number _ number . number number _ number . number _ number . number _ number . number number number number . number number . number number . number _ number . number number _ number . number number _ number . number number number _ number . number _ number . number _ number . number _ number . number _ number . number _ number . number number number . number number . number number . number number . number number number . number number number . number number number number . number number . number number . number _ number . number _ number . number _ number . number number number number . number number number . number number number . number number _ number . number _ number . number _ number . number number _ number . number _ number . number _ number . number _ number . number _ number . number _ number . number number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number number _ number . number _ number . number _ number . number _ number . number _ number . number _ number . number number number . number number number . number number number . number number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number number _ number . number _ number . number _ number . number _ number . number _ number . number _ number . number number number . number number . number number . number number . number number . number number . number number number . number number . number number . number _ number . number number _ number . number number _ number . number number number _ number . number number _ number . number number _ number . number number _ number . number _ number . number _ number . number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_2	np . random . seed ( number ) labels = list ( string ) samples = np . random . randn ( number , number , number ) p1 = pd . panel ( samples , items = labels ) print ( p1 ) < class string > dimensions number ( items ) x number ( major_axis ) x number ( minor_axis ) items axis a to f major_axis axis number to number minor_axis axis number to number print ( p1 [ string ] ) number number number number number number . number number . number _ number . number _ number . number number number number . number _ number . number number . number number . number number number . number number _ number . number number . number number . number number _ number . number number . number number number . number number . number number _ number . number number . number number . number _ number . number number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_3	print ( p1 . to_frame ( ) ) a b c d e f major minor number number number . number _ number . number number . number _ number . number number . number number . number number number . number _ number . number _ number . number _ number . number number . number _ number . number number _ number . number number . number _ number . number number . number _ number . number _ number . number number _ number . number number number . number _ number . number _ number . number _ number . number number . number number number number . number number . number _ number . number _ number . number number _ number . number number _ number . number number _ number . number number . number _ number . number _ number . number _ number . number _ number . number number number . number number . number number _ number . number number . number number _ number . number number _ number . number number number . number number . number number . number _ number . number number . number number . number number number number . number number _ number . number number . number _ number . number number . number number . number number _ number . number number . number _ number . number _ number . number _ number . number _ number . number number number . number _ number . number _ number . number number number . number number . number number . number number number . number _ number . number number . number number . number number . number _ number . number number number _ number . number number . number _ number . number _ number . number _ number . number number number . number number number . number number _ number . number number . number number . number _ number . number _ number . number number number . number number . number number . number number . number number . number _ number . number number number . number number . number number . number number . number number . number _ number . number number number _ number . number number . number number . number _ number . number _ number . number _ number . number number number . number _ number . number number . number number . number number . number number number . number number number . number number . number _ number . number _ number . number number number . number number . number number _ number . number number _ number . number _ number . number _ number . number _ number . number _ number . number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_4	var = np . random . randn ( number , number ) df = pd . data_frame ( var , columns = list ( string ) ) print ( df ) number number number number number number number . number _ number . number _ number . number _ number . number number . number number number . number _ number . number _ number . number _ number . number _ number . number number _ number . number _ number . number number . number _ number . number number . number number number . number _ number . number number . number _ number . number _ number . number number _ number . number _ number . number _ number . number number . number _ number . number number _ number . number _ number . number _ number . number _ number . number _ number . number number print ( df [ string ] ) number number number number number . number _ number . number _ number . number number number . number _ number . number _ number . number number _ number . number _ number . number number . number number number . number _ number . number number . number number _ number . number _ number . number _ number . number number _ number . number _ number . number _ number . number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_5	np . random . seed ( number ) raw_sample = [ ] labels = list ( string ) samples = np . random . randn ( number , number , number ) for var in range ( samples . shape [ number ] ) raw_sample . append ( pd . data_frame ( samples [ var ] ) )	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_6	var = pd . concat ( raw_sample , keys = labels ) print ( var ) number number number number a number _ number . number number . number number . number _ number . number number number . number number . number number . number _ number . number number number _ number . number number . number _ number . number number . number number _ number . number number . number number . number _ number . number number _ number . number number . number number _ number . number _ number . number b number number . number number . number _ number . number _ number . number number number . number number . number number . number number . number number _ number . number number . number number number . number _ number . number number _ number . number number . number number . number _ number . number number number . number _ number . number _ number . number _ number . number c number _ number . number _ number . number number . number number _ number . number number number . number _ number . number _ number . number number . number number _ number . number number . number _ number . number _ number . number number _ number . number _ number . number number . number number . number number _ number . number number . number _ number . number number _ number . number d number _ number . number number . number number number . number number . number number number _ number . number _ number . number number number . number number . number number number . number number _ number . number _ number . number number . number number _ number . number _ number . number number . number number _ number . number number number . number _ number . number number . number _ number . number e number number . number number . number _ number . number number . number number number . number number . number number . number number . number number number _ number . number _ number . number _ number . number number . number number number . number _ number . number number . number number . number number number _ number . number number number . number number _ number . number _ number . number f number _ number . number _ number . number _ number . number number . number number number _ number . number _ number . number number . number number . number number number number . number _ number . number _ number . number number . number number number _ number . number _ number . number _ number . number _ number . number number number . number number . number _ number . number _ number . number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_7	var = df . to_panel ( ) print ( var ) < class string > dimensions number ( items ) x number ( major_axis ) x number ( minor_axis ) items axis number to number major_axis axis a to f minor_axis axis number to number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_8	np . random . seed ( number ) raw_sample = [ ] labels = [ number , number , number , number , number , number ] mux = pd . multi_index . from_arrays ( [ labels , range ( len ( labels ) ) ] ) samples = np . random . randn ( number , number , number ) for var in range ( samples . shape [ number ] ) raw_sample . append ( pd . data_frame ( samples [ var ] ) ) df = pd . concat ( raw_sample , keys = mux )	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_9	var = var . reset_index ( level = number , drop = true ) print ( var ) number number number number number number _ number . number number . number number . number _ number . number number number . number number . number number . number _ number . number number number _ number . number number . number _ number . number number . number number _ number . number number . number number . number _ number . number number _ number . number number . number number _ number . number _ number . number number number . number number . number _ number . number _ number . number number number . number number . number number . number number . number number _ number . number number . number number number . number _ number . number number _ number . number number . number number . number _ number . number number number . number _ number . number _ number . number _ number . number number _ number . number _ number . number number . number number _ number . number number number . number _ number . number _ number . number number . number number _ number . number number . number _ number . number _ number . number number _ number . number _ number . number number . number number . number number _ number . number number . number _ number . number number _ number . number number number _ number . number number . number number number . number number . number number number _ number . number _ number . number number number . number number . number number number . number number _ number . number _ number . number number . number number _ number . number _ number . number number . number number _ number . number number number . number _ number . number number . number _ number . number number number . number number . number _ number . number number . number number number . number number . number number . number number . number number number _ number . number _ number . number _ number . number number . number number number . number _ number . number number . number number . number number number _ number . number number number . number number _ number . number _ number . number number _ number . number _ number . number _ number . number number . number number number _ number . number _ number . number number . number number . number number number number . number _ number . number _ number . number number . number number number _ number . number _ number . number _ number . number _ number . number number number . number number . number _ number . number _ number . number	0
Q_80	convert list of tagint _d panda data_frame to tagint _d data_frame	C_80_10	"var = df . to_panel ( ) print ( var ) > value_error can "" t convert non _ uniquely indexed data_frame to panel"	0
Q_81	use something other than itertuples for panda for speed	C_81_0	es [ string ] = es [ string ] . apply ( lambda x core_check ( java_pid_core [ x ] [ number ] ) ) es [ string ] = es [ string ] . apply ( lambda x java_pid_core [ x ] [ number ] )	1
Q_81	use something other than itertuples for panda for speed	C_81_1	es [ string ] = range ( len ( es ) )	0
Q_81	use something other than itertuples for panda for speed	C_81_2	es . insert ( number , string , range ( len ( es ) ) )	0
Q_81	use something other than itertuples for panda for speed	C_81_3	var = pd . merge ( perf , es , on = string )	0
Q_81	use something other than itertuples for panda for speed	C_81_4	var = tmp_perf [ ( tmp_perf [ string ] < tmp_perf [ string ] + number ) ( tmp_perf [ string ] < tmp_perf [ string ] + number ) ( tmp_perf [ string ] < number ) ]	0
Q_81	use something other than itertuples for panda for speed	C_81_5	timestamp pid inst_retired branch_mispred l1_i_cache_access l1_d_read_access l2_d_cache_access data_mem_read_access uid tid tstamp _ init tstamp _ fin diff es_id number number number number number number number number number	0
Q_81	use something other than itertuples for panda for speed	C_81_6	var = test_df [ [ string , string , string , string , string , string , results_df_mean = test_df [ [ string , string , string , string , string , string , string ] ] . groupby ( string ) . mean ( ) . reset_index ( ) final_result_sum = pd . merge ( es , var , on = string , how = string ) final_result_mean = pd . merge ( es , results_df_mean , on = string , how = string )	0
Q_81	use something other than itertuples for panda for speed	C_81_7	uid tid tstamp _ init tstamp _ fin diff core pid es_id inst_retired branch_mispred l1_i_cache_access l1_d_read_access l2_d_cache_access data_mem_read_access number	0
Q_81	use something other than itertuples for panda for speed	C_81_8	uid tid tstamp _ init tstamp _ fin diff core pid es_id inst_retired branch_mispred l1_i_cache_access l1_d_read_access l2_d_cache_access data_mem_read_access number	0
Q_81	use something other than itertuples for panda for speed	C_81_9	data preparation es = pd . read_csv ( string_io ( es_str ) , sep = string )	0
Q_81	use something other than itertuples for panda for speed	C_81_10	minimal data_frame es_min = es [ [ string , string , string , string , string ] ] perf_min = perf [ [ string , string , string ] ] df_min = pd . merge ( perf_min , es_min , on = string )	0
Q_81	use something other than itertuples for panda for speed	C_81_11	selection df_min2 = df_min [ ( df_min [ string ] < df_min [ string ] + number ) ( df_min [ string ] < df_min [ string ] + number ) ( df_min [ string ] < number ) ] test_df = df_min2 [ [ string , string ] ] . pipe ( pd . merge , es , on = string ) . pipe ( pd . merge , perf , on = string )	0
Q_81	use something other than itertuples for panda for speed	C_81_12	def join_in_chunks ( perf , es ) for var , var in perf . groupby ( string ) df = pd . merge ( var , es , on = string ) yield df [ ( df [ string ] < df [ string ] + number ) ( df [ string ] < df [ string ] + number ) ( df [ string ] < number ) ] test_df = pd . concat ( join_in_chunks ( perf , es ) , ignore_index = true )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_0	in [ number ] def f ( x , y ) . return x * * number + x * y * * number . in [ number ] f ( number , number ) out [ number ] number in [ number ] f ( np . arange ( number , number ) , np . arange ( number , number ) ) out [ number ] array ( [ number , number , number ] )	1
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_1	in [ number ] import sympy as sym in [ number ] x , y = sym . symbols ( string ) in [ number ] type ( x ) out [ number ] sympy . core . symbol . symbol in [ number ] x + y out [ number ] x + y in [ number ] type ( _ ) out [ number ] sympy . core . add . add	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_2	in [ number ] fsym = f ( x , y ) in [ number ] type ( fsym ) out [ number ] sympy . core . add . add in [ number ] print ( fsym ) x * * number + x * y * * number	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_3	in [ number ] f ( x , number ) out [ number ] x * * number in [ number ] f ( number , x ) out [ number ] x * * number + number in [ number ] f ( np . arange ( number ) , x ) out [ number ] array ( [ number , x * * number + number , number * x * * number + number ] , dtype = object )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_4	in [ number ] fprime = sym . diff ( fsym , x ) in [ number ] fprime out [ number ] number * x + y * * number	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_5	in [ number ] fsym . subs ( x , number ) out [ number ] y * * number + number in [ number ] fsym . subs ( y , number * x ) out [ number ] number * x * * number + x * * number in [ number ] fsym . subs ( [ ( x , number ) , ( y , number ) ] ) out [ number ] number in [ number ] fprime . subs ( [ ( x , number ) , ( y , number ) ] ) out [ number ] number	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_6	in [ number ] fl = sym . lambdify ( ( x , y ) , fsym , string ) in [ number ] fl out [ number ] < function numpy . < lambda in [ number ] fl ( number , number ) out [ number ] number in [ number ] fl ( np . arange ( number , number ) , np . arange ( number , number ) )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_7	in [ number ] fpl = sym . lambdify ( ( x , y ) , fprime , string ) in [ number ] fpl ( number , number ) out [ number ] number in [ number ] fpl ( np . arange ( number , number ) , np . arange ( number , number ) ) out [ number ] array ( [ number , number , number ] )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_8	in [ number ] fsym out [ number ] x * * number + x * y * * number in [ number ] fprime out [ number ] number * x + y * * number	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_9	in [ number ] def f1 ( x , y ) . return sym . sin ( x ) + x * sym . sin ( y ) . in [ number ] f1 ( x , y ) out [ number ] x * sin ( y ) + sin ( x ) in [ number ] f1 ( number , number ) out [ number ] sin ( number ) + sin ( number ) in [ number ] f1 ( number , np . arange ( number ) . sympify_error sympify of expression string [ number number number ] string failed , because of exception being raised syntax_error invalid syntax ( < string > , line number )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_10	in [ number ] sym . diff ( f1 ( x , y ) , x ) out [ number ] sin ( y ) + cos ( x ) in [ number ] sym . diff ( f1 ( x , y ) , y ) out [ number ] x * cos ( y ) in [ number ] sym . diff ( sym . diff ( f1 ( x , y ) , x ) , y ) out [ number ] cos ( y )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_11	in [ number ] f2 = sym . lambdify ( ( x , y ) , f1 ( x , y ) , string ) in [ number ] f2 out [ number ] < function numpy . < lambda in [ number ] f2 ( number , np . arange ( number ) ) out [ number ] array ( [ number . number , number . number , number . number ] )	0
Q_82	can i use lambdify to evaluate the derivative of a python function	C_82_12	in [ number ] f2 ( number , y ) . / usr / local / lib / python3 . number / dist _ packages / numpy / _init_ . py in < lambda > ( _dummy_30 , _dummy_31 ) attribute_error string object has no attribute string in [ number ] sym . diff ( f2 ( x , y ) , x ) . attribute_error string object has no attribute string	0
Q_83	how to use python list in sql query	C_83_0	in [ number ] import sqlite3 in [ number ] conn = sqlite3 . connect ( string ) in [ number ] c = conn . cursor ( ) in [ number ] c . execute ( string string string ) . .	1
Q_83	how to use python list in sql query	C_83_1	in [ number ] c . execute ( string , ( string , string ) ) out [ number ] < sqlite3 . cursor at number > in [ number ] c . fetchall ( ) out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ]	0
Q_83	how to use python list in sql query	C_83_2	in [ number ] alist = [ string , string ] in [ number ] c . execute ( string . string . join ( string * len ( alist ) ) , . alist ) . out [ number ] < sqlite3 . cursor at number > in [ number ] c . fetchall ( ) out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ]	0
Q_83	how to use python list in sql query	C_83_3	c . execute ( string ibm string rhat string )	0
Q_83	how to use python list in sql query	C_83_4	in [ number ] string string . join ( string s string var for var in alist ) out [ number ] string rhat string ibm string in [ number ] c . execute ( _ )	0
Q_83	how to use python list in sql query	C_83_5	sql select * from stocks where symbol in ( string , string )	0
Q_83	how to use python list in sql query	C_83_6	in [ number ] sql . sqlite / / / example . db . out [ number ] string in [ number ] sql select * from stocks done . out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ] in [ number ] sql select * from stocks where symbol in ( string ) done . out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ] in [ number ] sql select * from stocks where symbol in ( string , string ) done . out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ]	0
Q_83	how to use python list in sql query	C_83_7	in [ number ] alist = [ string , string ] in [ number ] cmd = string string . join ( string s string x for x . in alist ) in [ number ] cmd out [ number ] string rhat string ibm string in [ number ] sql cmd done . out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ]	0
Q_83	how to use python list in sql query	C_83_8	in [ number ] sym = string in [ number ] sql select * from stocks where symbol in ( sym ) done . out [ number ] [ ( string , string , string , number . number , number . number ) , ( string , string , string , number . number , number . number ) ]	0
Q_83	how to use python list in sql query	C_83_9	in [ number ] mystring = string . format ( string . join ( string { } string . format ( var ) for var in alist ) ) in [ number ] mystring out [ number ] string rhat string ibm string in [ number ] sql select * from stocks where symbol in mystring done .	0
Q_83	how to use python list in sql query	C_83_10	ipython _ sql / blob / master / src / sql / run . py def run ( conn , sql , config , user_namespace ) . txt = sqlalchemy . sql . text ( statement ) result = conn . session . execute ( txt , user_namespace )	0
Q_83	how to use python list in sql query	C_83_11	in [ number ] sql select * from stocks where symbol in mystring ( sqlite3 . operational_error ) near string syntax error [ sql string ] [ parameters ( string rhat string ibm string , ) ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_0	var = [ number , number , number , number , number , number , number , number , number , number , number ] var . sort ( ) groups = [ ] for var in var if groups and var in groups [ _ number ] groups [ _ number ] . append ( var ) else groups . append ( [ var ] )	1
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_1	[ [ number ] , [ number , number ] , [ number , number , number ] , [ number , number ] , [ number , number ] , [ number ] ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_2	def merge ( grps , num_grps ) global solutions if len ( grps ) < = num_grps solutions . append ( grps ) return merges = [ grps [ var ] + [ grps [ var ] + grps [ var + number ] ] + grps [ var + number ] for var in range ( len ( grps ) _ number ) ] for m in merges merge ( m , num_grps )	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_3	[ grps [ var ] + [ grps [ var ] + grps [ var + number ] ] + grps [ var + number ] for var in range ( len ( grps ) _ number ) ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_4	var = [ number , number , number , number , number , number , number , number , number , number , number ] var . sort ( ) groups = [ ] for var in var if groups and var in groups [ _ number ] groups [ _ number ] . append ( var ) else groups . append ( [ var ] ) print ( string ) print ( var , string ) print ( string ) print ( groups ) print ( ) def merge ( grps , num_grps ) global solutions if len ( grps ) < = num_grps solutions . append ( grps ) return merges = [ grps [ var ] + [ grps [ var ] + grps [ var + number ] ] + grps [ var + number ] for var in range ( len ( grps ) _ number ) ] for m in merges merge ( m , num_grps ) solutions = [ ] merge ( groups , number ) print ( string ) for s in solutions print ( s )	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_5	original list [ number , number , number , number , number , number , number , number , number , number , number ] common numbers grouping [ [ number ] , [ number , number ] , [ number , number , number ] , [ number , number ] , [ number , number ] , [ number ] ] possible solutions [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number , number , number , number , number , number ] , [ number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number , number , number , number , number , number , number , number ] , [ number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number , number , number , number ] , [ number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number , number , number , number , number , number ] , [ number , number , number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number , number , number ] ] [ [ number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] [ [ number ] , [ number , number ] , [ number , number , number , number , number , number , number , number ] ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_6	var = number for var in solutions len_diff = max ( [ len ( a ) _ len ( b ) for a in var for b in var ] ) if len_diff < var var = len_diff sol = var	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_7	[ number , number , number , number , number , number , number , number , number , number , number ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_8	[ [ number , number , number ] , [ number , number , number , number , number ] , [ number , number , number ] ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_9	sample number groups = number l = [ number , number , number , number , number , number ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_10	[ [ number , number ] , [ number , number ] , [ number , number ] ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_11	sample number groups = number l = [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ]	0
Q_84	"algorithm in javascript or python that take a list of number and "" group them into approximately similar size"	C_84_12	[ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number ] ]	0
Q_85	fast way of drop zero from a panda series	C_85_0	df gel . menge erf . datum freig . number number . number number . number . number number . number . number number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number number number . number number number . number . number number number . number . number number number . number number . number number . number number . number number . number	1
Q_85	fast way of drop zero from a panda series	C_85_1	df [ df [ string ] = number ] gel . menge erf . datum freig . number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number	0
Q_85	fast way of drop zero from a panda series	C_85_2	var = np . where ( df [ string ] , true , false ) var array ( [ false , true , true , true , false , true , true , false , true , false , false ] , dtype = bool ) df [ var ] gel . menge erf . datum freig . number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number	0
Q_85	fast way of drop zero from a panda series	C_85_3	var = df [ string ] df . query ( string ) gel . menge erf . datum freig . number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number	0
Q_85	fast way of drop zero from a panda series	C_85_4	df [ df . eval ( string ) ] gel . menge erf . datum freig . number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number	0
Q_85	fast way of drop zero from a panda series	C_85_5	df [ df [ string ] . astype ( bool ) ] gel . menge erf . datum freig . number number . number number number . number . number number number . number . number number number . number number . number . number number number . number number . number number number . number number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number . number number . number . number	0
Q_85	fast way of drop zero from a panda series	C_85_6	print ( df . shape ) ( number , number )	0
Q_85	fast way of drop zero from a panda series	C_85_7	number loops , best of number number . number ms per loop	0
Q_85	fast way of drop zero from a panda series	C_85_8	number loops , best of number number . number ms per loop	0
Q_85	fast way of drop zero from a panda series	C_85_9	number loops , best of number number . number ms per loop	0
Q_85	fast way of drop zero from a panda series	C_85_10	number loops , best of number number . number ms per loop	0
Q_85	fast way of drop zero from a panda series	C_85_11	number loops , best of number number . number number ms per loop	0
Q_86	nltk stanford segmentor how to set classpath	C_86_0	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number java _ mx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ preload tokenize , ssplit , pos , lemma , parse , depparse _ status_port number _ port number _ timeout number	1
Q_86	nltk stanford segmentor how to set classpath	C_86_1	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( ) , core_nlpner_tagger ( ) stpos . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ] stner . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_86	nltk stanford segmentor how to set classpath	C_86_2	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ chinese _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ chinese . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ chinese . properties _ preload tokenize , ssplit , pos , lemma , ner , parse _ status_port number _ port number _ timeout number	0
Q_86	nltk stanford segmentor how to set classpath	C_86_3	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger from nltk . tokenize . stanford import core_nlp_tokenizer stpos , stner = core_nlppos_tagger ( string ) , core_nlpner_tagger ( string ) sttok = core_nlp_tokenizer ( string ) sttok . tokenize ( u string ) [ string , string , string , string ]	0
Q_86	nltk stanford segmentor how to set classpath	C_86_4	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ german _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ german . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ german . properties _ preload tokenize , ssplit , pos , ner , parse _ status_port number _ port number _ timeout number	0
Q_86	nltk stanford segmentor how to set classpath	C_86_5	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( string ) , core_nlpner_tagger ( string ) stpos . tag ( string . split ( ) ) [ ( string , string ) , ( string , string ) , ( string , string ) ] stner . tag ( string . split ( ) ) [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ]	0
Q_86	nltk stanford segmentor how to set classpath	C_86_6	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ spanish _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ spanish . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ spanish . properties _ preload tokenize , ssplit , pos , ner , parse _ status_port number _ port number _ timeout number	0
Q_86	nltk stanford segmentor how to set classpath	C_86_7	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( string ) , core_nlpner_tagger ( string ) stner . tag ( u string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ] stpos . tag ( u string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_86	nltk stanford segmentor how to set classpath	C_86_8	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ french _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ french . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ french . properties _ preload tokenize , ssplit , pos , parse _ status_port number _ port number _ timeout number	0
Q_86	nltk stanford segmentor how to set classpath	C_86_9	from nltk . tag . stanford import core_nlppos_tagger stpos = core_nlppos_tagger ( string ) stpos . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_86	nltk stanford segmentor how to set classpath	C_86_10	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ arabic _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ arabic . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ french . properties _ preload tokenize , ssplit , pos , parse _ status_port number _ port number _ timeout number	0
Q_86	nltk stanford segmentor how to set classpath	C_86_11	from nltk . tag . stanford import core_nlppos_tagger from nltk . tokenize . stanford import core_nlp_tokenizer sttok = core_nlp_tokenizer ( string ) stpos = core_nlppos_tagger ( string ) text = u string stpos . tag ( sttok . tokenize ( text ) ) [ ( string , string ) , ( string , string ) ]	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_0	var = sc . parallelize ( [ [ number , string ] , [ number , string ] , [ number , string ] ] )	1
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_1	var = rdd . map ( lambda l l [ number ] . replace ( string , string ) . split ( string ) ) from pyspark . mllib . feature import hashing_tf , idf hashing_tf = hashing_tf ( ) tf = hashing_tf . transform ( var )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_2	tf . cache ( ) idf = idf ( ) . fit ( tf ) tfidf = idf . transform ( tf )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_3	from pyspark . mllib . feature import normalizer labels = rdd . map ( lambda l l [ number ] ) features = tfidf normalizer = normalizer ( ) data = labels . zip ( normalizer . transform ( features ) )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_4	from pyspark . mllib . linalg . distributed import indexed_row_matrix mat = indexed_row_matrix ( data ) . to_block_matrix ( ) dot = mat . multiply ( mat . transpose ( ) ) dot . to_local_matrix ( ) . to_array ( ) array ( [ [ number . , number . , number . , number . ] , [ number . , number . , number . number , number . ] , [ number . , number . number , number . , number . ] , [ number . , number . , number . , number . ] ] )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_5	data . cartesian ( data ) . map ( lambda l ( ( l [ number ] [ number ] , l [ number ] [ number ] ) , l [ number ] [ number ] . dot ( l [ number ] [ number ] ) ) ) . sort_by_key ( ) . collect ( ) [ ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) , ( ( number , number ) , number . number ) ]	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_6	import pyspark . sql . functions as psf df = rdd . to_df ( [ string , string ] ) . with_column ( string , psf . split ( psf . regexp_replace ( string , string , string ) , string ) )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_7	from pyspark . ml . feature import hashing_tf , idf hashing_tf = hashing_tf ( input_col = string , output_col = string ) tf = hashing_tf . transform ( df ) idf = idf ( input_col = string , output_col = string ) . fit ( tf ) tfidf = idf . transform ( tf )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_8	from pyspark . ml . feature import normalizer normalizer = normalizer ( input_col = string , output_col = string ) data = normalizer . transform ( tfidf )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_9	from pyspark . mllib . linalg . distributed import indexed_row , indexed_row_matrix mat = indexed_row_matrix ( data . select ( string , string ) . rdd . map ( lambda row indexed_row ( row . id , row . norm . to_array ( ) ) ) ) . to_block_matrix ( ) dot = mat . multiply ( mat . transpose ( ) ) dot . to_local_matrix ( ) . to_array ( )	0
Q_87	calculate the cosine similarity between all the row of a dataframe in pyspark	C_87_10	var = psf . udf ( lambda x , y float ( x . dot ( y ) ) , double_type ( ) ) data . alias ( string ) . join ( data . alias ( string ) , psf . col ( string ) < psf . col ( string ) ) . select ( psf . col ( string ) . alias ( string ) , psf . col ( string ) . alias ( string ) , var ( string , string ) . alias ( string ) ) . sort ( string , string ) . show ( ) + _ + _ + _ + i j dot + _ + _ + _ + number number number . number number number number . number number number number . number + _ + _ + _ +	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_0	var = np . sqrt ( number / number ) k2s = np . sqrt ( test . dot ( test ) ) out = var * np . sqrt ( k2s + s . sum ( number ) . a1 _ number * np . sqrt ( s * test ) )	1
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_1	var = s . shape [ number ] out = np . zeros ( var ) for var in range ( s . shape [ number ] ) ai = s [ var ] . toarray ( ) out [ var ] = np . sqrt ( number / number ) * np . sqrt ( np . sum ( ( np . sqrt ( test ) _ np . sqrt ( ai ) ) * * number ) )	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_2	var = np . sqrt ( number / number ) k2 _ np . sqrt ( test ) n = s . shape [ number ] out = np . zeros ( n ) for var in range ( s . shape [ number ] ) ai = s [ var ] . toarray ( ) out [ var ] = np . sum ( ( k2 _ np . sqrt ( ai ) ) * * number ) out = np . sqrt ( out ) out * = var	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_3	( a _ b ) * * number = a * * number ) + b * * number _ number * a * b	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_4	sum ( ( a _ b ) * * number ) = sum ( a * * number ) + sum ( b * * number ) _ number * sum ( a * b )	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_5	var = np . sqrt ( number / number ) k2 _ np . sqrt ( test ) n = s . shape [ number ] out = np . zeros ( n ) for var in range ( s . shape [ number ] ) ai = s [ var ] . toarray ( ) out [ var ] = ( k2 * * number ) . sum ( ) + ( np . sqrt ( ai ) ) * * number ) . sum ( ) _ number * np . sqrt ( ai ) . dot ( k2 ) out = np . sqrt ( out ) out * = var	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_6	var = np . sqrt ( number / number ) k2 _ np . sqrt ( test ) n = s . shape [ number ] out = np . zeros ( n ) for var in range ( s . shape [ number ] ) ai = s [ var ] . toarray ( ) out [ var ] = ( k2 * * number ) . sum ( ) + ai . sum ( ) _ number * np . sqrt ( ai ) . dot ( k2 ) out = np . sqrt ( out ) out * = var	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_7	var = np . sqrt ( number / number ) k2 _ np . sqrt ( test ) k2s = ( k2 * * number ) . sum ( ) n = s . shape [ number ] out = np . zeros ( n ) for var in range ( s . shape [ number ] ) ai = s [ var ] . toarray ( ) out [ var ] = _ number * np . sqrt ( ai ) . dot ( k2 ) out + = k2s + s . sum ( number ) . a1	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_8	var = np . sqrt ( number / number ) k2 _ np . sqrt ( test ) k2s = ( k2 * * number ) . sum ( ) out = _ number * np . sqrt ( s ) * k2	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_9	var = np . sqrt ( number / number ) k2 = np . sqrt ( test ) k2s = k2 . dot ( k2 ) out = var * np . sqrt ( k2s + s . sum ( number ) . a1 _ number * np . sqrt ( s ) * k2 )	0
Q_88	vectorize hellinger for sparse matrix _ num_py python	C_88_10	var = np . sqrt ( number / number ) k2s = np . sqrt ( test . dot ( test ) ) out = var * np . sqrt ( k2s + s . sum ( number ) . a1 _ number * np . sqrt ( s * test ) )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_0	in [ number ] arr = np . zeros ( ( number , number ) ) . arr [ number , number ] = number . arr [ number , number ] = number . in [ number ] arr out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	1
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_1	in [ number ] arr1 = np . zeros ( ( arr . shape [ number ] + number , arr . shape [ number ] + number ) , arr . dtype ) in [ number ] arr1 [ number _ number , number _ number ] = arr	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_2	in [ number ] n = np . zeros_like ( arr1 ) in [ number ] z = arr1 in [ number ] n [ number , number ] + = z [ _ number , _ number ] . n [ number , _ number ] + = z [ _ number , number ] . n [ _ number , number ] + = z [ number , _ number ] . n [ _ number , _ number ] + = z [ number , number ] . n [ _ number , ] + = z [ number , ] . n [ number , ] + = z [ _ number , ] . n [ , _ number ] + = z [ , number ] . n [ , number ] + = z [ , _ number ] in [ number ] n + = z in [ number ] n out [ number ] array ( [ [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] ] ) in [ number ] n [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_3	in [ number ] idx = np . argwhere ( arr1 ) in [ number ] idx out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_4	in [ number ] n1 = np . zeros_like ( arr1 ) in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . n1 [ slc ] + = arr1 [ tuple ( var ) ] . in [ number ] n1 [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_5	in [ number ] n1 = np . zeros_like ( arr1 ) in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . np . add . at ( n1 , slc , arr1 [ tuple ( var ) ] )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_6	in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . ii = np . ix_ ( np . r_ [ slc [ number ] ] , np . r_ [ slc [ number ] ] ) . np . add . at ( n1 , ii , arr1 [ tuple ( var ) ] ) . print ( ii ) . . ( array ( [ [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number , number , number ] ] ) ) ( array ( [ [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number , number , number ] ] ) )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_7	in [ number ] slc = [ np . mgrid [ ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) ] for var in idx ] in [ number ] slc = tuple ( np . hstack ( slc ) ) in [ number ] n2 = np . zeros_like ( arr1 ) in [ number ] np . add . at ( n2 , slc , number ) in [ number ] n2 [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_8	in [ number ] slc1 = np . mgrid [ slice ( _ number , number ) , slice ( _ number , number ) ] in [ number ] slc1 out [ number ] array ( [ [ [ _ number , _ number , _ number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ _ number , number , number ] , [ _ number , number , number ] , [ _ number , number , number ] ] ] ) in [ number ] idx out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_9	in [ number ] slc = [ np . mgrid [ ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) ] for var in idx ] in [ number ] slc = np . hstack ( slc )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_10	in [ number ] slc2 = idx . t [ , , none , none ] + slc1 [ , none , , ] in [ number ] np . concatenate ( list ( slc2 . transpose ( number , number , number , number ) ) , number ) out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] )	0
Q_89	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_89_11	in [ number ] pts = arr1 [ tuple ( idx . t ) ] in [ number ] pts out [ number ] array ( [ number . , number . ] ) in [ number ] pts1 = pts . repeat ( number ) [ , none ] . repeat ( number , axis = number ) in [ number ] pts1 out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] ) in [ number ] np . add . at ( n2 , tuple ( out [ number ] ) , pts1 )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_0	in [ number ] arr = np . array ( [ [ number , number , number , number ] , . [ number , number , number , number ] , . [ number , number , number , number ] ] ) . in [ number ] np . dstack ( ( arr , arr + number ) ) out [ number ] array ( [ [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] ] ) in [ number ] np . dstack ( ( arr , arr + number ) ) . shape out [ number ] ( number , number , number ) in [ number ] from scipy . io import loadmat , savemat in [ number ] pwd out [ number ] string in [ number ] savemat ( string , { string arr , string arr3 } )	1
Q_90	write a tagint d numpy array that be readable in matlab	C_90_1	load string arr arr = number number number number number number number number number number number number arr3 arr3 = ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number size ( arr3 ) ans = number number number	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_2	in [ number ] arr3 [ , , number ] out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ) in [ number ] arr3 [ , , number ] out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_3	in [ number ] arr . ravel ( ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] arr3 . ravel ( ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_4	arr ( ) . string ans = number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_5	in [ number ] np . array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] np . array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) . reshape ( number , number ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] np . array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) . reshape ( number , number ) . t out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ) in [ number ] np . array ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) . reshape ( ( number , number ) , order = string ) out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_6	in [ number ] arr3 = np . arange ( number * number * number ) . reshape ( number , number , number ) in [ number ] arr3f = np . arange ( number * number * number ) . reshape ( number , number , number , order = string ) in [ number ] arr3 out [ number ] array ( [ [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] , [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ] ) in [ number ] arr3f out [ number ] array ( [ [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] , [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ] ) in [ number ] arr3f . ravel ( ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] arr3f . ravel ( order = string ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) in [ number ] savemat ( string , { string arr3 , string arr3f } )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_7	"arr3 arr3 = ans ( , , number ) = number number number number number number ans ( , , number ) = number number number number number number . arr3f arr3f = ans ( , , number ) = number number number number number number ans ( , , number ) = number number number number number number . arr3 . ravel ( ) string ans = columns number through number number number number number number number number number number number number number number number number number number number number number columns number through number number number number number arr3f ( ) "" ans = columns number through number number number number number number number number number number number number number number number number number number number number number columns number through number number number number number"	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_8	in [ number ] arr3f [ , , number ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_9	"permute ( arr3 , [ number , number , number ] ) ans = ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number permute ( arr3 , [ number , number , number ] ) ( ) "" ans = columns number through number number number number number number number number number number number number number number number number number number number number number columns number through number number number number number"	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_10	in [ number ] arr3f . transpose ( number , number , number ) . ravel ( ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_11	in [ number ] x = np . array ( [ [ number , number , number , number ] , . [ number , number , number , number ] , . [ number , number , number , number ] ] ) . in [ number ] x3 = np . dstack ( ( x , x , x ) ) in [ number ] dx3 = x3 . reshape ( number , number ) in [ number ] np . savetxt ( string , dx3 , fmt = string ) in [ number ] cat test3 . txt number number number . number number number number number	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_12	var = fopen ( string ) var = number array = fscanf ( var , string ) array = number number . reshape ( array , number , number , number ) ans = ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number	0
Q_90	write a tagint d numpy array that be readable in matlab	C_90_13	permute ( reshape ( array , number , number , number ) , [ number , number , number ] ) ans = ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number ans ( , , number ) = number number number number number number number number number number number number	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_0	df id company value1 value2 number number foo number . number number . number number number bar number . number number . number number number lorem number . number number . number number number ipsum number . number number . number number number foo number . number number . number number number lorem number . number number . number	1
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_1	var = pd . read_csv ( string ) var = var . set_index ( string ) . percentage	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_2	var = pd . read_csv ( string , index_col = number , squeeze = true )	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_3	vd company foo number bar number ipsum number name percentage , dtype int64	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_4	df . value2 = df . value1 * df . company . map ( vd ) . fillna ( number ) . div ( number ) df id company value1 value2 number number foo number . number number . number number number bar number . number number . number number number lorem number . number number . number number number ipsum number . number number . number number number foo number . number number . number number number lorem number . number number . number	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_5	var = pd . to_numeric ( df . company . replace ( vd ) , errors = string ) df . value2 = df . value1 * var . fillna ( number ) / number df id company value1 value2 number number foo number . number number . number number number bar number . number number . number number number lorem number . number number . number number number ipsum number . number number . number number number foo number . number number . number number number lorem number . number number . number	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_6	var = var . merge ( ( vd / number ) . to_frame ( ) , left_on = string , right_index = true , how = string ) . fillna ( number ) var . value2 = var . value1 * var . percentage del var [ string ] var id company value1 value2 number number foo number . number number . number number number bar number . number number . number number number lorem number . number number . number number number ipsum number . number number . number number number foo number . number number . number number number lorem number . number number . number	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_7	var = pd . concat ( [ var ] * number , ignore_index = true )	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_8	timeit df . value1 * df . company . map ( vd ) . fillna ( number ) . div ( number ) number loops , best of number number . number number ms per loop	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_9	timeit df . value1 * pd . to_numeric ( df . company . replace ( vd ) , errors = string ) . fillna ( number ) / number number loops , best of number number . number ms per loop	0
Q_91	issue with update panda dataframe column base on reference table target another column	C_91_10	timeit df2 = df . merge ( ( vd / number ) . to_frame ( ) , left_on = string , right_index = true , how = string ) . fillna ( number ) df2 . value2 = df2 . value1 * df2 . percentage del df2 [ string ] number loops , best of number number . number ms per loop	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_0	in [ number ] np . array ( [ _ ] , dtype = special_type ) out [ number ] array ( [ ( array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = uint8 ) , number , string , number , number , list ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_1	in [ number ] f = h5py . file ( string , string ) in [ number ] db = f . create_dataset ( string , ( number , ) , dtype = special_type ) in [ number ] db [ ] segmentation fault ( core dumped )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_2	in [ number ] f = h5py . file ( string ) in [ number ] db1 = f . create_dataset ( string , ( number , ) , dtype = dt1 ) in [ number ] db2 = f . create_dataset ( string , ( number , ) , dtype = dt2 ) in [ number ] db1 [ ] out [ number ] array ( [ ( string , ) , ( string , ) , ( string , ) , ( string , ) , ( string , ) ] , dtype = [ ( string , string ) ] ) in [ number ] db2 [ ] out [ number ] array ( [ ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_3	in [ number ] db1 [ number ] = ( string , ) in [ number ] db1 [ number ] = ( string , ) in [ number ] db1 [ ] out [ number ] array ( [ ( string , ) , ( string , ) , ( string , ) , ( string , ) , ( string , ) ] , dtype = [ ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_4	in [ number ] db2 [ number ] = ( string , number ) in [ number ] db2 [ number ] = ( string , number ) in [ number ] db2 [ ] out [ number ] array ( [ ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_5	in [ number ] dt3 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , h5py . special_dtype ( vlen = str ) ) ] ) in [ number ] db3 = f . create_dataset ( string , ( number , ) , dtype = dt3 ) in [ number ] db3 [ ] out [ number ] array ( [ ( string , string ) , ( string , string ) , ( string , string ) ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] db3 [ number ] = ( string , string ) in [ number ] db3 [ number ] = ( string , string ) in [ number ] db3 [ ] out [ number ] array ( [ ( string , string ) , ( string , string ) , ( string , string ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_6	in [ number ] dt4 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] ) in [ number ] dt4 out [ number ] dtype ( [ ( string , string ) , ( string , string ) ] ) in [ number ] db4 = f . create_dataset ( string , ( number , ) , dtype = dt4 ) in [ number ] db4 [ number ] = ( string , np . arange ( number ) ) in [ number ] db4 [ number ] = ( string , np . arange ( number ) ) in [ number ] db4 [ ] out [ number ] array ( [ ( string , array ( [ number , number , number , number , number ] ) ) , ( string , array ( [ number , number , number ] ) ) , ( string , array ( [ ] , dtype = int32 ) ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_7	in [ number ] db4 [ number ] = ( string , [ number , number , number , number ] ) _ attribute_error string object has no attribute string	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_8	in [ number ] db4 [ number ] = ( string , np . ones ( ( number , number ) , int ) ) in [ number ] db4 [ ] out [ number ] array ( [ ( string , array ( [ number , number , number , number , number ] ) ) , ( string , array ( [ number , number , number ] ) ) , ( string , array ( [ number , number ] ) ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_9	in [ number ] dt1 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , int ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] )	0
Q_92	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_92_10	in [ number ] dt1 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = np . uint8 ) ) , ( string , int ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] )	0
Q_93	python numpy array mult combination	C_93_0	in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] ) in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] ) in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] ) in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] ) in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] ) in [ number ] np . random . choice ( range ( number ) , size = ( number , number ) , replace = false ) out [ number ] array ( [ [ number , number , number ] ] )	1
Q_93	python numpy array mult combination	C_93_1	in [ number ] import itertools in [ number ] itertools . permutations ? init signature itertools . permutations ( self , / , * args , * * kwargs ) docstring permutations ( iterable [ , r ] ) _ > permutations object return successive r _ length permutations of elements in the iterable . permutations ( range ( number ) , number ) _ > ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) type type in [ number ] itertools . permutations ( range ( number ) , number ) out [ number ] < itertools . permutations at number > in [ number ] list ( _ ) out [ number ] [ ( number , number , number ) , ( number , number , number ) , . ( number , number , number ) ]	0
Q_93	python numpy array mult combination	C_93_2	in [ number ] wgts = np . arange ( number , number ) in [ number ] a = np . array ( list ( itertools . permutations ( range ( number ) , number ) ) ) in [ number ] a . shape out [ number ] ( number , number ) in [ number ] wgts out [ number ] array ( [ number , number , number ] ) in [ number ] a . dot ( wgts ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_93	python numpy array mult combination	C_93_3	in [ number ] a = np . random . choice ( range ( number ) , size = ( number , number ) , replace = true ) in [ number ] a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , . [ number , number , number ] ] )	0
Q_93	python numpy array mult combination	C_93_4	in [ number ] wgts = np . arange ( number , number ) in [ number ] a . dot ( wgts ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_93	python numpy array mult combination	C_93_5	in [ number ] np . where ( _ = = number ) out [ number ] ( array ( [ number , number , number ] , dtype = int32 ) , ) in [ number ] a [ _ ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_93	python numpy array mult combination	C_93_6	in [ number ] a = np . random . choice ( range ( number ) , size = ( number , number ) , replace = true ) in [ number ] a . dot ( np . arange ( number , number ) ) out [ number ] array ( [ number , number , . number ] ) in [ number ] np . where ( _ = = number ) out [ number ] ( array ( [ ] , dtype = int32 ) , )	0
Q_93	python numpy array mult combination	C_93_7	in [ number ] a = np . random . choice ( range ( number ) , size = ( number , number ) , replace = true ) in [ number ] a . dot ( np . arange ( number , number ) ) out [ number ] array ( [ number , number , number , . number ] ) in [ number ] np . where ( _ = = number ) out [ number ] ( array ( [ number , number , number ] , dtype = int32 ) , ) in [ number ] a [ _ ] out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_93	python numpy array mult combination	C_93_8	in [ number ] a = np . array ( list ( itertools . product ( range ( number ) , repeat = number ) ) ) in [ number ] a . shape out [ number ] ( number , number ) in [ number ] x = a . dot ( np . arange ( number , number ) ) in [ number ] a [ x = = number ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_93	python numpy array mult combination	C_93_9	in [ number ] a = np . array ( list ( itertools . product ( range ( number ) , repeat = number ) ) ) in [ number ] a . shape out [ number ] ( number , number ) in [ number ] x = a . dot ( np . arange ( number , number ) ) in [ number ] a [ x = = number ] out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_93	python numpy array mult combination	C_93_10	in [ number ] g = itertools . product ( range ( number ) , repeat = number ) in [ number ] for var , var in enumerate ( g ) . if np . arange ( number , number ) . dot ( var ) = = number . print ( var , var ) . . number ( number , number , number , number ) number ( number , number , number , number ) number ( number , number , number , number ) number ( number , number , number , number ) number ( number , number , number , number )	0
Q_93	python numpy array mult combination	C_93_11	in [ number ] g = itertools . product ( range ( number ) , repeat = number ) in [ number ] for var , var in enumerate ( g ) . if np . arange ( number , number ) . dot ( var ) = = number . print ( var , var ) . break . number ( number , number , number , number )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_0	in [ number ] txt = string string string . splitlines ( ) in [ number ] data = np . genfromtxt ( txt , delimiter = string , dtype = none , names = true ) in [ number ] data out [ number ] array ( [ ( number . , number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number , number . number number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_94	numpy matrix multiplication with str and negativ int	C_94_1	in [ number ] data [ string ] out [ number ] array ( [ number . , number . number number , number . number number ] ) in [ number ] data [ string ] out [ number ] array ( [ number . number number , number . number number , number . number number ] )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_2	in [ number ] string out [ number ] string in [ number ] loc_sens = np . array ( [ string , string , string ] ) . trans = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ number , _ number , number ] ] ) .	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_3	in [ number ] loc_sens out [ number ] array ( [ string , string , string ] , dtype = string )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_4	in [ number ] np . dot ( loc_sens , trans ) . value_error data type must provide an itemsize	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_5	in [ number ] [ var * var for var , var in zip ( [ number , number , number ] , loc_sens ) ] out [ number ] [ string , string , string ]	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_6	in [ number ] locs = np . stack ( ( data [ string ] , data [ string ] , data [ string ] ) ) in [ number ] locs out [ number ] array ( [ [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] ] ) in [ number ] np . dot ( locs , trans ) out [ number ] array ( [ [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] ] )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_7	in [ number ] data1 = np . genfromtxt ( txt , delimiter = string , dtype = float , skip_header = number ) in [ number ] data1 out [ number ] array ( [ [ number . , number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number , number . number number ] ] ) in [ number ] np . dot ( data1 [ , number ] , trans ) out [ number ] array ( [ [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] ] ) in [ number ] np . dot ( data1 [ , number ] . t , trans ) out [ number ] array ( [ [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] , [ number . number number , _ number . number number , number . number number ] ] )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_8	in [ number ] data2 = np . genfromtxt ( txt , delimiter = string , dtype = [ ( string , string ) , ( string . , string , ( number , ) ) ] , skip_header = number ) in [ number ] data2 out [ number ] array ( [ ( number . , [ number . number number , number . number number , number . number number ] ) , ( number . number number , [ number . number number , number . number number , number . number number ] ) , ( number . number number , [ number . number number , number . number number , number . number number ] ) ] , dtype = [ ( string , string ) , ( string , string , ( number , ) ) ] ) in [ number ] data2 [ string ] out [ number ] array ( [ [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] ] )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_9	in [ number ] data [ loc_sens ] out [ number ] array ( [ ( number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number ) ] , dtype = { string [ string , string , string ] , string [ string , string , string ] , string [ number , number , number ] , string number } )	0
Q_94	numpy matrix multiplication with str and negativ int	C_94_10	in [ number ] data [ loc_sens ] . tolist ( ) out [ number ] [ ( number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number ) , ( number . number number , number . number number , number . number number ) ] in [ number ] np . array ( data [ loc_sens ] . tolist ( ) ) out [ number ] array ( [ [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] , [ number . number number , number . number number , number . number number ] ] )	0
Q_95	flatten an array of tuples of array	C_95_0	in [ number ] dt = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] in [ number ] arr = np . zeros ( number , dt ) in [ number ] arr out [ number ] array ( [ ( number . , number , number , number ) , ( number . , number , number , number ) , ( number . , number , number , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_95	flatten an array of tuples of array	C_95_1	in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr out [ number ] array ( [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_95	flatten an array of tuples of array	C_95_2	in [ number ] arr . tolist ( ) out [ number ] [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) ]	0
Q_95	flatten an array of tuples of array	C_95_3	in [ number ] np . array ( _ ) value_error setting an array element with a sequence .	0
Q_95	flatten an array of tuples of array	C_95_4	in [ number ] np . array ( arr . tolist ( ) , object ) out [ number ] array ( [ [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] , [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] , [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] ] , dtype = object )	0
Q_95	flatten an array of tuples of array	C_95_5	in [ number ] arr [ string ] . astype ( float ) out [ number ] array ( [ number . number number , number . number number , number . number number ] ) in [ number ] arr [ string ] [ ] = _ in [ number ] arr out [ number ] array ( [ ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) , ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) , ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_95	flatten an array of tuples of array	C_95_6	in [ number ] arr [ string ] out [ number ] array ( [ array ( [ number . number , number . number ] ) , array ( [ number . number , number . number ] ) , array ( [ number . number , number . number ] ) ] , dtype = object ) in [ number ] np . stack ( arr [ string ] )	0
Q_95	flatten an array of tuples of array	C_95_7	in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number , . number ] ) , np . array ( [ number . number , number . number , . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number , . number ] ) , np . array ( [ number . number ] ) , number ) in [ number ] arr out [ number ] array ( [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number , number . number ] ) , array ( [ number . number , number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number , number . number ] ) , array ( [ number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_95	flatten an array of tuples of array	C_95_8	in [ number ] def foo ( item ) . try . return item [ number ] . except . return item .	0
Q_95	flatten an array of tuples of array	C_95_9	in [ number ] [ [ foo ( var ) for var in a ] for a in arr ] out [ number ] [ [ number . number , number . number number , number . number , number ] , [ number . number , number . number number , number . number , number ] , [ number . number , number . number number , number . number , number ] ]	0
Q_95	flatten an array of tuples of array	C_95_10	in [ number ] np . array ( _ ) out [ number ] array ( [ [ number . number , number . number number , number . number , number . ] , [ number . number , number . number number , number . number , number . ] , [ number . number , number . number number , number . number , number . ] ] )	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_0	in [ number ] alist = [ [ number , number ] , [ number , number ] , [ number , number ] ] in [ number ] arr = np . array ( alist ) in [ number ] arr out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	1
Q_96	list of list to list of tuples without loop or list comprehension	C_96_1	in [ number ] arr . tolist ( ) out [ number ] [ [ number , number ] , [ number , number ] , [ number , number ] ]	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_2	in [ number ] [ tuple ( var ) for var in arr . tolist ( ) ] out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ] in [ number ] [ tuple ( var ) for var in alist ] out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_3	in [ number ] arr1 = np . array ( [ tuple ( var ) for var in alist ] , dtype = string ) in [ number ] arr1 out [ number ] array ( [ ( number , number ) , ( number , number ) , ( number , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] arr1 . tolist ( ) out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_4	in [ number ] arr . view ( string ) out [ number ] array ( [ [ ( number , number ) , ( number , number ) ] , [ ( number , number ) , ( number , number ) ] , [ ( number , number ) , ( number , number ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_5	np . array ( [ tuple ( var ) for var in arr . tolist ( ) ] , string )	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_6	in [ number ] dict ( zip ( alist , [ string , string , string ] ) ) . type_error unhashable type string in [ number ] dict ( zip ( [ tuple ( var ) for var in alist ] , [ string , string , string ] ) ) out [ number ] { ( number , number ) string , ( number , number ) string , ( number , number ) string }	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_7	in [ number ] arr . dtype out [ number ] dtype ( string ) in [ number ] arr . view ( string ) out [ number ] array ( [ [ ( number , number ) ] , [ ( number , number ) ] , [ ( number , number ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] arr . view ( string ) . tolist ( ) out [ number ] [ [ ( number , number ) ] , [ ( number , number ) ] , [ ( number , number ) ] ]	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_8	in [ number ] arr . view ( string ) . reshape ( number ) . tolist ( ) out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_9	in [ number ] timeit arr . view ( string ) . reshape ( number ) . tolist ( ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit [ tuple ( var ) for var in arr ] number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_96	list of list to list of tuples without loop or list comprehension	C_96_10	in [ number ] timeit dict ( zip ( [ tuple ( var ) for var in alist ] , [ string , string , string ] ) ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit dict ( zip ( out [ number ] , [ string , string , string ] ) ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_0	in [ number ] arr = np . array ( [ ( number . number , number . number , number . number , number . number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ) in [ number ] arr out [ number ] array ( [ ( number . , number . , number . , number . ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ) in [ number ] arr . view ( string ) out [ number ] array ( [ number . , number . , number . , number . ] , dtype = float32 )	1
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_1	in [ number ] arr [ number ] . view ( string ) _ value_error traceback ( most recent call last ) < ipython _ input _ number _ number fbab8f61ba > in < module > ( ) _ > number arr [ number ] . view ( string ) value_error changing the dtype of a number d array is only supported if the itemsize is unchanged	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_2	in [ number ] arr [ number ] . tolist ( ) out [ number ] ( number . number , number . number , number . number , number . number ) in [ number ] list ( arr [ number ] . tolist ( ) ) out [ number ] [ number . number , number . number , number . number , number . number ] in [ number ] np . array ( arr [ number ] . tolist ( ) ) out [ number ] array ( [ number . , number . , number . , number . ] )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_3	in [ number ] arr [ number ] . item ( ) out [ number ] ( number . number , number . number , number . number , number . number )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_4	in [ number ] timeit arr [ number ] number ns number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr [ number ] . tolist ( ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr [ number ] . item ( ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr . tolist ( ) number ns number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr . view ( string ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_5	in [ number ] arr [ [ number ] ] . view ( string ) out [ number ] array ( [ number . , number . , number . , number . ] , dtype = float32 ) in [ number ] timeit arr [ [ number ] ] . view ( string ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr [ number number ] . view ( string ) number . number s number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit arr [ number ] [ none ] . view ( string ) number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_6	in [ number ] arrs = np . repeat ( arr , number ) in [ number ] arrs . view ( string ) out [ number ] array ( [ number . , number . , number . , . , number . , number . , number . ] , dtype = float32 ) in [ number ] arrs . shape out [ number ] ( number , ) in [ number ] arrs . view ( string ) . shape out [ number ] ( number , )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_7	in [ number ] arrs . view ( ( string , number ) ) out [ number ] array ( [ [ number . , number . , number . , number . ] , [ number . , number . , number . , number . ] , [ number . , number . , number . , number . ] , . , [ number . , number . , number . , number . ] , [ number . , number . , number . , number . ] , [ number . , number . , number . , number . ] ] , dtype = float32 ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_8	in [ number ] arr . view ( ( string , number ) ) out [ number ] array ( [ [ number . , number . , number . , number . ] ] , dtype = float32 ) in [ number ] _ . shape out [ number ] ( number , number ) in [ number ] arr [ number ] . view ( ( string , number ) ) out [ number ] array ( [ number . , number . , number . , number . ] , dtype = float32 ) in [ number ] _ . shape out [ number ] ( number , )	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_9	in [ number ] arr [ number ] . view ( ( np . float32 , len ( arr . dtype . names ) ) ) out [ number ] array ( [ number . , number . , number . , number . ] , dtype = float32 ) in [ number ] np . _version_ out [ number ] string	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_10	in [ number ] arr = np . array ( [ ( number . number , number . number , number . number , number . number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ) in [ number ] arr2 = arr [ [ string , string ] ] in [ number ] arr2 out [ number ] array ( [ ( number . , number . ) ] , dtype = { string [ string , string ] , string [ string , string ] , string [ number , number ] , string number } ) in [ number ] arr2 . view ( ( string , number ) ) . value_error changing the dtype to a subarray type is only supported if the total itemsize is unchanged	0
Q_97	convert a slice of a structure array to regular num_py array in num_py tagint 14	C_97_11	in [ number ] arr . itemsize out [ number ] number in [ number ] arr2 . itemsize out [ number ] number	0
Q_98	calculate pvalue from panda data_frame	C_98_0	var = count mean std min sample gene arnhem ic number number . number number number . number number number . number number int1 number number . number number . number number . number sul1 number number . number number number . number number number . number number basel ic number number . number number number . number number number . number number int1 number number . number number . number number . number number sul1 number number . number number number . number number number . number number	1
Q_98	calculate pvalue from panda data_frame	C_98_1	var = sample gene count mean std min number arnhem ic number number . number number number . number number number . number number number arnhem int1 number number . number number . number number . number number arnhem sul1 number number . number number number . number number number . number number number basel ic number number . number number number . number number number . number number number basel int1 number number . number number . number number . number number number basel sul1 number number . number number number . number number number . number number	0
Q_98	calculate pvalue from panda data_frame	C_98_2	var = number df_rolled = pd . data_frame ( pd . np . roll ( df_reindex , var , number ) , columns = df_reindex . columns ) df_joined = df_reindex . join ( df_rolled , rsuffix = string )	0
Q_98	calculate pvalue from panda data_frame	C_98_3	df_joined [ string ] = df_joined . apply ( lambda x stats . ttest_ind_from_stats ( x [ string ] , x [ string ] , x [ string ] , x [ string ] , x [ string ] , x [ string ] ) [ number ] , axis = number )	0
Q_98	calculate pvalue from panda data_frame	C_98_4	var = df_joined [ [ string , string , string , string ] ] . rename ( columns = { string string , string string } )	0
Q_98	calculate pvalue from panda data_frame	C_98_5	var = loc1 loc2 gene pvalue number arnhem basel ic number . number number arnhem basel int1 number . number number arnhem basel sul1 number . number number number basel arnhem ic number . number number basel arnhem int1 number . number number basel arnhem sul1 number . number number	0
Q_98	calculate pvalue from panda data_frame	C_98_6	var = count mean std min sample gene arnhem ic number number . number number number . number e _ number number number . number number int1 number number . number number . number e + number number . number sul1 number number . number number number . number e _ number number number . number number tet_b number number . number number . number e _ number number number . number number tet_m number number . number number number . number e _ number number number . number number bla_oxa number number . number number number . number e _ number number number . number number erm_b number number . number number number . number e _ number number number . number number erm_f number number . number number number . number e _ number number number . number number basel aph3a number number . number number number . number e _ number number number . number number ic number number . number number number . number e _ number number number . number number int1 number number . number number . number e + number number number . number number sul1 number number . number number number . number e _ number number number . number number	0
Q_98	calculate pvalue from panda data_frame	C_98_7	var = df . pivot_table ( values = [ string , string , string ] , index = string , columns = string , fill_value = number )	0
Q_98	calculate pvalue from panda data_frame	C_98_8	import itertools for var , var in itertools . combinations ( df . index . levels [ number ] , number )	0
Q_98	calculate pvalue from panda data_frame	C_98_9	count mean std arnhem_basel sample arnhem basel arnhem basel arnhem basel gene aph3a number number number . number number . number number number . number e + number number . number number number . number ic number number number . number number number . number number number . number e _ number number number . number number number . number int1 number number number . number number . number number . number e + number number . number number . number sul1 number number number . number number number . number number number . number e _ number number number . number number number . number number tet_b number number number . number number . number number . number e _ number number number . number number . number tet_m number number number . number number number . number number . number e _ number number number . number number . number bla_oxa number number number . number number number . number number . number e _ number number number . number number . number erm_b number number number . number number number . number number . number e _ number number number . number number . number erm_f number number number . number number number . number number . number e _ number number number . number number . number	0
Q_98	calculate pvalue from panda data_frame	C_98_10	var = pd . data_frame ( index = df . index . levels [ number ] , columns = pd . multi_index . from_tuples ( [ var for var in itertools . combinations ( df . index . levels [ number ] , number ) ] ) ) . fillna ( number )	0
Q_98	calculate pvalue from panda data_frame	C_98_11	for var , var in itertools . combinations ( df . index . levels [ number ] , number )	0
Q_98	calculate pvalue from panda data_frame	C_98_12	var = df_multi . transpose ( ) . unstack ( level = [ number ] ) . fillna ( number )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_0	class cube ( ) def _init_ ( self , id , n , scale ) self . n = n self . scale = scale self . init_i = [ * id ] self . current_i = [ * id ] self . rot = [ [ number if var = = j else number for var in range ( number ) ] for j in range ( number ) ]	1
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_1	var = range ( number ) self . cubes = [ cube ( ( var , y , z ) , number , scale ) for var in var for y in var for z in var ]	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_2	def is_affected ( self , axis , slice , dir ) return self . current_i [ axis ] = = slice	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_3	rotate right ( x , y ) _ > ( _ y , x ) rotate left ( x , y ) _ > ( y , _ x )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_4	( x , y , z ) _ > ( z , y , _ x )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_5	( ix , iy , iz ) _ > ( iz , iy , n _ number _ ix )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_6	var , var = ( axis + number ) number , ( axis + number ) number for var in range ( number ) self . rot [ var ] [ var ] , self . rot [ var ] [ var ] = _ self . rot [ var ] [ var ] * dir , self . rot [ var ] [ var ] * dir self . current_i [ var ] , self . current_i [ var ] = ( self . current_i [ var ] if dir < number else self . n _ number _ self . current_i [ var ] , self . current_i [ var ] if dir > number else self . n _ number _ self . current_i [ var ] )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_7	def transform_mat ( self ) scale_a = [ [ var * self . scale for var in a ] for a in self . rot ] scale_t = [ ( p _ ( self . n _ number ) / number ) * number . number * self . scale for p in self . current_i ] return [ * scale_a [ number ] , number , * scale_a [ number ] , number , * scale_a [ number ] , number , * scale_t , number ]	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_8	def draw ( self , col , surf , vert , animate , angle , axis , slice , dir ) gl_push_matrix ( ) if animate and self . is_affected ( axis , slice , dir ) gl_rotatef ( angle * dir , * [ number if var = = axis else number for var in range ( number ) ] ) gl_mult_matrixf ( self . transform_mat ( ) ) gl_begin ( gl_quads ) for var in range ( len ( surf ) ) gl_color3fv ( colors [ var ] ) for j in surf [ var ] gl_vertex3fv ( vertices [ j ] ) gl_end ( ) gl_pop_matrix ( )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_9	for var in self . cubes var . draw ( colors , surfaces , vertices , animate , animate_ang , * action )	0
Q_99	how to rotate slice of a rubik cube in python py_open_gl	C_99_10	import pygame import random from pygame . locals import * from open_gl . gl import * from open_gl . glu import * vertices = ( ( number , _ number , _ number ) , ( number , number , _ number ) , ( _ number , number , _ number ) , ( _ number , _ number , _ number ) , ( number , _ number , number ) , ( number , number , number ) , ( _ number , _ number , number ) , ( _ number , number , number ) ) edges = ( ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ) surfaces = ( ( number , number , number , number ) , ( number , number , number , number ) , ( number , number , number , number ) , ( number , number , number , number ) , ( number , number , number , number ) , ( number , number , number , number ) ) colors = ( ( number , number , number ) , ( number , number , number ) , ( number , number . number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ) class cube ( ) def _init_ ( self , id , n , scale ) self . n = n self . scale = scale self . init_i = [ * id ] self . current_i = [ * id ] self . rot = [ [ number if var = = j else number for var in range ( number ) ] for j in range ( number ) ] def is_affected ( self , axis , slice , dir ) return self . current_i [ axis ] = = slice def update ( self , axis , slice , dir ) if not self . is_affected ( axis , slice , dir ) return var , j = ( axis + number ) number , ( axis + number ) number for k in range ( number ) self . rot [ k ] [ var ] , self . rot [ k ] [ j ] = _ self . rot [ k ] [ j ] * dir , self . rot [ k ] [ var ] * dir self . current_i [ var ] , self . current_i [ j ] = ( self . current_i [ j ] if dir < number else self . n _ number _ self . current_i [ j ] , self . current_i [ var ] if dir > number else self . n _ number _ self . current_i [ var ] ) def transform_mat ( self ) scale_a = [ [ s * self . scale for s in a ] for a in self . rot ] scale_t = [ ( p _ ( self . n _ number ) / number ) * number . number * self . scale for p in self . current_i ] return [ * scale_a [ number ] , number , * scale_a [ number ] , number , * scale_a [ number ] , number , * scale_t , number ] def draw ( self , col , surf , vert , animate , angle , axis , slice , dir ) gl_push_matrix ( ) if animate and self . is_affected ( axis , slice , dir ) gl_rotatef ( angle * dir , * [ number if var = = axis else number for var in range ( number ) ] ) gl_mult_matrixf ( self . transform_mat ( ) ) gl_begin ( gl_quads ) for var in range ( len ( surf ) ) gl_color3fv ( colors [ var ] ) for j in surf [ var ] gl_vertex3fv ( vertices [ j ] ) gl_end ( ) gl_pop_matrix ( ) class entire_cube ( ) def _init_ ( self , n , scale ) self . n = n cr = range ( self . n ) self . cubes = [ cube ( ( x , y , z ) , self . n , scale ) for x in cr for y in cr for z in cr ] def mainloop ( self ) rot_cube_map = { k_up ( _ number , number ) , k_down ( number , number ) , k_left ( number , _ number ) , k_right ( number , number ) } rot_slice_map = { k_1 ( number , number , number ) , k_2 ( number , number , number ) , k_3 ( number , number , number ) , k_4 ( number , number , number ) , k_5 ( number , number , number ) , k_6 ( number , number , number ) , k_7 ( number , number , number ) , k_8 ( number , number , number ) , k_9 ( number , number , number ) , k_f1 ( number , number , _ number ) , k_f2 ( number , number , _ number ) , k_f3 ( number , number , _ number ) , k_f4 ( number , number , _ number ) , k_f5 ( number , number , _ number ) , k_f6 ( number , number , _ number ) , k_f7 ( number , number , _ number ) , k_f8 ( number , number , _ number ) , k_f9 ( number , number , _ number ) , } ang_x , ang_y , rot_cube = number , number , ( number , number ) animate , animate_ang , animate_speed = false , number , number action = ( number , number , number ) while true for event in pygame . event . get ( ) if event . type = = pygame . quit pygame . quit ( ) quit ( ) if event . type = = keydown if event . key in rot_cube_map rot_cube = rot_cube_map [ event . key ] if not animate and event . key in rot_slice_map animate , action = true , rot_slice_map [ event . key ] if event . type = = keyup if event . key in rot_cube_map rot_cube = ( number , number ) ang_x + = rot_cube [ number ] * number ang_y + = rot_cube [ number ] * number gl_matrix_mode ( gl_modelview ) gl_load_identity ( ) gl_translatef ( number , number , _ number ) gl_rotatef ( ang_y , number , number , number ) gl_rotatef ( ang_x , number , number , number ) gl_clear ( gl_color_buffer_bit gl_depth_buffer_bit ) if animate if animate_ang > = number for cube in self . cubes cube . update ( * action ) animate , animate_ang = false , number for cube in self . cubes cube . draw ( colors , surfaces , vertices , animate , animate_ang , * action ) if animate animate_ang + = animate_speed pygame . display . flip ( ) pygame . time . wait ( number ) def main ( ) pygame . init ( ) display = ( number , number ) pygame . display . set_mode ( display , doublebuf opengl ) gl_enable ( gl_depth_test ) gl_matrix_mode ( gl_projection ) glu_perspective ( number , ( display [ number ] / display [ number ] ) , number . number , number . number ) new_entire_cube = entire_cube ( number , number . number ) new_entire_cube . mainloop ( ) if _name_ = = string main ( ) pygame . quit ( ) quit ( )	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_0	var = string_io ( string string string ) df = pd . read_csv ( var )	1
Q_100	extract value from csv file while go through a list use a for loop	C_100_1	df word pleasantness activation imagery number a number . number number . number number . number number abandon number . number number . number number . number number abandoned number . number number . number number . number number abandonment number . number number . number number . number	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_2	var = ( string ) data = np . array ( var . split ( ) )	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_3	data [ string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string . string string string string string string string string string string string string string ]	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_4	var = counter ( data [ np . isin ( data , df . word ) ] ) var counter ( { string number , string number } )	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_5	var , var , var = ( number , number , number ) for var , var in d . items ( ) values = df . loc [ df . word = = var ] var + = values [ string ] . item ( ) * var var + = values [ string ] . item ( ) * var var + = values [ string ] . item ( ) * var	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_6	print ( pleasantness , activation , imagery ) number . number number . number number . number	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_7	print ( sum ( d . values ( ) ) ) number	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_8	var = pd . merge ( pd . data_frame ( dict ( d ) , index = [ number ] ) . t , df . set_index ( string ) , left_index = true , right_index = true )	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_9	ndf count pleasantness activation imagery abandon number number . number number . number number . number abandonment number number . number number . number number . number	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_10	ndf . apply ( lambda k k [ number ] * k [ number ] , number )	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_11	pleasantness activation imagery abandon number . number number . number number . number abandonment number . number number . number number . number	0
Q_100	extract value from csv file while go through a list use a for loop	C_100_12	pleasantness number . number activation number . number imagery number . number dtype float64	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_0	np . arange ( number ) . reshape ( number , number )	1
Q_101	implication of manually set scipy sparse matrix shape	C_101_1	var = np . arange ( number ) var . shape = ( number , number )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_2	var = np . arange ( number ) . reshape ( number , number ) . t var . reshape ( number , number )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_3	in [ number ] m = sparse . random ( number , number , . number , string ) in [ number ] m out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in co_ordinate format > in [ number ] m . a out [ number ] array ( [ [ number . , number . number , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . number , number . , number . number , number . number ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . number , number . ] ] ) in [ number ] m1 = sparse . coo_matrix ( ( m . data , ( m . row , m . col ) ) , shape = ( number , number ) ) in [ number ] m1 out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in co_ordinate format > in [ number ] m1 . a out [ number ] array ( [ [ number . , number . number , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . number , number . , number . number , number . number ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . number , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] ) in [ number ] id ( m1 . data ) out [ number ] number in [ number ] id ( m . data ) out [ number ] number	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_4	in [ number ] m = ( sparse . random ( number , number , . number , string ) * number ) . astype ( int ) in [ number ] m out [ number ] < number x3 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format > in [ number ] m . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] m [ number , number ] = number . sparse_efficiency_warning ) in [ number ] m . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_5	in [ number ] m . _shape = ( number , number ) in [ number ] newptr = np . hstack ( ( m . indptr , m . indptr [ _ number ] ) ) in [ number ] newptr out [ number ] array ( [ number , number , number , number , number , number , number ] , dtype = int32 ) in [ number ] m . indptr = newptr in [ number ] m out [ number ] < number x3 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format > in [ number ] m . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] m [ number , number ] = number . sparse_efficiency_warning ) in [ number ] m . a out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_6	in [ number ] m . _shape = ( number , number ) in [ number ] m out [ number ] < number x4 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format > in [ number ] m . a out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] ) in [ number ] m [ number , number ] = number . sparse_efficiency_warning ) in [ number ] m [ number , number ] = number . sparse_efficiency_warning ) in [ number ] m out [ number ] < number x4 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format > in [ number ] m . a out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_7	in [ number ] m = ( sparse . random ( number , number , . number , string ) * number ) . astype ( int ) in [ number ] newptr = np . hstack ( ( m . indptr , number ) ) in [ number ] m1 = sparse . csr_matrix ( ( m . data , m . indices , newptr ) , shape = ( number , number ) )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_8	in [ number ] m [ number , number ] = number in [ number ] m1 [ number , number ] out [ number ] number	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_9	in [ number ] m1 [ number , number ] = number . sparse_efficiency_warning )	0
Q_101	implication of manually set scipy sparse matrix shape	C_101_10	in [ number ] m [ number , number ] = number in [ number ] m1 [ number , number ] out [ number ] number	0
Q_102	dynamic indexing with specific sum length in panda	C_102_0	var = pd . data_frame ( { string [ number , number , number , number , number , number , number , number ] } , index = range ( number , number ) )	1
Q_102	dynamic indexing with specific sum length in panda	C_102_1	var = ( df . v1 . cumsum ( ) / number ) . astype ( int ) df [ string ] = ( var _ var . shift ( ) ) . fillna ( var ) . astype ( int )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_2	var = ( df [ string ] . apply ( lambda x pd . series ( range ( x ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) df = df . join ( var ) . dropna ( ) . drop ( [ string , number ] , number )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_3	var = pd . data_frame ( { string [ number , number , number , number ] } )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_4	v1 number number number number number number number number number number	0
Q_102	dynamic indexing with specific sum length in panda	C_102_5	v1 number number number number number number number number number number	0
Q_102	dynamic indexing with specific sum length in panda	C_102_6	var = var . join ( var [ string ] . apply ( lambda x pd . series ( range ( x / number ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) . drop ( number , number )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_7	def nb_group_under ( v1 ) global nb_group if v1 < number return nb_group else nb_group + = number nb_group = number df [ string ] = df [ string ] . apply ( nb_group_under )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_8	df [ string ] = ( df . groupby ( string ) . v1 . cumsum ( ) / number ) . astype ( int ) df [ string ] = df . sum_under50 _ ( df . groupby ( string ) . sum_under50 . shift ( ) . fillna ( df . sum_under50 ) ) df = ( df [ ( df [ string ] > number ) ( df [ string ] > = number ) ] . drop ( [ string , string ] , number ) )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_9	def nb_lim_reached ( v1 , lim_v1 ) global partial_sum if v1 > = lim_v1 partial_sum = number return pd . np . floor ( v1 / lim_v1 ) else partial_sum + = v1 if partial_sum > = lim_v1 partial_sum _ = lim_v1 return number else return number	0
Q_102	dynamic indexing with specific sum length in panda	C_102_10	var = number partial_sum = number df [ string ] = df [ string ] . apply ( nb_lim_reached , args = ( var , ) ) . astype ( int )	0
Q_102	dynamic indexing with specific sum length in panda	C_102_11	var = ( var . join ( var [ string ] . apply ( lambda nb pd . series ( range ( nb ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) . dropna ( ) . drop ( [ string , number ] , number ) )	0
Q_103	equivalent of stata macro in python	C_103_0	import pandas as pd import numpy as np import statsmodels . api as sm df = pd . read_stata ( string ) in [ number ] df [ [ string , string , string ] ] . head ( ) out [ number ] mpg weight price number number number number number number number number number number number number number number number number number number number number	1
Q_103	equivalent of stata macro in python	C_103_1	in [ number ] y = df [ string ] in [ number ] df [ string ] = number in [ number ] x = df [ [ string , string , string ] ] in [ number ] reg = sm . ols ( y , x ) . fit ( ) in [ number ] print ( reg . summary ( ) ) ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable mpg r _ squared number . number model ols adj . r _ squared number . number method least squares f _ statistic number . number date prob ( f _ statistic ) number . number e _ number time log _ likelihood _ number . number no . observations number aic number . number df residuals number bic number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ weight _ number . number number number . number number _ number . number number . number _ number . number number _ number . number number price _ number . number e _ number number number . number _ number . number number . number _ number . number number . number cons number . number number . number number . number number . number number . number number . number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus number . number durbin _ watson number . number prob ( omnibus ) number . number jarque _ bera ( jb ) number . number skew number . number prob ( jb ) number . number e _ number kurtosis number . number cond . no . number . number e + number number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = warnings [ number ] standard errors assume that the covariance matrix of the errors is correctly specified . [ number ] the condition number is large , number . number e + number number . this might indicate that there are strong multicollinearity or other numerical problems .	0
Q_103	equivalent of stata macro in python	C_103_2	def reg2 ( depvar , indepvars , results , df ) y = df [ depvar ] df [ string ] = number x = df [ indepvars ] reg = sm . ols ( y , x ) . fit ( ) if results = number print ( reg . summary ( ) )	0
Q_103	equivalent of stata macro in python	C_103_3	var = [ string , string , string ] reg2 ( string , var , number , df )	0
Q_103	equivalent of stata macro in python	C_103_4	def load_and_reg2 ( func ) def wrapper ( * args , * * kwargs ) print ( ) print ( string ) print ( ) df = pd . read_stata ( string ) sumvars = df [ [ string , string , string ] ] . head ( ) print ( sumvars ) print ( ) func ( * args , * * kwargs , df = df ) return func ( * args , * * kwargs , df = df ) print ( ) print ( string ) print ( ) dfshape = df . shape print ( string , dfshape ) return wrapper	0
Q_103	equivalent of stata macro in python	C_103_5	load_and_reg2 def reg2 ( depvar , indepvars , results , df ) y = df [ depvar ] df [ string ] = number x = df [ indepvars ] reg = sm . ols ( y , x ) . fit ( ) if results = number print ( reg . summary ( ) ) return reg	0
Q_103	equivalent of stata macro in python	C_103_6	in [ number ] [ predictors = [ string , string , string ] in [ number ] reg2 ( string , predictors , number ) loading the dataset . mpg weight price number number number number number number number number number number number number number number number number number number number number ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable mpg r _ squared number . number model ols adj . r _ squared number . number method least squares f _ statistic number . number date prob ( f _ statistic ) number . number e _ number time log _ likelihood _ number . number no . observations number aic number . number df residuals number bic number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ weight _ number . number number number . number number _ number . number number . number _ number . number number _ number . number number price _ number . number e _ number number number . number _ number . number number . number _ number . number number . number cons number . number number . number number . number number . number number . number number . number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus number . number durbin _ watson number . number prob ( omnibus ) number . number jarque _ bera ( jb ) number . number skew number . number prob ( jb ) number . number e _ number kurtosis number . number cond . no . number . number e + number number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = warnings [ number ] standard errors assume that the covariance matrix of the errors is correctly specified . [ number ] the condition number is large , number e + number number . this might indicate that there are strong multicollinearity or other numerical problems . doing any other stuff you like . shape ( number , number )	0
Q_103	equivalent of stata macro in python	C_103_7	def load_and_reg2 ( func ) def wrapper ( * args , * * kwargs ) d = { } print ( ) print ( string ) print ( ) df = pd . read_stata ( string ) sumvars = df [ [ string , string , string ] ] . head ( ) d [ string ] = sumvars print ( sumvars ) print ( ) d [ string ] = func ( * args , * * kwargs , df ) print ( ) print ( string ) print ( ) dfshape = df . shape d [ string ] = dfshape print ( string , dfshape ) return d return wrapper	0
Q_103	equivalent of stata macro in python	C_103_8	in [ number ] foo = reg2 ( string , predictors , number ) in [ number ] foo . keys ( ) out [ number ] dict_keys ( [ string , string , string ] ) in [ number ] foo [ string ] out [ number ] mpg weight price number number number number number number number number number number number number number number number number number number number number	0
Q_103	equivalent of stata macro in python	C_103_9	class loadreg2return ( object ) def _init_ ( self , sumvars = none , reg2 = none , dfshape = none ) self . sumvars = sumvars self . reg2 = reg2 self . dfshape = dfshape def load_and_reg2 ( func ) def wrapper ( * args , * * kwargs ) print ( string ) print ( ) df = pd . read_stata ( string ) sumvars = df [ [ string , string , string ] ] . head ( ) print ( sumvars ) print ( ) reg2 = func ( * args , * * kwargs , df = df ) print ( ) print ( string ) print ( ) dfshape = df . shape loadreg2return ( dfshape = dfshape ) print ( string , dfshape ) return loadreg2return ( sumvars = sumvars , reg2 = reg2 , dfshape = dfshape ) return wrapper	0
Q_103	equivalent of stata macro in python	C_103_10	in [ number ] foo . dfshape out [ number ] ( number , number ) in [ number ] foo . sumvars out [ number ] mpg weight price number number number number number number number number number number number number number number number number number number number number in [ number ] foo . reg2 . params out [ number ] weight _ number . number number price _ number . number number cons number . number dtype float64	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_0	in [ number ] a = np . array ( [ np . array ( [ number , number , number , number ] ) , np . array ( [ number , number , number , number ] ) ] ) .	1
Q_104	efficiently convert numpy array of array to panda series of array	C_104_1	in [ number ] pd . data_frame ( a )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_2	in [ number ] pd . series ( a ) _ . exception data must be number _ dimensional	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_3	in [ number ] pd . series ( a . tolist ( ) ) out [ number ] number [ number , number , number , number ] number [ number , number , number , number ] dtype object in [ number ] pd . series ( list ( a ) ) out [ number ] number [ number , number , number , number ] number [ number , number , number , number ] dtype object	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_4	in [ number ] out [ number ] [ number ] out [ number ] [ number , number , number , number ] in [ number ] out [ number ] [ number ] out [ number ] array ( [ number , number , number , number ] )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_5	in [ number ] a = np . array ( [ np . array ( [ number , number , number , number ] ) , np . array ( [ number , number , number , number ] ) , np . array ( [ number ] ) , none ] ) in [ number ] a out [ number ] array ( [ array ( [ number , number , number , number ] ) , array ( [ number , number , number , number ] ) , array ( [ number ] ) , none ] , dtype = object )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_6	in [ number ] pd . series ( a ) out [ number ] number [ number , number , number , number ] number [ number , number , number , number ] number [ number ] number none dtype object in [ number ] out [ number ] [ number ] out [ number ] array ( [ number , number , number , number ] )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_7	in [ number ] pd . series ( a [ number ] ) out [ number ] number [ number , number , number , number ] number [ number , number , number , number ] dtype object	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_8	in [ number ] a0 = np . ones ( [ number , number ] , int ) in [ number ] a1 = np . empty ( number , object ) in [ number ] a1 [ ] = [ np . ones ( number , int ) for var in range ( number ) ]	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_9	in [ number ] timeit pd . data_frame ( a0 ) number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_10	in [ number ] timeit pd . series ( list ( a0 ) ) number s number . number s per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit pd . series ( a0 . tolist ( ) ) number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_104	efficiently convert numpy array of array to panda series of array	C_104_11	in [ number ] timeit pd . series ( a1 ) number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_105	python dynamic subset in a loop	C_105_0	var = var . set_index ( [ string , string ] ) a = var . idxmin ( axis = number ) m1 = var . eq ( var . min ( axis = number ) , axis = number ) . cumsum ( axis = number ) . gt ( number ) m2 = var . sub ( var . index . get_level_values ( number ) , axis = number ) . ge ( number ) b = ( m1 m2 ) . idxmax ( axis = number ) d = { string a , string b } var = var . assign ( * * d ) . reset_index ( ) print ( var ) county prerecession max value number number number number number number number county number number number number number number number number number county number number number number number number number number number county number number number number number number number number number county number number number number number number number number number number number date of min date of max number number number number number number number number number number number number number number number number number number number number number number number number	1
Q_105	python dynamic subset in a loop	C_105_1	import pandas as pd temp = u string string string	0
Q_105	python dynamic subset in a loop	C_105_2	var = var . set_index ( [ string , string ] ) print ( var ) number number number number number number county prerecession max value county number number number number number number number number county number number number number number number number number county number number number number number number number number county number number number number number number number number number number number county prerecession max value county number number number number number county number number number number number county number number number number number county number number number number number	0
Q_105	python dynamic subset in a loop	C_105_3	print ( df . idxmin ( axis = number ) ) county prerecession max value county number number number county number number number county number number number county number number number dtype object	0
Q_105	python dynamic subset in a loop	C_105_4	print ( df . eq ( df . min ( axis = number ) , axis = number ) ) number number number number number number county prerecession max value county number number false false false true false false county number number false true false false false false county number number false false false false true false county number number false false true false false false number number number county prerecession max value county number number false false false county number number false false false county number number false false false county number number false false false	0
Q_105	python dynamic subset in a loop	C_105_5	print ( df . eq ( df . min ( axis = number ) , axis = number ) . cumsum ( axis = number ) ) number number number number number number number county prerecession max value county number number number number number number number number number county number number number number number number number number number county number number number number number number number number number county number number number number number number number number number number number county prerecession max value county number number number number county number number number number county number number number number county number number number number	0
Q_105	python dynamic subset in a loop	C_105_6	print ( df . eq ( df . min ( axis = number ) , axis = number ) . cumsum ( axis = number ) . gt ( number ) ) number number number number number number number county prerecession max value county number number false false false true true true true county number number false true true true true true true county number number false false false false true true true county number number false false true true true true true number number county prerecession max value county number number true true county number number true true county number number true true county number number true true	0
Q_105	python dynamic subset in a loop	C_105_7	print ( df . index . get_level_values ( number ) ) int64_index ( [ number , number , number , number ] , dtype = string , name = string ) print ( df . sub ( df . index . get_level_values ( number ) , axis = number ) ) number number number number number number county prerecession max value county number number _ number _ number _ number _ number _ number _ number county number number _ number _ number number number number number county number number _ number _ number _ number _ number _ number _ number county number number number _ number _ number _ number _ number number number number number county prerecession max value county number number _ number number number county number number number number number county number number _ number number number county number number number number number	0
Q_105	python dynamic subset in a loop	C_105_8	print ( df . sub ( df . index . get_level_values ( number ) , axis = number ) . ge ( number ) ) number number number number number number county prerecession max value county number number false false false false false false county number number false false true true true true county number number false false false false false false county number number true false false false false true number number number county prerecession max value county number number false true true county number number true true true county number number false true true county number number true true true	0
Q_105	python dynamic subset in a loop	C_105_9	print ( ( m1 m2 ) ) number number number number number number county prerecession max value county number number false false false false false false county number number false false true true true true county number number false false false false false false county number number false false false false false true number number number county prerecession max value county number number false true true county number number true true true county number number false true true county number number true true true print ( ( m1 m2 ) . idxmax ( axis = number ) ) county prerecession max value county number number number county number number number county number number number county number number number dtype object	0
Q_105	python dynamic subset in a loop	C_105_10	var = { string a , string b } df = df . assign ( * * var ) print ( df ) number number number number number number county prerecession max value county number number number number number number number number county number number number number number number number number county number number number number number number number number county number number number number number number number number number number number date of min date of max county prerecession max value county number number number number number number number county number number number number number number number county number number number number number number number county number number number number number number number	0
Q_106	how to apply formula in panda	C_106_0	df out date quantity total value ( lacs ) number _ number number _ number number number number number . number number . number number _ number number _ number number number number number . number number . number	1
Q_106	how to apply formula in panda	C_106_1	var = df . apply ( pd . to_numeric ) var . dtypes ( ) out quantity float64 total value ( lacs ) int64 dtype object	0
Q_106	how to apply formula in panda	C_106_2	df [ string ] = ( df_float [ string ] * number / df_float [ string ] * number ) df [ string ] out number _ number number _ number number number number number . number number _ number number _ number number number number number . number	0
Q_106	how to apply formula in panda	C_106_3	def get_price ( row ) try price = ( float ( row [ string ] ) * number / float ( row [ string ] ) * number ) except ( type_error , value_error )	0
Q_106	how to apply formula in panda	C_106_4	var = [ string , string ] data [ var ] = pd . to_numeric ( data [ var ] )	0
Q_106	how to apply formula in panda	C_106_5	var = data . to_frame ( ) . t . set_index ( string )	0
Q_106	how to apply formula in panda	C_106_6	df out quantity total value ( lacs ) date number _ number number _ number number number number number . number number . number	0
Q_106	how to apply formula in panda	C_106_7	data out date number _ number number _ number number number number quantity number . number total value ( lacs ) number . number date number _ number number _ number number number number quantity number . number total value ( lacs ) number . number	0
Q_106	how to apply formula in panda	C_106_8	data . groupby ( level = number ) . apply ( list ) out date [ number _ number number _ number number number number , number _ number number _ number number number number ] quantity [ number . number , number . number ] total value ( lacs ) [ number . number , number . number ]	0
Q_106	how to apply formula in panda	C_106_9	data . groupby ( level = number ) . apply ( list ) . apply ( pd . series ) out number number date number _ number number _ number number number number number _ number number _ number number number number quantity number . number number . number total value ( lacs ) number . number number . number	0
Q_106	how to apply formula in panda	C_106_10	series . groupby ( level = number ) . apply ( list ) . apply ( pd . series ) . t . set_index ( string ) out quantity total value ( lacs ) date number _ number number _ number number number number number . number number . number number _ number number _ number number number number number . number number . number	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_0	string string string def add_to_dict ( d , key_value_pairs ) newlist = [ ] for var in key_value_pairs	1
Q_107	python _ how to fix value_error not enough value to unpack	C_107_1	iterate the set of keys for var in d value = d [ var ] print ( var , value ) the code segment above has the same effect as the following one for var in d . keys ( ) value = d [ var ] print ( var , value )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_2	iterate the set of var _ var _ pairs for var , var in d . items ( ) print ( var , var )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_3	iterate the set of values for var in d . values ( ) print ( var )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_4	iterate the set of keys for var in d value = d [ var ] print ( var , value )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_5	for var in d . keys ( ) value = d [ var ] print ( var , value )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_6	for var in d . iterkeys ( ) value = d [ var ] print ( var , value )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_7	for var , var in d . items ( ) print ( var , var )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_8	for var , var in d . iteritems ( ) print ( var , var )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_9	for var in d . values ( ) print ( var )	0
Q_107	python _ how to fix value_error not enough value to unpack	C_107_10	for var in d . itervalues ( ) print ( var )	0
Q_108	efficient roll trim mean with python	C_108_0	def rolling_mean ( data ) x = sorted ( data [ number ] ) res = np . repeat ( np . nan , len ( data ) ) for var in range ( number , len ( data ) ) if var = number del x [ bisect . bisect_left ( x , data [ var _ number ] ) ] bisect . insort_right ( x , data [ var ] ) res [ var ] = np . mean ( x [ number number ] ) return res	1
Q_108	efficient roll trim mean with python	C_108_1	> data = pd . series ( np . random . randint ( number , number , number ) ) > timeit data . rolling ( number ) . apply ( lambda w trim_mean ( w , number . number number ) ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each ) > timeit rolling_mean ( data . values ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_108	efficient roll trim mean with python	C_108_2	> from numba import jit > rolling_mean_jit = jit ( rolling_mean ) > timeit rolling_mean_jit ( data . values ) number . number number s number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_108	efficient roll trim mean with python	C_108_3	def rolling_mean_np ( data ) res = np . repeat ( np . nan , len ( data ) ) for var in range ( len ( data ) _ number ) x = np . sort ( data [ var var + number ] ) res [ var + number ] = x [ number number ] . mean ( ) return res	0
Q_108	efficient roll trim mean with python	C_108_4	> timeit rolling_mean_np ( data . values ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_108	efficient roll trim mean with python	C_108_5	> rolling_mean_np_jit = jit ( rolling_mean_np ) > timeit rolling_mean_np_jit ( data . values ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_108	efficient roll trim mean with python	C_108_6	> np . all ( rolling_mean_np_jit ( data . values ) [ number ] = = data . rolling ( number ) . apply ( lambda w trim_mean ( w , number . number number ) ) . values [ number ] ) true	0
Q_108	efficient roll trim mean with python	C_108_7	def rolling_mean_np_manual ( data ) x = np . sort ( data [ number ] ) res = np . repeat ( np . nan , len ( data ) ) for var in range ( number , len ( data ) + number ) res [ var _ number ] = x [ number number ] . mean ( ) if var = len ( data ) idx_old = np . searchsorted ( x , data [ var _ number ] ) x [ idx_old ] = data [ var ] x . sort ( ) return res > timeit rolling_mean_np_manual ( data . values ) number ms number ms per loop ( mean std . dev . of number runs , number loop each ) > rolling_mean_np_manual_jit = jit ( rolling_mean_np_manual ) > timeit rolling_mean_np_manual_jit ( data . values ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each ) > np . all ( rolling_mean_np_manual_jit ( data . values ) [ number ] = = data . rolling ( number ) . apply ( lambda w trim_mean ( w , number . number number ) ) . values [ number ] ) true	0
Q_108	efficient roll trim mean with python	C_108_8	def rolling_mean_np_shift ( data ) x = np . sort ( data [ number ] ) res = np . repeat ( np . nan , len ( data ) ) for var in range ( number , len ( data ) + number ) res [ var _ number ] = x [ number number ] . mean ( ) if var = len ( data ) idx_old , idx_new = np . searchsorted ( x , [ data [ var _ number ] , data [ var ] ] ) if idx_old < idx_new x [ idx_old idx_new _ number ] = x [ idx_old + number idx_new ] x [ idx_new _ number ] = data [ var ] elif idx_new < idx_old x [ idx_new + number idx_old + number ] = x [ idx_new idx_old ] x [ idx_new ] = data [ var ] else x [ idx_new ] = data [ var ] return res > timeit rolling_mean_np_shift ( data . values ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each ) > rolling_mean_np_shift_jit = jit ( rolling_mean_np_shift ) > timeit rolling_mean_np_shift_jit ( data . values ) number . number ms number s per loop ( mean std . dev . of number runs , number loop each ) > np . all ( rolling_mean_np_shift_jit ( data . values ) [ number ] = = data . rolling ( number ) . apply ( lambda w trim_mean ( w , number . number number ) ) . values [ number ] ) true	0
Q_108	efficient roll trim mean with python	C_108_9	jit def binary_search ( a , x ) lo = number hi = number while lo < hi mid = ( lo + hi ) / / number if a [ mid ] < x lo = mid + number else hi = mid return lo jit def rolling_mean_np_jitted_search ( data ) x = np . sort ( data [ number ] ) res = np . repeat ( np . nan , len ( data ) ) for var in range ( number , len ( data ) + number ) res [ var _ number ] = x [ number number ] . mean ( ) if var = len ( data ) idx_old = binary_search ( x , data [ var _ number ] ) idx_new = binary_search ( x , data [ var ] ) if idx_old < idx_new x [ idx_old idx_new _ number ] = x [ idx_old + number idx_new ] x [ idx_new _ number ] = data [ var ] elif idx_new < idx_old x [ idx_new + number idx_old + number ] = x [ idx_new idx_old ] x [ idx_new ] = data [ var ] else x [ idx_new ] = data [ var ] return res	0
Q_108	efficient roll trim mean with python	C_108_10	> timeit rolling_mean_np_jitted_search ( data . values ) number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_0	def op ( x ) time . sleep ( number ) return number * x . numpy ( ) def op_tf ( x ) print ( string ) return tf . py_function ( op , [ x ] , tout = tf . int32 )	1
Q_109	how to run parallel map_fn when eager execution enable	C_109_1	in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number >	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_2	in [ number ] tf . function . def op_tf ( x ) . print ( string ) . return tf . py_function ( op , [ x ] , tout = tf . int32 ) . in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number >	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_3	in [ number ] tf . function ( input_signature = [ tf . tensor_spec ( shape = [ ] , dtype = tf . int32 ) ] ) . def op_tf ( x ) . print ( string ) . return tf . py_function ( op , [ x ] , tout = tf . int32 ) . . in [ number ] op_tf ( number ) tracing out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number >	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_4	in [ number ] tf . function ( input_signature = [ tf . tensor_spec ( shape = [ ] , dtype = tf . int32 ) ] ) . def op_tf ( x ) . print ( string ) . return tf . py_function ( op , [ x ] , tout = tf . int32 ) . . in [ number ] op_tf = op_tf . get_concrete_function ( ) tracing in [ number ] op_tf ( number ) out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number > in [ number ] op_tf ( number ) out [ number ] < tf . tensor shape = ( ) , dtype = int32 , numpy = number >	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_5	in [ number ] def op ( x ) . print ( string ) . time . sleep ( number . number ) . return number . . in [ number ] x = tf . ones ( shape = ( number , ) ) in [ number ] _ = tf . map_fn ( op , x , parallel_iterations = number ) sleep sleep sleep sleep sleep sleep sleep sleep sleep sleep in [ number ] tf . function . def my_map ( * args , * * kwargs ) . return tf . map_fn ( * args , * * kwargs ) . in [ number ] my_map ( op , x , parallel_iterations = number ) sleep out [ number ] < tf . tensor shape = ( number , ) , dtype = float32 , numpy = array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] , dtype = float32 ) >	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_6	in [ number ] x = tf . ones ( shape = ( number , ) , dtype = tf . int32 ) in [ number ] def op ( x ) . print ( string ) . time . sleep ( number . number ) . return number * x . numpy ( ) . in [ number ] tf . function ( input_signature = [ tf . tensor_spec ( shape = [ ] , dtype = tf . int32 ) ] ) . def op_tf ( x ) . print ( string ) . return tf . py_function ( op , [ x ] , tout = tf . int32 ) . in [ number ] _ = my_map ( op_tf , x , parallel_iterations = number ) tracing sleep sleep sleep sleep sleep sleep sleep sleep sleep sleep	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_7	in [ number ] def op ( x ) . time . sleep ( number . number ) . return number * x . numpy ( ) . in [ number ] tf . function ( input_signature = [ tf . tensor_spec ( shape = [ ] , dtype = tf . int32 ) ] ) . def op_tf ( x ) . return tf . py_function ( op , [ x ] , tout = tf . int32 ) . in [ number ] timeit tf . map_fn ( op_tf , x , parallel_iterations = number ) number . number number s number s per loop ( mean std . dev . of number runs , number loop each ) in [ number ] timeit tf . map_fn ( op_tf , x , parallel_iterations = number ) number . number number s number s per loop ( mean std . dev . of number runs , number loop each )	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_8	import tensorflow as tf import time from datetime import datetime stamp = datetime . now ( ) . strftime ( string ) logdir = string stamp	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_9	tf . config . threading . set_inter_op_parallelism_threads ( number ) tf . config . threading . set_intra_op_parallelism_threads ( number )	0
Q_109	how to run parallel map_fn when eager execution enable	C_109_10	import time from datetime import datetime import numpy as np import tensorflow as tf tf . compat . v1 . disable_eager_execution ( ) tf . config . threading . set_inter_op_parallelism_threads ( number ) tf . config . threading . set_intra_op_parallelism_threads ( number ) stamp = datetime . now ( ) . strftime ( string ) logdir = f string tf . profiler . experimental . start ( logdir ) def op ( x ) x = x . numpy ( ) start = time . time ( ) while time . time ( ) < start + x / number x = ( number * x ) number return x tf . function ( input_signature = [ tf . tensor_spec ( [ ] , tf . int32 ) ] ) def op_tf ( x ) return tf . py_function ( op , [ x ] , tout = tf . int32 , name = string )	0
Q_110	panda groupby then fill miss row	C_110_0	lc_lid energy ( k_wh / hh ) day_time number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number	1
Q_110	panda groupby then fill miss row	C_110_1	var = pd . date_range ( start = df . index . min ( ) , end = df . index . max ( ) , freq = string ) df = ( df . groupby ( string , as_index = false ) . apply ( lambda group group . reindex ( var , method = string ) ) . reset_index ( level = number , drop = true ) . sort_index ( ) )	0
Q_110	panda groupby then fill miss row	C_110_2	lc_lid energy ( k_wh / hh ) number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number	0
Q_110	panda groupby then fill miss row	C_110_3	"first i string day_time string lc_lid string mac000006 string mac000007 string mac000006 string mac000007 string mac000006 string mac000007 string mac000006 string mac000007 string energy ( k_wh / hh ) string day_time "" )"	0
Q_110	panda groupby then fill miss row	C_110_4	lc_lid energy ( k_wh / hh ) day_time number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number	0
Q_110	panda groupby then fill miss row	C_110_5	number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number	0
Q_110	panda groupby then fill miss row	C_110_6	var = pd . date_range ( start = df . index . min ( ) , end = df . index . max ( ) , freq = string )	0
Q_110	panda groupby then fill miss row	C_110_7	datetime_index ( [ string , string , string , string , string , string , string , string ] , dtype = string , freq = string )	0
Q_110	panda groupby then fill miss row	C_110_8	var = df [ df . lc_lid = = string ] var . reindex ( full_idx )	0
Q_110	panda groupby then fill miss row	C_110_9	lc_lid energy ( k_wh / hh ) number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number number na_n na_n number _ number number _ number number number number number number na_n na_n number _ number number _ number number number number number number na_n na_n number _ number number _ number number number number number number na_n na_n number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number	0
Q_110	panda groupby then fill miss row	C_110_10	grouped_df . reindex ( full_idx , method = string )	0
Q_110	panda groupby then fill miss row	C_110_11	lc_lid energy ( k_wh / hh ) number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000006 number . number	0
Q_110	panda groupby then fill miss row	C_110_12	( df . groupby ( string , as_index = false )	0
Q_110	panda groupby then fill miss row	C_110_13	lc_lid energy ( k_wh / hh ) number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number mac000006 number . number number _ number number _ number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number number number _ number number _ number number number number number number mac000006 number . number number _ number number _ number number number number number number mac000007 number . number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_0	var = pd . index ( [ * string ] , name = string ) idx_range = pd . range_index ( number , name = string )	1
Q_111	how do i operate on a data_frame with a series for every column	C_111_1	var = pd . series ( range ( number , number ) , idx_lower ) s1 = pd . series ( range ( number , number , number ) , idx_lower ) s2 = pd . series ( range ( number , number , _ number ) , idx_range )	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_2	var = pd . data_frame ( number , index = idx_range , columns = idx_lower ) df1 = pd . data_frame ( np . arange ( np . product ( var . shape ) ) . reshape ( var . shape ) , index = idx_range , columns = idx_lower )	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_3	s1 + s0 lower a number b number c number d number e number dtype int64	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_4	s1 + s0 . sample ( frac = number ) lower a number b number c number d number e number dtype int64	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_5	s1 + s0 . sample ( frac = number ) . values lower a number b number c number d number e number dtype int64	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_6	s1 + number lower a number b number c number d number e number dtype int64	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_7	df0 + df1 lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_8	df0 + df1 . sample ( frac = number ) . sample ( frac = number , axis = number ) lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_9	df0 + df1 . sample ( frac = number ) . sample ( frac = number , axis = number ) . values lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_10	df0 + [ * range ( number , df0 . shape [ number ] + number ) ] lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_11	df0 + number lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_12	s0 lower a b c d e number number number number number df0 lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_13	df0 + s0 lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_14	s2 df0 lower a b c d e range range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_15	df0 + s2 a b c d e number number number number number range number na_n na_n na_n na_n na_n na_n na_n na_n na_n na_n number na_n na_n na_n na_n na_n na_n na_n na_n na_n na_n number na_n na_n na_n na_n na_n na_n na_n na_n na_n na_n number na_n na_n na_n na_n na_n na_n na_n na_n na_n na_n number na_n na_n na_n na_n na_n na_n na_n na_n na_n na_n	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_16	( df0 . t + s2 ) . t lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_17	df0 . add ( s2 , axis = string ) lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_18	df0 . add ( s2 , axis = number ) lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_19	df0 . sub ( s2 , axis = number ) lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_20	df0 . mul ( s2 , axis = number ) lower a b c d e range number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_21	df0 . div ( s2 , axis = number ) lower a b c d e range number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number	0
Q_111	how do i operate on a data_frame with a series for every column	C_111_22	df0 . pow ( number / s2 , axis = number ) lower a b c d e range number number . number number number . number number number . number number number . number number number . number number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_0	df . explode ( string ) a b number number number number number number number number number number number number	1
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_1	var = pd . data_frame ( { string [ number , number , number , number ] , string [ [ number , number ] , [ number , number ] , [ ] , np . nan ] } ) var . b = var . b . fillna ( { var [ ] for var in var . index } )	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_2	df . set_index ( string ) . b . apply ( pd . series ) . stack ( ) . reset_index ( level = number ) . rename ( columns = { number string } ) out [ number ] a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_3	var = pd . data_frame ( { string var . a . repeat ( var . b . str . len ( ) ) , string np . concatenate ( var . b . values ) } ) var out [ number ] a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_4	var = pd . data_frame ( { string np . concatenate ( df . b . values ) } , index = df . index . repeat ( df . b . str . len ( ) ) ) var . join ( df . drop ( string , number ) , how = string ) out [ number ] b a number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_5	s . join ( df . drop ( string , number ) , how = string ) . reindex ( columns = df . columns )	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_6	pd . data_frame ( [ [ var ] + [ z ] for var , var in df . values for z in var ] , columns = df . columns ) out [ number ] a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_7	var = pd . data_frame ( [ [ var ] + [ z ] for var , var in zip ( df . index , df . b ) for z in var ] ) var . merge ( df , left_on = number , right_index = true ) out [ number ] number number a b number number number number [ number , number ] number number number number [ number , number ] number number number number [ number , number ] number number number number [ number , number ]	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_8	df . reindex ( df . index . repeat ( df . b . str . len ( ) ) ) . assign ( b = np . concatenate ( df . b . values ) ) out [ number ] a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_9	var = pd . data_frame ( { string [ number , number ] , string [ [ number , number ] , [ number , number ] ] } ) from collections import chain_map d = dict ( chain_map ( * map ( dict . fromkeys , var [ string ] , var [ string ] ) ) ) pd . data_frame ( list ( d . items ( ) ) , columns = var . columns [ _ number ] ) out [ number ] b a number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_10	var = np . dstack ( ( np . repeat ( df . a . values , list ( map ( len , df . b . values ) ) ) , np . concatenate ( df . b . values ) ) ) pd . data_frame ( data = var [ number ] , columns = df . columns ) a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_11	from itertools import cycle , chain l = df . values . tolist ( ) l1 = [ list ( zip ( [ var [ number ] ] , cycle ( var [ number ] ) ) if len ( [ var [ number ] ] ) > len ( var [ number ] ) else list ( zip ( cycle ( [ var [ number ] ] ) , var [ number ] ) ) ) for var in l ] pd . data_frame ( list ( chain . from_iterable ( l1 ) ) , columns = df . columns ) a b number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_12	var = pd . data_frame ( { string [ number , number ] , string [ [ number , number ] , [ number , number ] ] , string [ [ number , number ] , [ number , number ] ] } ) var out [ number ] a b c number number [ number , number ] [ number , number ] number number [ number , number ] [ number , number ]	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_13	def unnesting ( df , explode ) idx = df . index . repeat ( df [ explode [ number ] ] . str . len ( ) ) df1 = pd . concat ( [ pd . data_frame ( { var np . concatenate ( df [ var ] . values ) } ) for var in explode ] , axis = number ) df1 . index = idx return df1 . join ( df . drop ( explode , number ) , how = string ) unnesting ( df , [ string , string ] ) out [ number ] b c a number number number number number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_14	df . join ( pd . data_frame ( df . b . tolist ( ) , index = df . index ) . add_prefix ( string ) ) out [ number ] a b c b_0 b_1 number number [ number , number ] [ number , number ] number number number number [ number , number ] [ number , number ] number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_15	def unnesting ( df , explode , axis ) if axis = = number idx = df . index . repeat ( df [ explode [ number ] ] . str . len ( ) ) df1 = pd . concat ( [ pd . data_frame ( { var np . concatenate ( df [ var ] . values ) } ) for var in explode ] , axis = number ) df1 . index = idx return df1 . join ( df . drop ( explode , number ) , how = string ) else df1 = pd . concat ( [ pd . data_frame ( df [ var ] . tolist ( ) , index = df . index ) . add_prefix ( var ) for var in explode ] , axis = number ) return df1 . join ( df . drop ( explode , number ) , how = string )	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_16	unnesting ( df , [ string , string ] , axis = number ) out [ number ] b0 b1 c0 c1 a number number number number number number number number number number number number	0
Q_112	how to unnest a column in a panda data_frame into multiple row	C_112_17	def unnesting ( df , explode , axis ) if axis = = number df1 = pd . concat ( [ df [ var ] . explode ( ) for var in explode ] , axis = number ) return df1 . join ( df . drop ( explode , number ) , how = string ) else df1 = pd . concat ( [ pd . data_frame ( df [ var ] . tolist ( ) , index = df . index ) . add_prefix ( var ) for var in explode ] , axis = number ) return df1 . join ( df . drop ( explode , number ) , how = string )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_0	img [ . , [ number , number , number ] ]	1
Q_113	swap the dimension of a numpy array use ellipsis	C_113_1	np . stack ( [ img [ , , number ] , img [ , , number ] , img [ , , number ] ] , axis = number )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_2	img [ [ number , number , number ] ]	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_3	np . stack ( [ img [ number , , ] , img [ number , , ] , img [ number , , ] ] , axis = number )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_4	var = np . arange ( number ) . reshape ( number , number ) array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_5	arr [ , [ number ] ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_6	arr [ . , [ number , number , number ] ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_7	array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_8	array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_9	array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_113	swap the dimension of a numpy array use ellipsis	C_113_10	arr [ [ number , number , number ] ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_0	in [ number ] a , b , c = number , number , number in [ number ] metric1 , metric2 = number , number in [ number ] data = [ . [ number , a , [ metric1 , metric2 ] ] , . [ number , b , [ metric1 , metric2 ] ] , . [ number , b , [ metric1 , metric2 ] ] , . [ number , c , [ metric1 , metric2 ] ] , . [ number , a , [ metric1 , metric2 ] ] , . [ number , c , [ metric1 , metric2 ] ] , . ] in [ number ] in [ number ] data out [ number ] [ [ number , number , [ number , number ] ] , [ number , number , [ number , number ] ] , [ number , number , [ number , number ] ] , [ number , number , [ number , number ] ] , [ number , number , [ number , number ] ] , [ number , number , [ number , number ] ] ] in [ number ] data = np . array ( data , object ) in [ number ] rows , row_pos = np . unique ( data [ , number ] , return_inverse = true ) . cols , col_pos = np . unique ( data [ , number ] , return_inverse = true ) . pivot_table = np . zeros ( ( len ( rows ) , len ( cols ) ) , dtype = object ) in [ number ] pivot_table out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = object ) in [ number ] pivot_table [ row_pos , col_pos ] = data [ , number ] in [ number ] pivot_table out [ number ] array ( [ [ list ( [ number , number ] ) , list ( [ number , number ] ) , number ] , [ number , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , number , list ( [ number , number ] ) ] ] , dtype = object ) in [ number ] pivot_table [ row_pos , col_pos ] out [ number ] array ( [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , ) in [ number ] data [ , number ] . shape out [ number ] ( number , )	1
Q_114	numpy replace zero in numpy array with a numpy array	C_114_1	in [ number ] mask = pivot_table = = number in [ number ] mask out [ number ] array ( [ [ false , false , true ] , [ true , false , false ] , [ false , true , false ] ] ) in [ number ] pivot_table [ mask ] out [ number ] array ( [ number , number , number ] , dtype = object ) in [ number ] pivot_table [ mask ] = [ number , number ] _ value_error traceback ( most recent call last ) < ipython _ input _ number _ number a7422802 > in < module > ( ) _ > number pivot_table [ mask ] = [ number , number ] value_error num_py boolean array indexing assignment cannot assign number input values to the number output values where the mask is true	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_2	in [ number ] pivot_table [ mask ] = none in [ number ] pivot_table out [ number ] array ( [ [ list ( [ number , number ] ) , list ( [ number , number ] ) , none ] , [ none , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , none , list ( [ number , number ] ) ] ] , dtype = object )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_3	in [ number ] def fun ( x ) . if x is none return [ number , number ] . return x	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_4	in [ number ] arr1 = np . frompyfunc ( fun , number , number ) ( pivot_table ) in [ number ] arr1 out [ number ] array ( [ [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] ] , dtype = object )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_5	in [ number ] pivot_table [ mask ] = [ [ number , number ] for var in range ( number ) ] type_error num_py boolean array indexing assignment requires a number or number _ dimensional input , input has number dimensions	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_6	in [ number ] pivot_table [ np . where ( mask ) ] = [ [ number , number ] for var in range ( number ) ] in [ number ] pivot_table out [ number ] array ( [ [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] , [ list ( [ number , number ] ) , list ( [ number , number ] ) , list ( [ number , number ] ) ] ] , dtype = object )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_7	in [ number ] np . where ( mask ) out [ number ] ( array ( [ number , number , number ] ) , array ( [ number , number , number ] ) )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_8	in [ number ] pivot_table [ np . where ( mask ) ] = [ number , number ] value_error cannot copy sequence with size number to array axis with dimension number	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_9	in [ number ] p = np . stack ( pivot_table . ravel ( ) ) . reshape ( number , number , number ) in [ number ] p out [ number ] array ( [ [ [ number , number ] , [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] , [ number , number ] ] ] )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_10	in [ number ] data1 = np . array ( [ tuple ( var . tolist ( ) ) for var in data ] , string ) in [ number ] data1 out [ number ] array ( [ ( number , number , [ number , number ] ) , ( number , number , [ number , number ] ) , ( number , number , [ number , number ] ) , ( number , number , [ number , number ] ) , ( number , number , [ number , number ] ) , ( number , number , [ number , number ] ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string , ( number , ) ) ] ) in [ number ] data1 [ string ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_11	in [ number ] p = np . zeros ( ( len ( rows ) , len ( cols ) , number ) , int ) in [ number ] p [ row_pos , col_pos ] = data1 [ string ]	0
Q_114	numpy replace zero in numpy array with a numpy array	C_114_12	in [ number ] fillvalue = np . empty ( ( ) , string ) . fillvalue [ ( ) ] = [ number , number ] . in [ number ] fillvalue out [ number ] array ( list ( [ number , number ] ) , dtype = object ) in [ number ] mask out [ number ] array ( [ [ false , false , true ] , [ true , false , false ] , [ false , true , false ] ] ) in [ number ] pivot_table [ mask ] = fillvalue	0
Q_115	aggregation in panda	C_115_0	np . random . seed ( number ) df = pd . data_frame ( { string [ string , string , string , string , string , string ] , string [ string , string , string , string , string , string ] , string np . random . randint ( number , size = number ) , string np . random . randint ( number , size = number ) , string np . random . randint ( number , size = number ) } ) print ( df ) a b c d e number foo one number number number number foo two number number number number bar three number number number number foo two number number number number bar two number number number number foo one number number number	1
Q_115	aggregation in panda	C_115_1	var = df . groupby ( [ string , string ] , as_index = false ) [ string ] . sum ( ) print ( var ) a b c number bar three number number bar two number number foo one number number foo two number	0
Q_115	aggregation in panda	C_115_2	var = df . groupby ( [ string , string ] , as_index = false ) . sum ( ) print ( var ) a b c d e number bar three number number number number bar two number number number number foo one number number number number foo two number number number	0
Q_115	aggregation in panda	C_115_3	var = df . groupby ( [ string , string ] , as_index = false ) [ string , string ] . sum ( ) print ( var ) a b c d number bar three number number number bar two number number number foo one number number number foo two number number	0
Q_115	aggregation in panda	C_115_4	var = df . groupby ( [ string , string ] , as_index = false ) [ string ] . agg ( string ) print ( var ) a b c number bar three number number bar two number number foo one number number foo two number df2 = df . groupby ( [ string , string ] , as_index = false ) . agg ( string ) print ( df2 ) a b c d e number bar three number number number number bar two number number number number foo one number number number number foo two number number number	0
Q_115	aggregation in panda	C_115_5	var = ( df . groupby ( [ string , string ] ) [ string ] . agg ( [ ( string , string ) , ( string , string ) ] ) . reset_index ( ) ) print ( var ) a b average total number bar three number . number number number bar two number . number number number foo one number . number number number foo two number . number number	0
Q_115	aggregation in panda	C_115_6	var = ( df . groupby ( [ string , string ] ) . agg ( [ ( string , string ) , ( string , string ) ] ) ) print ( var ) c d e average total average total average total a b bar three number . number number number . number number number . number number two number . number number number . number number number . number number foo one number . number number number . number number number . number number two number . number number number . number number number . number number	0
Q_115	aggregation in panda	C_115_7	print ( df5 . columns ) multi_index ( levels = [ [ string , string , string ] , [ string , string ] ] , labels = [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] )	0
Q_115	aggregation in panda	C_115_8	df5 . columns = df5 . columns . map ( string . join ) df5 = df5 . reset_index ( ) print ( df5 ) a b c_average c_total d_average d_total e_average e_total number bar three number . number number number . number number number . number number number bar two number . number number number . number number number . number number number foo one number . number number number . number number number . number number number foo two number . number number number . number number number . number number	0
Q_115	aggregation in panda	C_115_9	var = df . groupby ( [ string , string ] ) . agg ( [ string , string ] ) var . columns = ( var . columns . map ( string . join ) . str . replace ( string , string ) . str . replace ( string , string ) ) var = var . reset_index ( ) print ( var ) a b c_average c_total d_average d_total e_average e_total number bar three number . number number number . number number number . number number number bar two number . number number number . number number number . number number number foo one number . number number number . number number number . number number number foo two number . number number number . number number number . number number	0
Q_115	aggregation in panda	C_115_10	var = ( df . groupby ( [ string , string ] , as_index = false ) . agg ( { string string , string string } ) . rename ( columns = { string string , string string } ) ) print ( var ) a b c_total d_average number bar three number number . number number bar two number number . number number foo one number number . number number foo two number number . number	0
Q_115	aggregation in panda	C_115_11	def func ( x ) return x . iat [ number ] + x . iat [ _ number ] df7 = ( df . groupby ( [ string , string ] , as_index = false ) . agg ( { string string , string func } ) . rename ( columns = { string string , string string } ) ) print ( df7 ) a b c_total d_sum_first_and_last number bar three number number number bar two number number number foo one number number number foo two number number	0
Q_115	aggregation in panda	C_115_12	var = df . groupby ( [ string , string ] ) [ string ] . sum ( ) print ( var ) a b bar three number two number foo one number two number name c , dtype int32	0
Q_115	aggregation in panda	C_115_13	print ( df1 . index ) multi_index ( levels = [ [ string , string ] , [ string , string , string ] ] , labels = [ [ number , number , number , number ] , [ number , number , number , number ] ] , names = [ string , string ] ) print ( type ( df1 ) ) < class string >	0
Q_115	aggregation in panda	C_115_14	var = df . groupby ( [ string , string ] , as_index = false ) [ string ] . sum ( ) print ( var ) a b c number bar three number number bar two number number foo one number number foo two number	0
Q_115	aggregation in panda	C_115_15	var = df . groupby ( [ string , string ] ) [ string ] . sum ( ) . reset_index ( ) print ( var ) a b c number bar three number number bar two number number foo one number number foo two number	0
Q_115	aggregation in panda	C_115_16	var = df . groupby ( string ) [ string ] . sum ( ) print ( var ) a bar number foo number name c , dtype int32	0
Q_115	aggregation in panda	C_115_17	print ( df2 . index ) index ( [ string , string ] , dtype = string , name = string ) print ( type ( df2 ) ) < class string >	0
Q_115	aggregation in panda	C_115_18	var = df . groupby ( string , as_index = false ) [ string ] . sum ( ) print ( var ) a c number bar number number foo number var = df . groupby ( string ) [ string ] . sum ( ) . reset_index ( ) print ( var ) a c number bar number number foo number	0
Q_115	aggregation in panda	C_115_19	var = pd . data_frame ( { string [ string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string ] , string [ number , number , number , number , number , number , number ] } ) print ( var ) a b c d number a one three number number c two one number number b three two number number b two two number number a two three number number c one two number number b three one number	0
Q_115	aggregation in panda	C_115_20	var = df . groupby ( string ) [ string ] . agg ( list ) . reset_index ( ) print ( var ) a b number a [ one , two ] number b [ three , two , three ] number c [ two , one ]	0
Q_115	aggregation in panda	C_115_21	var = df . groupby ( string ) [ string ] . apply ( list ) . reset_index ( ) print ( var ) a b number a [ one , two ] number b [ three , two , three ] number c [ two , one ]	0
Q_115	aggregation in panda	C_115_22	var = df . groupby ( string ) [ string ] . agg ( string . join ) . reset_index ( ) print ( var ) a b number a one , two number b three , two , three number c two , one	0
Q_115	aggregation in panda	C_115_23	var = ( df . groupby ( string ) [ string ] . agg ( lambda x string . join ( x . astype ( str ) ) ) . reset_index ( ) ) print ( var ) a d number a number , number number b number , number , number number c number , number	0
Q_115	aggregation in panda	C_115_24	var = ( df . assign ( d = df [ string ] . astype ( str ) ) . groupby ( string ) [ string ] . agg ( string . join ) . reset_index ( ) ) print ( var ) a d number a number , number number b number , number , number number c number , number	0
Q_115	aggregation in panda	C_115_25	var = df . groupby ( string ) . agg ( string . join ) . reset_index ( ) print ( var ) a b c number a one , two three , three number b three , two , three two , two , one number c two , one one , two	0
Q_115	aggregation in panda	C_115_26	var = ( df . groupby ( string ) . agg ( lambda x string . join ( x . astype ( str ) ) ) . reset_index ( ) ) print ( var ) a b c d number a one , two three , three number , number number b three , two , three two , two , one number , number , number number c two , one one , two number , number	0
Q_115	aggregation in panda	C_115_27	var = pd . data_frame ( { string [ string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string ] , string [ string , np . nan , np . nan , string , string , string , string ] , string [ np . nan , number , number , number , number , np . nan , number ] } ) print ( var ) a b c d number a one three na_n number c two na_n number . number number b three na_n number . number number b two two number . number number a two three number . number number c one two na_n number b three one number . number	0
Q_115	aggregation in panda	C_115_28	var = df . groupby ( string ) . size ( ) . reset_index ( name = string ) print ( var ) a count number a number number b number number c number	0
Q_115	aggregation in panda	C_115_29	var = df . groupby ( string ) [ string ] . count ( ) . reset_index ( name = string ) print ( var ) a count number a number number b number number c number	0
Q_115	aggregation in panda	C_115_30	var = df . groupby ( string ) . count ( ) . add_suffix ( string ) . reset_index ( ) print ( var ) a b_count c_count d_count number a number number number number b number number number number c number number number	0
Q_115	aggregation in panda	C_115_31	var = ( df [ string ] . value_counts ( ) . rename_axis ( string ) . reset_index ( name = string ) ) print ( var ) a count number b number number a number number c number	0
Q_115	aggregation in panda	C_115_32	var = ( df [ string ] . value_counts ( ) . sort_index ( ) . rename_axis ( string ) . reset_index ( name = string ) ) print ( var ) a count number a number number b number number c number	0
Q_115	aggregation in panda	C_115_33	np . random . seed ( number ) df = pd . data_frame ( { string [ string , string , string , string , string , string ] , string [ string , string , string , string , string , string ] , string np . random . randint ( number , size = number ) , string np . random . randint ( number , size = number ) } ) print ( df ) a b c d number foo one number number number foo two number number number bar three number number number foo two number number number bar two number number number foo one number number df [ string ] = df . groupby ( string ) [ string ] . transform ( string ) df [ string ] = df . groupby ( [ string , string ] ) [ string ] . transform ( string ) df [ [ string , string ] ] = df . groupby ( string ) [ string , string ] . transform ( string ) df [ [ string , string ] ] = df . groupby ( [ string , string ] ) [ string , string ] . transform ( string ) print ( df ) a b c d c1 c2 c3 d3 c4 d4 number foo one number number number number number number number number number foo two number number number number number number number number number bar three number number number number number number number number number foo two number number number number number number number number number bar two number number number number number number number number number foo one number number number number number number number number	0
Q_116	scrapy python get item from yield request	C_116_0	"response _ > response _ > response < _ string _ > response < _ "" aggregating _ > response v data out"	1
Q_116	scrapy python get item from yield request	C_116_1	response _ > response _ > response _ > response > data out to item_pipeline ( exporters ) _ > response _ > response _ > response > data out to item_pipeline _ > response _ > response > data out to item_pipeline > response > error	0
Q_116	scrapy python get item from yield request	C_116_2	new promise ( function ( resolve , reject ) { / / code flow set_timeout ( ( ) = > resolve ( number ) , number ) / / } ) . then ( function ( result ) { / / v alert ( result ) / / return result * number / / } ) . then ( function ( result ) { / / alert ( result ) / / return result * number / / v } )	0
Q_116	scrapy python get item from yield request	C_116_3	scrapy . request ( url , callback = self . parse ,	0
Q_116	scrapy python get item from yield request	C_116_4	_ > _ flow of data _ > _ > response _ > response _ > data _ > req / response data _ > more_data _ > yield item to item_pipeline ( exporters ) data _ > req / response _ > more_data _ > yield item to item_pipeline number . gen number . gen number . gen	0
Q_116	scrapy python get item from yield request	C_116_5	def parse ( self , response ) if response . xpath ( string next string ) . extract_first ( ) yield scrapy . request ( response . urljoin ( next_page_url ) )	0
Q_116	scrapy python get item from yield request	C_116_6	def parse ( self , response ) if response . xpath ( string next string ) . extract_first ( ) request = scrapy . request ( response . urljoin ( next_page_url ) ) request . callback = self . parse2	0
Q_116	scrapy python get item from yield request	C_116_7	def parse ( self , response ) data = response . meta . get ( string , none ) if not data	0
Q_116	scrapy python get item from yield request	C_116_8	def start_requests ( self ) var = string request = scrapy . request ( var , callback = self . parse1 ) request . meta [ string ] = [ string , string , string , ] yield request def parse1 ( self , response ) urls = response . meta . get ( string ) data = response . meta . get ( string ) if not data data = { }	0
Q_116	scrapy python get item from yield request	C_116_9	inline_requests def parse ( self , response ) urls = [ response . url ] for var in range ( number ) next_url = response . urljoin ( string var ) try next_resp = yield request ( next_url , meta = { string true } ) urls . append ( next_resp . url ) except exception self . logger . info ( string , var , exc_info = true ) yield { string urls }	0
Q_116	scrapy python get item from yield request	C_116_10	var = { string number , } data = { } def parse1 ( self , response )	0
Q_116	scrapy python get item from yield request	C_116_11	from scrapy import signals class signals_spider ( spider ) data = { } classmethod def from_crawler ( cls , crawler , * args , * * kwargs ) spider = super ( spider , cls ) . from_crawler ( crawler , * args , * * kwargs ) crawler . signals . connect ( spider . idle , signal = signals . spider_idle ) return spider def idle ( self , spider ) if self . ima_done_now return self . crawler . engine . schedule ( self . finalize_crawl ( ) , spider ) raise dont_close_spider def finalize_crawl ( self ) self . ima_done_now = true	0
Q_117	maximum allow dimention exceed	C_117_0	var = np . array ( list ( artifice ) , dtype = np . uint8 ) . reshape ( number , number )	1
Q_117	maximum allow dimention exceed	C_117_1	plt . imsave ( string , d , cmap = cm . coolwarm )	0
Q_117	maximum allow dimention exceed	C_117_2	from math import ceil byte_genesis = genesis . to_bytes ( ceil ( genesis . bit_length ( ) / number ) , string )	0
Q_117	maximum allow dimention exceed	C_117_3	var = np . frombuffer ( byte_genesis , dtype = np . uint8 ) [ number ] . reshape ( number , number )	0
Q_117	maximum allow dimention exceed	C_117_4	var = np . frombuffer ( byte_genesis [ number ] , dtype = np . uint8 ) . reshape ( number , number )	0
Q_117	maximum allow dimention exceed	C_117_5	plt . imsave ( string , img , cmap = cm . viridis )	0
Q_117	maximum allow dimention exceed	C_117_6	var = np . frombuffer ( byte_genesis , dtype = np . uint8 ) [ number ]	0
Q_117	maximum allow dimention exceed	C_117_7	var = np . empty ( ( number , number ) , dtype = np . uint8 ) var . ravel ( ) [ number ] = np . bitwise_and ( temp number , number ) var . ravel ( ) [ number number ] = np . bitwise_and ( temp , number )	0
Q_117	maximum allow dimention exceed	C_117_8	plt . imsave ( string , img , cmap = cm . jet )	0
Q_117	maximum allow dimention exceed	C_117_9	var = temp . reshape ( number , number , number ) plt . imsave ( string , var )	0
Q_117	maximum allow dimention exceed	C_117_10	var = np . rollaxis ( temp . reshape ( number , number , number ) , number , number ) plt . imsave ( string , var )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_0	var = tfidf_test . select ( col ( string ) . alias ( string ) ) . limit ( number ) tf_idf_fr . cross_join ( var )	1
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_1	from pyspark . ml . linalg import dense_vector , sparse_vector , vector , vectors , vector_udt from pyspark . sql . functions import udf def vector_lit ( v ) assert isinstance ( v , vector ) return udf ( lambda v , vector_udt ( ) ) ( )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_2	spark . range ( number ) . select ( vector_lit ( vectors . sparse ( number , [ number , number ] , [ _ number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_3	+ _ + ref + _ + ( number , [ number , number ] , [ _ number . number , number . number ] ) + _ +	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_4	spark . range ( number ) . select ( vector_lit ( vectors . dense ( [ number , number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_5	+ _ + ref + _ + [ number . number , number . number , number . number ] + _ +	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_6	import json from pyspark . sql . functions import from_json , lit from pyspark . sql . types import struct_type , struct_field def as_column ( v ) assert isinstance ( v , vector ) if isinstance ( v , dense_vector ) j = lit ( json . dumps ( { string { string number , string v . values . tolist ( ) } } ) ) else j = lit ( json . dumps ( { string { string number , string v . size , string v . indices . tolist ( ) , string v . values . tolist ( ) } } ) ) return from_json ( j , struct_type ( [ struct_field ( string , vector_udt ( ) ) ] ) ) [ string ]	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_7	spark . range ( number ) . select ( as_column ( vectors . sparse ( number , [ number , number ] , [ _ number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_8	+ _ + ref + _ + ( number , [ number , number ] , [ _ number . number , number . number ] ) + _ +	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_9	spark . range ( number ) . select ( as_column ( vectors . dense ( [ number , number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_118	py_spark insert a constant sparse_vector in a dataframe column	C_118_10	+ _ + ref + _ + [ number . number , number . number , number . number ] + _ +	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_0	var = pd . read_csv ( string , header = none )	1
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_1	var = pd . to_timedelta ( df [ number ] ) df [ string ] = var . mask ( var . diff ( ) . lt ( pd . timedelta ( number ) ) . cumsum ( ) . gt ( number ) , var + pd . timedelta ( number , string ) ) df [ string ] = ( df [ string ] . dt . total_seconds ( ) * number ) . astype ( int )	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_2	print ( df ) number new newint number number number number number . number number days number number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number number . number number days number number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number number . number number days number number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number number number . number number days number number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number number . number number days number number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number number number number number number . number number days number number number number . number number	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_3	print ( df ) number number number number number . number number number number number . number number number number number . number number number number number . number number number number number number . number number number number number . number number number number number . number number number number number . number number number number number . number number number number number . number number number number number . number number number number number . number number number number number number . number number number number number . number number number number number . number number number number number . number	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_4	var = pd . to_timedelta ( df [ number ] ) days = pd . to_timedelta ( var . diff ( ) . lt ( pd . timedelta ( number ) ) . cumsum ( ) , unit = string ) df [ string ] = var + days df [ string ] = ( df [ string ] . dt . total_seconds ( ) * number ) . astype ( int ) print ( df ) number new newint number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number number . number number days number number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number number . number number days number number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number number number number number . number number days number number number . number number	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_5	print ( td . diff ( ) ) number na_t number number number number number number number number . number number number number number number . number number number _ number days + number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number . number number number number number number number number number number . number number number number number number . number number number _ number days + number number number number . number number number number number number . number number number number number number . number number number number number number . number name number , dtype timedelta64 [ ns ]	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_6	print ( td . diff ( ) . lt ( pd . timedelta ( number ) ) ) number false number false number false number false number true number false number false number false number false number false number false number false number true number false number false number false name number , dtype bool	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_7	print ( td . diff ( ) . lt ( pd . timedelta ( number ) ) . cumsum ( ) ) number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number name number , dtype int32	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_8	var = pd . to_timedelta ( td . diff ( ) . lt ( pd . timedelta ( number ) ) . cumsum ( ) , unit = string ) print ( var ) number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var number number var name number , dtype timedelta64 [ ns ]	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_9	. df [ string ] = df [ string ] * number + df [ string ] * number + df [ string ] * number + df [ string ]	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_10	var = df [ string ] . diff ( ) . lt ( number ) . cumsum ( ) * number * number * number * number df [ string ] = var + df [ string ]	0
Q_119	how to add tagint hour when time rollover from use python and panda	C_119_11	print ( df ) number hours minutes seconds milliseconds total time ( ms ) number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number number number number number . number number number number number number newint number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_120	implement a generator for sequence of lookahead pair	C_120_0	from itertools import zip_longest seq = [ number , number , number , number ] print ( list ( zip ( seq , seq [ number ] ) ) ) print ( list ( zip_longest ( seq , seq [ number ] ) ) )	1
Q_120	implement a generator for sequence of lookahead pair	C_120_1	[ ( number , number ) , ( number , number ) , ( number , number ) ] [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , none ) ]	0
Q_120	implement a generator for sequence of lookahead pair	C_120_2	print ( list ( zip ( * [ ( number , number ) , ( number , number ) , ( number , number ) ] ) ) )	0
Q_120	implement a generator for sequence of lookahead pair	C_120_3	[ ( number , number , number ) , ( number , number , number ) ]	0
Q_120	implement a generator for sequence of lookahead pair	C_120_4	from itertools import zip_longest seq = [ number , number , number , number ] one_step_ahead = zip_longest ( seq , seq [ number ] ) two_steps_ahead = zip_longest ( seq , seq [ number ] )	0
Q_120	implement a generator for sequence of lookahead pair	C_120_5	[ ( ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , none ) ) , ( ( number , none ) , ( number , none ) ) ]	0
Q_120	implement a generator for sequence of lookahead pair	C_120_6	from itertools import zip_longest seq = [ number , number , number , number ] pairs = [ ] for var in range ( number ) x_step_ahead = zip_longest ( seq , seq [ var ] ) pairs . append ( x_step_ahead ) merged = zip ( * pairs ) print ( list ( merged ) )	0
Q_120	implement a generator for sequence of lookahead pair	C_120_7	[ ( ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , none ) ) , ( ( number , none ) , ( number , none ) ) ]	0
Q_120	implement a generator for sequence of lookahead pair	C_120_8	def pairs_generator ( ) for var in range ( number ) yield zip_longest ( seq , seq [ var ] ) pairs = pairs_generator ( )	0
Q_120	implement a generator for sequence of lookahead pair	C_120_9	solution implementation from itertools import zip_longest , islice def fill_with ( iterator , value , times ) string string string for var in range ( times ) yield value yield from iterator def pairs ( seq , distance , reverse = false , empty = none ) string string string if reverse return zip ( seq , fill_with ( seq , empty , distance ) ) else return zip_longest ( seq , islice ( seq , distance , none ) , fillvalue = empty ) def look_backward ( seq , distance , empty = none ) string string string return zip ( * ( pairs ( seq , i , empty = empty , reverse = true ) for i in range ( distance , number , _ number ) ) ) def look_forward ( seq , distance , empty = none ) string string string return zip ( * ( pairs ( seq , i + number , empty = empty ) for i in range ( distance ) ) ) def pairs_lookahead ( seq , behind = number , forward = number , empty = none ) string string string backward_result = look_backward ( seq , behind , empty = empty ) forward_result = look_forward ( seq , forward , empty = empty ) if behind < number and forward > number return forward_result if behind > number and forward < number return backward_result return [ a + b for a , b in zip ( backward_result , forward_result ) ]	0
Q_120	implement a generator for sequence of lookahead pair	C_120_10	var = [ number , number , number , number ] result = pairs_lookahead ( var , behind = number , forward = number , empty = string ) print ( list ( result ) ) result = pairs_lookahead ( var , behind = number , forward = number , empty = string ) print ( list ( result ) ) result = pairs_lookahead ( var , behind = number , forward = number , empty = string ) print ( list ( result ) )	0
Q_120	implement a generator for sequence of lookahead pair	C_120_11	[ ( ( number , string ) , ( number , string ) , ( number , number ) ) , ( ( number , string ) , ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) , ( number , string ) ) ] [ ( ( number , string ) , ( number , string ) ) , ( ( number , string ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) ) , ( ( number , number ) , ( number , number ) ) ] [ ( ( number , number ) , ) , ( ( number , number ) , ) , ( ( number , number ) , ) , ( ( number , string ) , ) ]	0
Q_121	how to short_circuit flatten in numpy append	C_121_0	in [ number ] class my_thing . pass . . x = numpy . array ( [ ] , dtype = my_thing , ndmin = number ) . temp = [ my_thing ( ) for var in range ( number ) ] . x = numpy . append ( x , temp ) in [ number ] x out [ number ] array ( [ < _main_ . my_thing object at number > , < _main_ . my_thing object at number > , < _main_ . my_thing object at number > , < _main_ . my_thing object at number > , < _main_ . my_thing object at number > ] , dtype = object )	1
Q_121	how to short_circuit flatten in numpy append	C_121_1	def append ( arr , values , axis = none ) arr = asanyarray ( arr ) if axis is none if arr . ndim = number arr = arr . ravel ( ) values = ravel ( values ) axis = arr . ndim _ number return concatenate ( ( arr , values ) , axis = axis )	0
Q_121	how to short_circuit flatten in numpy append	C_121_2	in [ number ] x = numpy . array ( [ ] , dtype = my_thing , ndmin = number ) in [ number ] x . shape out [ number ] ( number , ) in [ number ] np . array ( temp ) . shape out [ number ] ( number , ) in [ number ] np . concatenate ( ( x , temp ) ) . shape out [ number ] ( number , )	0
Q_121	how to short_circuit flatten in numpy append	C_121_3	in [ number ] my_thing . _repr_ = lambda self string	0
Q_121	how to short_circuit flatten in numpy append	C_121_4	in [ number ] temp1 = np . array ( [ ( my_thing ( ) , number ) for var in range ( number ) ] )	0
Q_121	how to short_circuit flatten in numpy append	C_121_5	in [ number ] np . append ( x , temp1 ) out [ number ] array ( [ mything , number , mything , number , mything , number ] , dtype = object )	0
Q_121	how to short_circuit flatten in numpy append	C_121_6	in [ number ] temp = np . array ( [ my_thing ( number ) for var in range ( number ) ] ) in [ number ] temp out [ number ] array ( [ [ [ < _main_ . my_thing object at number > , number ] ] , [ [ < _main_ . my_thing object at number > , number ] ] , [ [ < _main_ . my_thing object at number > , number ] ] ] , dtype = object ) in [ number ] temp . shape out [ number ] ( number , number , number )	0
Q_121	how to short_circuit flatten in numpy append	C_121_7	in [ number ] my_thing . _repr_ = lambda self string in [ number ] temp out [ number ] array ( [ [ [ mything , number ] ] , [ [ mything , number ] ] , [ [ mything , number ] ] ] , dtype = object ) in [ number ] np . append ( x , temp ) out [ number ] array ( [ mything , number , mything , number , mything , number ] , dtype = object )	0
Q_121	how to short_circuit flatten in numpy append	C_121_8	value_error all the input arrays must have same number of dimensions	0
Q_121	how to short_circuit flatten in numpy append	C_121_9	in [ number ] [ my_thing ( number ) for var in range ( number ) ] out [ number ] [ mything , mything , mything ] in [ number ] np . array ( var ) out [ number ] array ( [ [ [ mything , number ] ] , [ [ mything , number ] ] , [ [ mything , number ] ] ] , dtype = object ) in [ number ] [ my_thing ( i ) for i in range ( number ) ]	0
Q_121	how to short_circuit flatten in numpy append	C_121_10	in [ number ] temp = np . empty ( number , object ) in [ number ] temp out [ number ] array ( [ none , none , none , none , none ] , dtype = object ) in [ number ] for var in range ( number ) . temp [ var ] = my_thing ( number ) . in [ number ] temp out [ number ] array ( [ mything , mything , mything , none , none ] , dtype = object )	0
Q_121	how to short_circuit flatten in numpy append	C_121_11	in [ number ] temp [ ] = [ my_thing ( number ) for var in range ( number ) ] in [ number ] temp out [ number ] array ( [ mything , mything , mything , mything , mything ] , dtype = object )	0
Q_121	how to short_circuit flatten in numpy append	C_121_12	in [ number ] np . concatenate ( [ temp , temp , temp ] ) out [ number ] array ( [ mything , mything , mything , mything , mything , mything , mything , mything , mything , mything , mything , mything , mything , mything , mything ] , dtype = object ) in [ number ] np . vstack ( [ temp , temp , temp ] ) out [ number ] array ( [ [ mything , mything , mything , mything , mything ] , [ mything , mything , mything , mything , mything ] , [ mything , mything , mything , mything , mything ] ] , dtype = object ) in [ number ] np . append ( x , temp ) out [ number ] array ( [ mything , mything , mything , mything , mything ] , dtype = object )	0
Q_122	how to create a transition matrix for a column in python	C_122_0	var = string string string import pandas as pd b = [ int ( var [ number ] . strip ( ) ) for var in var . split ( string ) if string not in var ] df = pd . data_frame ( { string b } )	1
Q_122	how to create a transition matrix for a column in python	C_122_1	var = sorted ( df [ string ] . unique ( ) ) print ( var ) [ number , number , number , number , number , number , number , number , number ]	0
Q_122	how to create a transition matrix for a column in python	C_122_2	df [ string ] = df . shift ( _ number ) print ( df ) b c number number number . number number number number . number number number number . number number number number . number	0
Q_122	how to create a transition matrix for a column in python	C_122_3	var = df . groupby ( [ string , string ] ) counts = { var [ number ] ( len ( var [ number ] ) if var [ number ] [ number ] = var [ number ] [ number ] else number ) for var in var }	0
Q_122	how to create a transition matrix for a column in python	C_122_4	var = pd . data_frame ( ) for var in numbers var [ var ] = pd . series ( [ counts . get ( ( var , y ) , number ) for y in numbers ] , index = numbers ) print ( var )	0
Q_122	how to create a transition matrix for a column in python	C_122_5	number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_122	how to create a transition matrix for a column in python	C_122_6	var = string string string import pandas as pd b = [ int ( var [ number ] . strip ( ) ) for var in var . split ( string ) if string not in var ] df = pd . data_frame ( { string b } ) numbers = sorted ( df [ string ] . unique ( ) ) print ( numbers ) df [ string ] = df . shift ( _ number ) print ( df ) groups = df . groupby ( [ string , string ] ) counts = { i [ number ] ( len ( i [ number ] ) if i [ number ] [ number ] = i [ number ] [ number ] else number ) for i in groups }	0
Q_122	how to create a transition matrix for a column in python	C_122_7	var = { var [ number ] ( len ( var [ number ] ) if var [ number ] [ number ] = var [ number ] [ number ] else number ) for var in groups }	0
Q_122	how to create a transition matrix for a column in python	C_122_8	var = { } for var , var in groups if var [ number ] = var [ number ]	0
Q_122	how to create a transition matrix for a column in python	C_122_9	var = { } for var , var in groups if var [ number ] = var [ number ]	0
Q_122	how to create a transition matrix for a column in python	C_122_10	var = { } for var , var in groups if var [ number ] = var [ number ]	0
Q_123	convert from list comprehension back to for loop	C_123_0	{ i [ np . random . randint ( mins [ var ] , maxs [ var ] ) for var in range ( len ( mins ) ) ] for i in range ( k ) }	1
Q_123	convert from list comprehension back to for loop	C_123_1	var = { } for var in range ( k ) temp = [ ]	0
Q_123	convert from list comprehension back to for loop	C_123_2	var = { } for var in range ( k ) temp = [ ] for t in range ( len ( mins ) ) temp . append ( np . random . randint ( mins [ t ] , maxs [ t ] ) ) var [ var ] = temp	0
Q_123	convert from list comprehension back to for loop	C_123_3	import numpy as np mins = [ number , number , number , number ] maxs = [ number , number , number , number ] k = number test = [ ] test = { i [ np . random . randint ( mins [ var ] , maxs [ var ] ) for var in range ( len ( mins ) ) ] for i in range ( k ) } print ( test ) result = { } for i in range ( k ) temp = [ ] for var in range ( len ( mins ) ) temp . append ( np . random . randint ( mins [ var ] , maxs [ var ] ) ) result [ i ] = temp print ( result )	0
Q_123	convert from list comprehension back to for loop	C_123_4	{ number [ number , number , number , number ] , number [ number , number , number , number ] , number [ number , number , number , number ] } { number [ number , number , number , number ] , number [ number , number , number , number ] , number [ number , number , number , number ] }	0
Q_123	convert from list comprehension back to for loop	C_123_5	var = [ distances . index ( var ) for var in distances if var [ _ number ] = = c ]	0
Q_123	convert from list comprehension back to for loop	C_123_6	for var in distances if var [ _ number ] = = c	0
Q_123	convert from list comprehension back to for loop	C_123_7	for var in distances if var [ _ number ] = = c	0
Q_123	convert from list comprehension back to for loop	C_123_8	var = [ ] for var in distances if var [ _ number ] = = c var . append ( distances . index ( var ) )	0
Q_123	convert from list comprehension back to for loop	C_123_9	for var in range ( k ) indices = [ distances . index ( row ) for row in distances if row [ _ number ] = = var ] test [ var ] = x . iloc [ indices ] . mean ( ) . values	0
Q_123	convert from list comprehension back to for loop	C_123_10	for var in range ( k ) indices = [ ] for row in distances if row [ _ number ] = = var indices . append ( distances . index ( row ) ) test [ var ] = x . iloc [ indices ] . mean ( ) . values	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_0	in [ number ] arr = np . arange ( number ) . reshape ( number , number ) in [ number ] arr out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] coord = [ [ number , number ] , [ number , number ] ] in [ number ] arr [ coord ] future_warning using a non _ tuple sequence for var indexing is deprecated use arr [ tuple ( seq ) ] instead of arr [ seq ] . in the future this will be interpreted as an array index , arr [ np . array ( seq ) ] , which will result either in an error or a different result . out [ number ] array ( [ number , number ] )	1
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_1	in [ number ] coord = ( [ number , number ] , [ number , number ] ) in [ number ] arr [ coord ] out [ number ] array ( [ number , number ] ) in [ number ] arr [ [ number , number ] , [ number , number ] ] out [ number ] array ( [ number , number ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_2	in [ number ] coord = [ [ number , number ] ] in [ number ] arr [ coord ] future_warning using a non _ tuple sequence for var indexing is deprecated use arr [ tuple ( seq ) ] instead of arr [ seq ] . in the future this will be interpreted as an array index , arr [ np . array ( seq ) ] , which will result either in an error or a different result . out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] coord = ( [ number , number ] , )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_3	in [ number ] coord = np . array ( [ [ number , number ] , [ number , number ] ] ) in [ number ] arr [ coord ] out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_4	in [ number ] coord = [ [ number , number ] , [ number , number ] ] in [ number ] arr [ coord , ] out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_5	in [ number ] coord = [ [ number , number ] ] in [ number ] arr [ coord , ] out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] ) in [ number ] _ . shape out [ number ] ( number , number , number )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_6	in [ number ] coord = np . array ( [ [ number , number ] , [ number , number ] ] ) in [ number ] coord out [ number ] array ( [ [ number , number ] , [ number , number ] ] ) in [ number ] tuple ( coord . t ) out [ number ] ( array ( [ number , number ] ) , array ( [ number , number ] ) ) in [ number ] arr [ tuple ( coord . t ) ] out [ number ] array ( [ number , number ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_7	in [ number ] coord = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] ) in [ number ] arr [ tuple ( coord . t ) ] out [ number ] array ( [ number , number , number , number ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_8	in [ number ] arr number = = number out [ number ] array ( [ [ true , false , false , false , true ] , [ false , false , false , true , false ] , [ false , false , true , false , false ] , [ false , true , false , false , false ] , [ true , false , false , false , true ] ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_9	in [ number ] np . where ( arr number = = number ) out [ number ] ( array ( [ number , number , number , number , number , number , number ] ) , array ( [ number , number , number , number , number , number , number ] ) ) in [ number ] arr [ _ ] out [ number ] array ( [ number , number , number , number , number , number , number ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_10	in [ number ] np . argwhere ( arr number = = number ) out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_124	how do i handle weird index behavior with reference coordinate of numpy array	C_124_11	in [ number ] [ arr [ var , var ] for var , var in np . argwhere ( arr number = = number ) ] out [ number ] [ number , number , number , number , number , number , number ]	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_0	import math import numpy as np import pandas as pd	1
Q_125	calculate difference in minute base on tagint minute interval	C_125_1	id half_hour_bucket clock_in_time clock_out_time rate mins number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number number . number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number . number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number number . number	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_2	def upsample_list ( x ) multiplier = math . ceil ( x . total_seconds ( ) / ( number * number ) ) return list ( range ( multiplier ) )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_3	df [ string ] = df . mins . apply ( upsample_list )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_4	var = df . apply ( lambda x pd . series ( x [ string ] ) , axis = number ) . stack ( ) . reset_index ( level = number , drop = true ) var . name = string	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_5	var = var . drop ( string , axis = number ) . join ( s , how = string ) . drop ( string , axis = number )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_6	id half_hour_bucket clock_in_time clock_out_time rate mins number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_7	var = var . reset_index ( drop = true )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_8	var = var . mask ( var . duplicated ( ) )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_9	id half_hour_bucket clock_in_time clock_out_time rate mins number number . number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number number . number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number . number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number number number number number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t number na_n na_t na_t na_t na_n na_t	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_10	df [ [ string , string ] ] = df [ [ string , string ] ] . ffill ( )	0
Q_125	calculate difference in minute base on tagint minute interval	C_125_11	id half_hour_bucket clock_in_time clock_out_time rate mins number number . number number _ number number _ number number number number number number _ number number _ number number number number number _ number number _ number number number number number . number number number number number number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number number . number number _ number number _ number number number number number number _ number number _ number number number number number _ number number _ number number number number number . number number number number number number . number number _ number number _ number number number number number number _ number number _ number number number number number _ number number _ number number number number number . number number number number number number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t number na_n number _ number number _ number number number number number na_t na_t number . number na_t	0
Q_126	find nth term of a sequence in le than o	C_126_0	g ( n ) = x * g ( n _ number ) + y * g ( n _ number ) + z * g ( n _ number ) + w	1
Q_126	find nth term of a sequence in le than o	C_126_1	n + n = x ( n _ number n + n ) + y ( n _ number n + number n _ number ) + z * ( n _ number n + number n _ number ) + w = n ( x + y + z ) + n ( _ number x _ number y _ number z ) + n ( x + number y + number z ) + ( w _ number y _ number z )	0
Q_126	find nth term of a sequence in le than o	C_126_2	x + y + z = number _ number x _ number y _ number z = number x + number y + number z = number w _ number y _ number z = number	0
Q_126	find nth term of a sequence in le than o	C_126_3	var = number y = _ number z = number w = number	0
Q_126	find nth term of a sequence in le than o	C_126_4	a b c number number number number f ( n _ number ) f ( n ) number number number number number number number f ( n _ number ) f ( n _ number ) number number number number number number number f ( n _ number ) f ( n _ number ) number number number number _ number number number x g ( n ) = g ( n + number ) number number number number number number number g ( n _ number ) g ( n ) number number number number number number number g ( n _ number ) g ( n _ number ) number number number number number number number number number	0
Q_126	find nth term of a sequence in le than o	C_126_5	[ n _ number ] a b c number number number number f ( number ) f ( n ) f ( number ) r number number number number number number number f ( number ) f ( n _ number ) f ( number ) q number number number number number number number f ( number ) f ( n _ number ) f ( number ) p number number number number _ number number number x g ( number ) = g ( n + number ) , g ( number ) = number number number number number number number number g ( number ) g ( n ) g ( number ) number number number number number number number number g ( number ) g ( n _ number ) g ( number ) number number number number number number number number number number number number	0
Q_126	find nth term of a sequence in le than o	C_126_6	_ number number = = _ number / / java _ number = number ( mod number ) / / mathematical modulus	0
Q_126	find nth term of a sequence in le than o	C_126_7	long mod ( long b , long a ) { / / computes a mod b / / assumes that b is positive return ( b + ( a b ) ) b }	0
Q_126	find nth term of a sequence in le than o	C_126_8	long recurrence_original ( long a , long b , long c , long p , long q , long r , long n , long m / / number ^ number + number or whatever ) { / / base cases if ( n = = number ) return p if ( n = = number ) return q if ( n = = number ) return r long f0 , f1 , f2 f0 = p f1 = q f2 = r for ( long i = number i < = n i + + ) { long f3 = mod ( m , mod ( m , a * f2 ) + mod ( m , b * f1 ) + mod ( m , c * f0 ) + mod ( m , mod ( m , i ) * mod ( m , i ) ) * mod ( m , i + number ) ) f0 = f1 f1 = f2 f2 = f3 } return f2 }	0
Q_126	find nth term of a sequence in le than o	C_126_9	long [ ] [ ] matrix_create ( int n ) { return new long [ n ] [ n ] } void matrix_multiply ( int n , long m , long [ ] [ ] c , long [ ] [ ] a , long [ ] [ ] b ) { for ( int i = number i < n i + + ) { for ( int j = number j < n j + + ) { long s = number for ( int k = number k < n k + + ) s = mod ( m , s + mod ( m , a [ i ] [ k ] * b [ k ] [ j ] ) ) c [ i ] [ j ] = s } } } void matrix_pow ( int n , long m , long p , long [ ] [ ] y , long [ ] [ ] x ) { / / swap matrices long [ ] [ ] a = matrix_create ( n ) long [ ] [ ] b = matrix_create ( n ) long [ ] [ ] c = matrix_create ( n ) / / initialize accumulator to identity for ( int i = number i < n i + + ) a [ i ] [ i ] = number / / initialize base to original matrix for ( int i = number i < n i + + ) for ( int j = number j < n j + + ) b [ i ] [ j ] = x [ i ] [ j ] / / exponentiation by squaring / / there are better algorithms , but this is the easiest to implement / / and is still o ( log n ) long [ ] [ ] t = null for ( long s = p s > number s / = number ) { if ( s number = = number ) { matrix_multiply ( n , m , c , a , b ) t = c c = a a = t } matrix_multiply ( n , m , c , b , b ) t = c c = b b = t } / / write to output for ( int i = number i < n i + + ) for ( int j = number j < n j + + ) y [ i ] [ j ] = a [ i ] [ j ] }	0
Q_126	find nth term of a sequence in le than o	C_126_10	long recurrence_matrix ( long a , long b , long c , long p , long q , long r , long n , long m ) { if ( n = = number ) return p if ( n = = number ) return q if ( n = = number ) return r / / original recurrence matrix long [ ] [ ] mat = matrix_create ( number ) mat [ number ] [ number ] = a mat [ number ] [ number ] = b mat [ number ] [ number ] = c mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = _ number mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = number mat [ number ] [ number ] = number / / exponentiate long [ ] [ ] res = matrix_create ( number ) matrix_pow ( number , m , n _ number , res , mat ) / / multiply the first row with the initial vector return mod ( m , mod ( m , res [ number ] [ number ] ) + mod ( m , res [ number ] [ number ] * r ) + mod ( m , res [ number ] [ number ] * q ) + mod ( m , res [ number ] [ number ] * p ) + mod ( m , res [ number ] [ number ] * number ) + mod ( m , res [ number ] [ number ] * number ) + mod ( m , res [ number ] [ number ] * number ) ) }	0
Q_126	find nth term of a sequence in le than o	C_126_11	n time ( s ) _ number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number number ^ number number . number	0
Q_126	find nth term of a sequence in le than o	C_126_12	n time ( s ) _ number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number number ^ number number . number	0
Q_127	why be panda data frame return everything as a string	C_127_0	title , tissue area number , tissue area number activation path , string , string inhibition path , string , string transcription factors , string p19793 string p04150 string q16665 string p40763 string , string p19793 string p04150 string q16665 string p40763 string undetermined effect , string , string	1
Q_127	why be panda data frame return everything as a string	C_127_1	def str_to_list ( src ) return re . split ( string , src [ number _ number ] )	0
Q_127	why be panda data frame return everything as a string	C_127_2	var = pd . read_csv ( string , converters = { number str_to_list , number str_to_list } )	0
Q_127	why be panda data frame return everything as a string	C_127_3	title tissue area number tissue area number number activation path [ number . number , number . number , number . number ] [ number . number , number . number , number . number ] number inhibition path [ number . number , number . number , number . number ] [ number . number , number . number , number . number ] number transcription factors [ string , string , string , string ] [ string , string , string , string ] number undetermined effect [ number . number , number . number , number . number ] [ number . number , number . number , number . number ]	0
Q_127	why be panda data frame return everything as a string	C_127_4	var = df . set_index ( string ) . unstack ( )	0
Q_127	why be panda data frame return everything as a string	C_127_5	title tissue area number activation path [ number . number , number . number , number . number ] inhibition path [ number . number , number . number , number . number ] transcription factors [ string , string , string , string ] undetermined effect [ number . number , number . number , number . number ] tissue area number activation path [ number . number , number . number , number . number ] inhibition path [ number . number , number . number , number . number ] transcription factors [ string , string , string , string ] undetermined effect [ number . number , number . number , number . number ] dtype object	0
Q_127	why be panda data frame return everything as a string	C_127_6	var = xx . apply ( pd . series ) . stack ( )	0
Q_127	why be panda data frame return everything as a string	C_127_7	title tissue area number activation path number number . number number number . number number number . number inhibition path number number . number number number . number number number . number transcription factors number string number string number string number string undetermined effect number number . number number number . number number number . number tissue area number activation path number number . number number number . number number number . number inhibition path number number . number number number . number number number . number transcription factors number string number string number string number string undetermined effect number number . number number number . number number number . number dtype object	0
Q_127	why be panda data frame return everything as a string	C_127_8	var = var . str . replace ( r string string , string )	0
Q_127	why be panda data frame return everything as a string	C_127_9	var = pd . to_numeric ( data [ data . index . get_level_values ( number ) = string ] )	0
Q_127	why be panda data frame return everything as a string	C_127_10	var = data2 [ ( string , string ) ] _ data2 [ ( string , string ) ]	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_0	var = np . array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , dtype = np . float )	1
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_1	var = np . ones ( ( number , number ) , dtype = np . float ) var [ number , number _ number ] = var [ _ number , number _ number ] = var [ number _ number , number ] = var [ number _ number , _ number ] = number	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_2	var = np . zeros ( ( number , number ) , dtype = np . float ) var [ number , number ] = var [ _ number , number ] = var [ number , _ number ] = var [ _ number , _ number ] = var [ number _ number , number _ number ] = number	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_3	number . number number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_4	number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_5	number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_6	number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_7	def zero_edges0 ( w , h , dtype = np . float ) result = np . zeros ( ( w , h ) , dtype = dtype ) result [ number _ number , number _ number ] = result [ number , number ] = result [ _ number , _ number ] = result [ number , _ number ] = result [ _ number , number ] = number return result def zero_edges1 ( w , h , dtype = np . float ) result = np . ones ( ( w , h ) , dtype = dtype ) result [ number , number _ number ] = result [ _ number , number _ number ] = result [ number _ number , number ] = result [ number _ number , _ number ] = number return result	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_8	var = [ number , number , number , number , number , number , number , number , number ] t_zero_edges0 = [ number . number e _ number number , number . number e _ number number , number . number e _ number number , number . number e _ number number , number . number number e _ number number , number . number number , number . number number , number . number , number . number ] t_zero_edges1 = [ number . number e _ number number , number . number e _ number number , number . number e _ number number , number . number e _ number number , number . number e _ number number , number . number number , number . number number , number . number , number . number ]	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_9	from itertools import product def zero_edges ( shape , dtype = np . float ) result = np . zeros ( shape , dtype = dtype ) for var in product ( [ number , _ number ] , repeat = result . ndim ) result [ var ] = number result [ ( slice ( number , _ number ) , ) * result . ndim ] = number return result	0
Q_128	"how can i create a numpy array with tagint "" s in center and corner"	C_128_10	from itertools import product , permutations def zero_edges1 ( shape , dtype = np . float ) result = np . ones ( shape , dtype = dtype ) plist = [ slice ( number , _ number ) ] * ( result . ndim _ number ) + [ number ] for var in range ( number , result . ndim ) for index in ( number , _ number ) plist [ _ var ] = [ index ] * var for edge in permutations ( plist ) result [ edge ] = number return result	0
Q_129	aggregate row value in dataframe under specific condition	C_129_0	var = var . reset_index ( drop = true ) m = var [ string ] = = _ number s = m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] . reindex ( var . index ) . fillna ( var . index . to_series ( ) . add ( . number ) ) var = var . groupby ( s ) . agg ( { string string , string string } ) . reset_index ( drop = true ) print ( var ) a b number number number number number number number _ number number number _ number number number number number number number number	1
Q_129	aggregate row value in dataframe under specific condition	C_129_1	var = pd . data_frame ( { string [ number , number , _ number , _ number , number , _ number , _ number , _ number , number ] , string [ number , number , number , number , number , number , number , number , number ] } ) print ( var ) a b number number number number number number number _ number number number _ number number number number number number _ number number number _ number number number _ number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_2	var = var . reset_index ( drop = true )	0
Q_129	aggregate row value in dataframe under specific condition	C_129_3	var = df [ string ] = = _ number print ( df . assign ( groups = var . ne ( var . shift ( ) ) . cumsum ( ) ) ) a b groups number number number number number number number number number _ number number number number _ number number number number number number number number _ number number number number _ number number number number _ number number number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_4	var = df [ string ] = = _ number print ( df . assign ( groups = var . ne ( var . shift ( ) ) . cumsum ( ) , filtered = var . ne ( var . shift ( ) ) . cumsum ( ) [ var ] . reindex ( df . index ) ) ) a b groups filtered number number number number na_n number number number number na_n number _ number number number number . number number _ number number number number . number number number number number na_n number _ number number number number . number number _ number number number number . number number _ number number number number . number number number number number na_n	0
Q_129	aggregate row value in dataframe under specific condition	C_129_5	var = df [ string ] = = _ number print ( df . assign ( groups = var . ne ( var . shift ( ) ) . cumsum ( ) , filtered = var . ne ( var . shift ( ) ) . cumsum ( ) [ var ] . reindex ( df . index ) , idx = df . index . to_series ( ) . add ( . number ) , groups1 = var . ne ( var . shift ( ) ) . cumsum ( ) [ var ] . reindex ( df . index ) . fillna ( df . index . to_series ( ) . add ( . number ) ) ) ) a b groups filtered idx groups1 number number number number na_n number . number number . number number number number number na_n number . number number . number number _ number number number number . number number . number number . number number _ number number number number . number number . number number . number number number number number na_n number . number number . number number _ number number number number . number number . number number . number number _ number number number number . number number . number number . number number _ number number number number . number number . number number . number number number number number na_n number . number number . number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_6	var = var . groupby ( s ) . agg ( { string string , string string } ) . reset_index ( drop = true ) print ( var ) a b number number number number number number number _ number number number _ number number number number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_7	var = var . reset_index ( drop = true ) m = var [ string ] = = _ number s = var . reset_index ( ) . groupby ( m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] ) . agg ( { string string , string string } ) . set_index ( string ) . assign ( a = _ number ) var = var [ m ] . append ( s , sort = true ) . sort_index ( ) print ( var ) a b number number number number number number number _ number number number number number number _ number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_8	var = var . reset_index ( drop = true )	0
Q_129	aggregate row value in dataframe under specific condition	C_129_9	var = df [ string ] = = _ number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_10	print ( df . reset_index ( ) ) index a b number number number number number number number number number number _ number number number number _ number number number number number number number number _ number number number number _ number number number number _ number number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_11	print ( m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] ) number number number number number number number number number number name a , dtype int32	0
Q_129	aggregate row value in dataframe under specific condition	C_129_12	print ( df . reset_index ( ) . groupby ( m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] ) . agg ( { string string , string string } ) ) index b a number . number number number number . number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_13	print ( df . reset_index ( ) . groupby ( m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] ) . agg ( { string string , string string } ) . set_index ( string ) ) b index number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_14	var = ( df . reset_index ( ) . groupby ( m . ne ( m . shift ( ) ) . cumsum ( ) [ m ] ) . agg ( { string string , string string } ) . set_index ( string ) . assign ( a = _ number ) ) print ( var ) b a index number number _ number number number _ number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_15	print ( df [ m ] ) a b number number number number number number number number number number number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_16	print ( df [ m ] . append ( s , sort = true ) ) a b number number number number number number number number number number number number number _ number number number _ number number	0
Q_129	aggregate row value in dataframe under specific condition	C_129_17	print ( df [ m ] . append ( s , sort = true ) . sort_index ( ) ) a b number number number number number number number _ number number number number number number _ number number number number number	0
Q_130	how to create a python convolution kernel	C_130_0	import numpy as np convolution_kernel = np . array ( [ [ number , number , number ] , [ number , number . number , number ] , [ number , number , number ] ] )	1
Q_130	how to create a python convolution kernel	C_130_1	[ [ number . number . number . ] [ number . number . number number . ] [ number . number . number . ] ]	0
Q_130	how to create a python convolution kernel	C_130_2	import cv2 image = cv2 . imread ( string ) result = cv2 . filter2_d ( image , _ number , convolution_kernel )	0
Q_130	how to create a python convolution kernel	C_130_3	var = np . array ( [ [ number , _ number , number ] , [ _ number , number , _ number ] , [ number , _ number , number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_4	var = np . array ( [ [ number , number , number ] , [ number , _ number , number ] , [ number , number , number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_5	var = np . array ( [ [ _ number , _ number , number ] , [ _ number , number , number ] , [ number , number , number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_6	var = np . array ( [ [ _ number , _ number , _ number ] , [ _ number , number , _ number ] , [ _ number , _ number , _ number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_7	var = np . array ( [ [ _ number , _ number , _ number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_8	var = np . array ( [ [ number , number , _ number ] , [ number , number , _ number ] , [ number , number , _ number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_9	var = np . array ( [ [ _ number , number , number ] , [ _ number , number , number ] , [ _ number , number , number ] ] )	0
Q_130	how to create a python convolution kernel	C_130_10	var = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ _ number , _ number , _ number ] ] )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_0	from pyspark . sql . functions import split , expr df1 = df . with_column ( string , split ( string , r string ) ) . with_column ( string , expr ( string string ) ) df1 . select ( string ) . show ( truncate = false ) + _ + temp1 + _ + [ oil , pump , assembly , a01_ea09_ca , number a06 ] [ oil , pump , assembly , a02_ea09_ca / cb / cc , number a06 ] [ oil , pump , assembly , a01_ea05_ca , number a06 ] [ drive , train , transmission , number , speed , v08_ab26 / gb26 / lb26 , all , options , number victrans08 ] [ suspension , number , s09_pr6_hsl / ps6_hsl / hel , number snowshockfront7043244_sb ] + _ +	1
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_1	var = df1 . with_column ( string , expr ( string / string ) ) var . select ( string ) . show ( truncate = false ) + _ + temp1 + _ + [ [ oil ] , [ pump ] , [ assembly ] , [ a01_ea09_ca ] , [ number a06 ] ] [ [ oil ] , [ pump ] , [ assembly ] , [ a02_ea09_ca , cb , cc ] , [ number a06 ] ] [ [ oil ] , [ pump ] , [ assembly ] , [ a01_ea05_ca ] , [ number a06 ] ] [ [ drive ] , [ train ] , [ transmission ] , [ number ] , [ speed ] , [ v08_ab26 , gb26 , lb26 ] , [ all ] , [ options ] , [ number victrans08 ] ] [ [ suspension ] , [ number ] , [ s09_pr6_hsl , ps6_hsl , hel ] , [ number snowshockfront7043244_sb ] ] + _ +	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_2	var = df2 . with_column ( string , expr ( string string string ) ) var . select ( string ) . show ( truncate = false ) + _ + temp1 + _ + [ oil , pump , assembly , a01_ea09_ca , number a06 ] [ oil , pump , assembly , a02_ea09_ca , a02_ea09_cb , a02_ea09_cc , number a06 ] [ oil , pump , assembly , a01_ea05_ca , number a06 ] [ drive , train , transmission , number , speed , v08_ab26 , v08_gb26 , v08_lb26 , all , options , number victrans08 ] [ suspension , number , s09_pr6_hsl , s09_ps6_hsl , s09_ps6_hel , number snowshockfront7043244_sb ] + _ +	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_3	transform ( sequence ( number , size ( x ) ) , i _ > func2 ( i ) )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_4	( acc , j ) _ > concat ( substr ( acc , number , length ( acc ) _ length ( x [ j _ number ] ) ) , x [ j _ number ] )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_5	for var in temp1 for i in range ( number , size ( var ) + number ) acc = var [ number ] for j in range ( number , i + number ) acc = concat ( substr ( acc , number , length ( acc ) _ length ( var [ j _ number ] ) ) , var [ j _ number ] )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_6	step _ number merge and drop duplicates df4 = df3 . groupby ( string ) . agg ( expr ( string string ) , expr ( string string ) )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_7	df4 . select ( string ) . show ( truncate = false ) + _ + assembly_names + _ + oil pump assembly a01_ea09_ca number a06 a02_ea09_ca a02_ea09_cb a02_ea09_cc a01_ea05_ca suspension number s09_pr6_hsl s09_ps6_hsl s09_ps6_hel number snowshockfront7043244_sb drive train transmission number speed v08_ab26 v08_gb26 v08_lb26 all options number victrans08 + _ +	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_8	var = df . with_column ( string , split ( string , r string ) ) . with_column ( string , expr ( string string ) )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_9	var = df1 . with_column ( string , expr ( string / string ) ) . with_column ( string , expr ( string string ) )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_10	var = df2 . with_column ( string , expr ( string string string _ string string ) )	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_11	df3 . select ( string ) . show ( truncate = false ) + _ + temp1 + _ + [ oil , pump , assembly , a01_ea09_ca , number a06 ] [ oil , pump , assembly , a02_ea09_ca , a02_ea09_cb , a02_ea09_cc , number a06 ] [ oil , pump , assembly , a01_ea05_ca , number a06 ] [ drive , train , transmission , number , speed , v08_ab26 , v08_gb26 , v08_lb26 , all , options , number victrans08 ] [ suspension , number , s09_pr6_hsl , s09_ps6_hsl , s09_pr6_hel , number snowshockfront7043244_sb ] [ drive , train , clutch , primary , s09_pr6_hsl , s09_ps6_hsl , s09_pr6_hsl , number snowdriveclutch09600_trg ] [ drive , train , clutch , primary , s09_pr6_hsl , s09_ps6_hsl , s09_pr6_hsl , number snowdriveclutch09600_trg ] + _ +	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_12	df . select ( string ) . show ( truncate = false ) + _ + assembly_name + _ + oil pump assembly _ a01_ea09_ca ( number a06 ) oil pump assembly _ a02_ea09_ca / cb / cc ( number a06 ) oil pump assembly _ a01_ea05_ca ( number a06 ) drive train , transmission ( number speed ) _ v08_ab26 / gb26 / lb26 all options ( number victrans08 ) suspension ( number ) _ s09_pr6_hsl / ps6_hsl / hel ( number snowshockfront7043244_sb ) drive train , clutch , primary _ s09_pr6_hsl / ps_hsl / h_l ( number snowdriveclutch09600_trg ) drive train , clutch , primary _ s09_pr6_hsl / _s_sl / h_l ( number snowdriveclutch09600_trg ) + _ +	0
Q_131	approach to fix assembly_id and assembly_name column data in spark tagint 4 tagint	C_131_13	from pyspark . sql . functions import regexp_replace , split df0 = df . with_column ( string , split ( regexp_replace ( string , r string , string ) , string ) ) . select_expr ( string , string , string , string string ) df0 . show ( truncate = false ) + _ + _ + _ + _ + itemno assembly_id assembly_name models + _ + _ + _ + _ + number number number oil pump assembly ( number a06 ) a01_ea09_ca number number number oil pump assembly ( number a06 ) a02_ea09_ca / cb / cc number number number oil pump assembly ( number a06 ) a01_ea05_ca number number number drive train , transmission ( number speed ) all options ( number victrans08 ) v08_ab26 / gb26 / lb26 number number number suspension ( number ) ( number snowshockfront7043244_sb ) s09_pr6_hsl / ps6_hsl / hel number number number drive train , clutch , primary ( number snowdriveclutch09600_trg ) s09_pr6_hsl / ps_hsl / h_l number number number drive train , clutch , primary ( number snowdriveclutch09600_trg ) + _ + _ + _ + _ +	0
Q_132	find any of the element exist in between two column df	C_132_0	df [ string ] = [ any ( [ var in a for var in b ] ) for a , b in zip ( df [ string ] , df [ string ] ) ] df [ string ] = [ [ var for var in b if var in a ] for a , b in zip ( df [ string ] , df [ string ] ) ]	1
Q_132	find any of the element exist in between two column df	C_132_1	a b note no_match number [ number , number , number , number , number , number , number ] [ number , number ] true [ number , number ] number [ number , number , number , number , number , number , number , number , number , number ] [ number , number , number ] true [ number , number ] number [ number , number , number , number , number , number , number , number , number ] [ number , number , number ] false [ ]	0
Q_132	find any of the element exist in between two column df	C_132_2	method number < code > intersection with set ( ) < / code > df [ string ] = [ any ( set ( var ) set ( var ) ) for var , var in zip ( df [ string ] , df [ string ] ) ] df [ string ] = [ list ( set ( var ) set ( var ) ) for var , var in zip ( df [ string ] , df [ string ] ) ]	0
Q_132	find any of the element exist in between two column df	C_132_3	a b note no_match number [ number , number , number , number , number , number , number ] [ number , number ] true [ number , number ] number [ number , number , number , number , number , number , number , number , number , number ] [ number , number , number ] true [ number , number ] number [ number , number , number , number , number , number , number , number , number ] [ number , number , number ] false [ ]	0
Q_132	find any of the element exist in between two column df	C_132_4	df [ string ] = df [ string ] . map ( { true string , false string } )	0
Q_132	find any of the element exist in between two column df	C_132_5	a b note no_match number [ number , number , number , number , number , number , number ] [ number , number ] yes [ number , number ] number [ number , number , number , number , number , number , number , number , number , number ] [ number , number , number ] yes [ number , number ] number [ number , number , number , number , number , number , number , number , number ] [ number , number , number ] no [ ]	0
Q_132	find any of the element exist in between two column df	C_132_6	df [ string ] = df [ string ] . astype ( str ) . str . replace ( string , string )	0
Q_132	find any of the element exist in between two column df	C_132_7	a b note no_match number [ number , number , number , number , number , number , number ] [ number , number ] yes number , number number [ number , number , number , number , number , number , number , number , number , number ] [ number , number , number ] yes number , number number [ number , number , number , number , number , number , number , number , number ] [ number , number , number ] no	0
Q_132	find any of the element exist in between two column df	C_132_8	print ( df ) a b number [ number , number , number , number , number , number , number ] [ number , number ] number [ number , number , number , number , number , number , number , number , number , number ] [ number , number , number ] number [ number , number , number , number , number , number , number , number , number ] [ number , number , number ]	0
Q_132	find any of the element exist in between two column df	C_132_9	type ( df [ string ] . iat [ number ] )	0
Q_132	find any of the element exist in between two column df	C_132_10	from ast import literal_eval df [ string ] = df [ string ] . apply ( literal_eval ) df [ string ] = df [ string ] . apply ( literal_eval ) type ( df [ string ] . iat [ number ] )	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_0	def last_part_no ( group ) dummies = pd . get_dummies ( group [ string ] ) idx = dummies . index . to_series ( ) last_index = dummies . apply ( lambda col idx . where ( col = number , np . nan ) . fillna ( method = string ) ) last_index [ number ] = np . nan idx = last_index . lookup ( last_index . index , group [ string ] _ number ) return pd . data_frame ( { string group . reindex ( idx ) [ string ] . values } , index = group . index ) df [ string ] = df . groupby ( string ) . apply ( last_part_no )	1
Q_133	how to find another relate row without a loop in a dataframe	C_133_1	product_no part_no level last_part_no number number number number na_n number number number number na_n number number number number number number number number number na_n number number number number na_n number number number number number number number number number number number number number number number number number number number number number number number number number number number number number na_n number number number number na_n number number number number number number number number number na_n	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_2	product_no part_no level number number number number . _ number number number number .	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_3	var = df [ df [ string ] = = number ] last_part_no ( var )	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_4	product_no part_no level number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_5	number number number number number number number _ > this row is level number since the column number is string number number number number number number number number _ > this row is level number since the column number is string number number number number number number number number number number number number number number number number number number number number _ > this row is level number since the column number is string number number number number number number number number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_6	index number np . where ( . ) fillna ( . ) number number number number _ > as of index number , last row with level number is row number number number number number number number np . nan number number number number number number number = = > number = = > number number number np . nan number number number np . nan number number number np . nan number _ > as of index number , last row with level number is row number number number np . nan number number number np . nan number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_7	number number number number number na_n number . number na_n na_n number na_n number . number na_n na_n number na_n number . number number . number na_n number na_n number . number number . number na_n number na_n number . number number . number na_n number na_n number . number number . number na_n number na_n number . number number . number na_n number na_n number . number number . number number . number _ > as of index number , last row with level number is number , with level number is number , with level number is number number na_n number . number number . number number . number number na_n number . number number . number number . number _ > as of index number , last row with level number is number , with level number is number , with level number is number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_8	level level _ number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_9	the row index of last_part_no . idx _ for row number is in row number , col number of last_index _ > nan number row number , col number _ > nan number row number , col number _ > number number row number , col number _ > nan number row number , col number _ > nan number row number , col number _ > number number row number , col number _ > number number row number , col number _ > number number row number , col number _ > number number row number , col number _ > number	0
Q_133	how to find another relate row without a loop in a dataframe	C_133_10	product_no part_no level last_part_no number number number number nan number number number number nan number number number number number number number number number nan number number number number nan number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_134	python multi_command cli with common option	C_134_0	import click click . group ( chain = true ) click . option ( string ) click . option ( string ) def main ( common_option1 , common_option2 ) pass main . command ( ) click . option ( string , is_flag = true ) def cmd1 ( cmd1_option ) pass main . command ( ) click . option ( string ) def cmd2 ( cmd2_option ) pass main . command ( ) def cmd3 ( ) pass if _name_ = = string main ( )	1
Q_134	python multi_command cli with common option	C_134_1	python example . py _ help usage example . py [ options ] command1 [ args ] . [ command2 [ args ] . ] . options _ common _ option1 text _ common _ option2 text _ help show this message and exit . commands cmd1 cmd2 cmd3	0
Q_134	python multi_command cli with common option	C_134_2	python mycliapp . py cmd1 _ help usage mycliapp . py cmd1 [ options ] options _ cmd1 _ option _ help show this message and exit .	0
Q_134	python multi_command cli with common option	C_134_3	python mycliapp . py cmd2 _ help usage mycliapp . py cmd2 [ options ] options _ cmd2 _ option text _ help show this message and exit .	0
Q_134	python multi_command cli with common option	C_134_4	python mycliapp . py _ common _ option1 value1 _ common _ option2 value2 cmd1 _ cmd1 _ option cmd2 _ cmd2 _ option somevalue cmd3	0
Q_134	python multi_command cli with common option	C_134_5	import click click . group ( chain = true ) click . option ( string ) click . option ( string ) click . pass_context def main ( ctx , common_option1 , common_option2 ) ctx . obj = { string common_option1 , string common_option2 , } main . resultcallback ( ) def process_pipeline ( processors , common_option1 , common_option2 ) print ( string , common_option1 ) for var in processors res = var ( ) if not res raise click . click_exception ( string ) main . command ( ) click . option ( string , is_flag = true ) def cmd1 ( cmd1_option ) def process ( ) print ( string ) return cmd1_option return process main . command ( ) click . option ( string ) def cmd2 ( cmd2_option ) def process ( ) print ( string ) return cmd2_option = string return process main . command ( ) click . pass_context def cmd3 ( ctx ) def process ( ) print ( string . format ( * * ctx . obj ) ) return true return process if _name_ = = string main ( )	0
Q_134	python multi_command cli with common option	C_134_6	python mycliapp . py cmd1 cmd2 this is cmd1 error failed processing	0
Q_134	python multi_command cli with common option	C_134_7	python mycliapp . py cmd1 _ cmd1 _ option cmd2 this is cmd1 this is cmd2	0
Q_134	python multi_command cli with common option	C_134_8	python mycliapp . py cmd1 _ cmd1 _ option cmd2 _ cmd2 _ option fail cmd3 this is cmd1 this is cmd2 error failed processing	0
Q_134	python multi_command cli with common option	C_134_9	python mycliapp . py cmd1 _ cmd1 _ option cmd2 cmd3 this is cmd1 this is cmd2 this is cmd3	0
Q_134	python multi_command cli with common option	C_134_10	python mycliapp . py cmd2 cmd1 _ cmd1 _ option this is cmd2 this is cmd1	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_0	pip install spacy blis _ extra _ index _ url = https / / hoefling . io / pypi	1
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_1	pip install https / / github . com / hoefling / so _ number / releases / download / number . number / blis _ number . number . number _ cp37 _ cp37m _ linux_armv7l . whl pip install https / / github . com / hoefling / so _ number / releases / download / number . number / spacy _ number . number . number _ cp37 _ cp37m _ linux_armv7l . whl	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_2	preliminaries uname _ a linux raspberrypi number . number . number _ v7 +	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_3	sudo apt install build _ essential gfortran libatlas _ base _ dev virtualenv virtualenv spacy _ build _ python = python3 source spacy _ build / bin / activate	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_4	( spacy _ build ) git clone https / / github . com / explosion / cython _ blis cd cython _ blis ( spacy _ build ) git pull git submodule init git submodule update git submodule status ( spacy _ build ) pip install _ r requirements . txt ( spacy _ build ) export blis_arch = string ( spacy _ build ) . / bin / generate _ make _ jsonl linux blis_arch	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_5	( spacy _ build ) python setup . py bdist_wheel	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_6	( spacy _ build ) ls dist / blis _ number . number . number _ cp37 _ cp37m _ linux_armv7l . whl	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_7	( spacy _ build ) pip wheel spacy _ no _ binary = spacy _ no _ build _ isolation _ find _ links = dist / _ wheel _ dir = dist /	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_8	( spacy _ build ) ls dist / blis _ number . number . number _ cp37 _ cp37m _ linux_armv7l . whl . spacy _ number . number . number _ cp37 _ cp37m _ linux_armv7l . whl	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_9	( spacy _ build ) pip install spacy blis _ find _ links = dist	0
Q_135	be it possible to install spa_cy to raspberry pi tagint raspbian buster	C_135_10	( spacy _ build ) pip install pytest pytest _ timeout jsonschema mock ( spacy _ build ) pytest ( python _ c string )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_0	var = pd . data_frame ( { string [ number , number , number , number ] , string [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] , string [ number . number , number . number , number . number , number . number ] } ) tdi = pd . datetime_index ( var . timestamp ) var . set_index ( tdi , inplace = true ) var . drop ( columns = string , inplace = true ) var . index . name = string var = var . explode ( string ) sizes = var . groupby ( level = number ) [ string ] . transform ( string ) . sub ( number ) duration = var [ string ] . div ( sizes ) var . index + = pd . to_timedelta ( var . groupby ( level = number ) . cumcount ( ) * duration , unit = string )	1
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_1	number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_2	var = seasonal_decompose ( x = df_test [ string ] , model = string , extrapolate_trend = string , period = number ) plt . rc_params . update ( { string ( number , number ) } ) var . plot ( ) . suptitle ( string , fontsize = number ) plt . show ( )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_3	var = seasonal_decompose ( x = df_test [ string ] , model = string , extrapolate_trend = string , period = number ) plt . rc_params . update ( { string ( number , number ) } ) var . plot ( ) . suptitle ( string , fontsize = number ) plt . show ( )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_4	var = seasonal_decompose ( x = df_test [ string ] , model = string , extrapolate_trend = string , period = int ( len ( df_test ) / number ) ) plt . rc_params . update ( { string ( number , number ) } ) var . plot ( ) . suptitle ( string , fontsize = number ) plt . show ( )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_5	var = seasonal_decompose ( x = df_test [ string ] , model = string , extrapolate_trend = string , period = int ( len ( df_test ) / number ) ) plt . rc_params . update ( { string ( number , number ) } ) var . plot ( ) . suptitle ( string , fontsize = number ) plt . show ( )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_6	sm . tsa . seasonal_decompose ( df , model = string , period = int ( len ( df ) / number ) )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_7	sm . tsa . seasonal_decompose ( df . asfreq ( string ) , model = string )	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_8	number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number na_n . number _ number number _ number number number number number number na_n number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number freq s , name list_data , length number , dtype object	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_9	number _ number number _ number number number number number number number number _ number number _ number number number number number number na_n number _ number number _ number number number number number number na_n number _ number number _ number number number number number number na_n number _ number number _ number number number number number number na_n number _ number number _ number number number number number number number	0
Q_136	decompose for time series value_error you must specify a period or x must be a panda object with a datetime_index with a freq not set to none	C_136_10	number _ number number _ number number number number number number number	0
Q_137	multi dimensional indexing with numpy	C_137_0	in [ number ] x = np . arange ( number ) . reshape ( number , number , number ) . b = np . array ( [ [ true , true , false ] , [ false , true , true ] ] ) in [ number ] x out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] ) in [ number ] b out [ number ] array ( [ [ true , true , false ] , [ false , true , true ] ] ) in [ number ] x [ b ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	1
Q_137	multi dimensional indexing with numpy	C_137_1	in [ number ] x [ b , number ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_137	multi dimensional indexing with numpy	C_137_2	in [ number ] x [ b , [ number , number , number ] ] _ index_error traceback ( most recent call last ) < ipython _ input _ number _ number f1dbec100f2 > in < module > _ > number x [ b , [ number , number , number ] ] index_error shape mismatch indexing arrays could not be broadcast together with shapes ( number , ) ( number , ) ( number , )	0
Q_137	multi dimensional indexing with numpy	C_137_3	in [ number ] np . nonzero ( b ) out [ number ] ( array ( [ number , number , number , number ] ) , array ( [ number , number , number , number ] ) )	0
Q_137	multi dimensional indexing with numpy	C_137_4	in [ number ] x [ [ number , number , number , number ] , [ number , number , number , number ] , ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_137	multi dimensional indexing with numpy	C_137_5	in [ number ] x [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number ] ] _ index_error traceback ( most recent call last ) < ipython _ input _ number _ number efd76049cb0 > in < module > _ > number x [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number ] ] index_error shape mismatch indexing arrays could not be broadcast together with shapes ( number , ) ( number , ) ( number , )	0
Q_137	multi dimensional indexing with numpy	C_137_6	in [ number ] x [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] out [ number ] array ( [ number , number , number , number ] )	0
Q_137	multi dimensional indexing with numpy	C_137_7	in [ number ] x [ [ number , number , number , number ] , [ number , number , number , number ] ] [ , [ number , number , number ] ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_137	multi dimensional indexing with numpy	C_137_8	in [ number ] x [ [ number , number , number , number ] , [ number , number , number , number ] , [ [ number ] , [ number ] , [ number ] ] ] out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_137	multi dimensional indexing with numpy	C_137_9	in [ number ] i , j = np . nonzero ( b ) in [ number ] x [ i [ , none ] , j [ , none ] , [ number , number , number ] ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_137	multi dimensional indexing with numpy	C_137_10	in [ number ] x [ i [ , none ] , j [ , none ] , [ number , number , number ] ] = number in [ number ] x out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] )	0
Q_138	compare two data_frames and loop through them	C_138_0	df1 [ string ] = np . where ( ( df1 [ string ] = = df2 [ string ] ) ( df1 [ string ] = = df2 [ string ] ) ( ( df1 [ string ] > = df2 [ string ] ) or ( df1 [ string ] < = df2 [ string ] ) ) , true , false )	1
Q_138	compare two data_frames and loop through them	C_138_1	var = pd . data_frame ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , columns = [ string , string , string ] ) df2 = pd . data_frame ( [ [ number , string , string , number ] , [ number , string , string , number ] , [ number , string , string , number ] , [ number , string , string , number ] ] , columns = [ string , string , string , string ] ) df2 [ string ] = pd . to_datetime ( df2 [ string ] ) df2 [ string ] = pd . to_datetime ( df2 [ string ] ) var [ string ] = np . where ( ( var [ string ] = = df2 [ string ] ) ( var [ string ] = = df2 [ string ] ) , true , false )	0
Q_138	compare two data_frames and loop through them	C_138_2	year date id condition number number number number true number number number number false number number number number false number number number number false	0
Q_138	compare two data_frames and loop through them	C_138_3	df1 [ string ] = ( df1 [ string ] . isin ( df2 [ string ] ) ) ( df1 [ string ] . isin ( df2 [ string ] ) )	0
Q_138	compare two data_frames and loop through them	C_138_4	year date id number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number _ number number number number number number _ number _ number number	0
Q_138	compare two data_frames and loop through them	C_138_5	year begin_date end_date id number number number _ number number _ number number number _ number number _ number number number number number number _ number number _ number number number _ number number _ number number number number number number _ number number _ number number number _ number number _ number number number number number number _ number number _ number number _ number _ number number number	0
Q_138	compare two data_frames and loop through them	C_138_6	var = list ( zip ( df2 [ string ] , df2 [ string ] ) ) def check_date ( date ) for ( s , e ) in var if date > = s and date < = e return true return false df1 [ string ] = ( df1 [ string ] . isin ( df2 [ string ] ) ) ( df1 [ string ] . isin ( df2 [ string ] ) ) df1 [ string ] = df1 [ string ] . apply ( lambda x check_date ( x ) )	0
Q_138	compare two data_frames and loop through them	C_138_7	year date id condition date_compare number number number _ number number _ number number number true true	0
Q_138	compare two data_frames and loop through them	C_138_8	df2 [ string ] = pd . to_datetime ( df2 [ string ] ) df2 [ string ] = pd . to_datetime ( df2 [ string ] ) df1 [ string ] = pd . to_datetime ( df1 [ string ] ) df1 [ string ] = false for var , var in df1 . iterrows ( ) match = false for idx2 , row2 in df2 . iterrows ( ) if ( var [ string ] = = row2 [ string ] ) ( var [ string ] = = row2 [ string ] ) ( var [ string ] > = row2 [ string ] ) ( var [ string ] < = row2 [ string ] ) match = true df1 . at [ var , string ] = match	0
Q_138	compare two data_frames and loop through them	C_138_9	year date id number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number _ number _ number number	0
Q_138	compare two data_frames and loop through them	C_138_10	year begin_date end_date id number number number _ number number _ number number _ number number _ number number number number number number _ number number _ number number number _ number number _ number number number number number number _ number number _ number number number _ number number _ number number number number number number _ number number _ number number _ number _ number number number	0
Q_138	compare two data_frames and loop through them	C_138_11	year date id condition number number number _ number number _ number number number true number number number _ number number _ number number number true number number number _ number number _ number number number false number number number _ number number _ number number false number number number _ number _ number number false	0
Q_138	compare two data_frames and loop through them	C_138_12	year date id number number number _ number number _ number number s904112 number number number _ number number _ number number s911243 number number number _ number number _ number number s917131 number number number _ number number _ number number sp986214 number number number _ number number _ number number s510006 number number number _ number number _ number s540006	0
Q_138	compare two data_frames and loop through them	C_138_13	year begin_date end_date id number number number _ number number _ number number _ number number _ number number s904112 number number number _ number number _ number number _ number number _ number number s904112 number number number _ number number _ number number number _ number number _ number s904112 number number number _ number number _ number number _ number number _ number number s904112 number number number _ number number _ number number number _ number number _ number s540006 number number number _ number number _ number number number _ number number _ number s904112	0
Q_138	compare two data_frames and loop through them	C_138_14	year date id condition number number number _ number number _ number number s904112 false number number number _ number number _ number number s911243 false number number number _ number number _ number number s917131 false number number number _ number number _ number number sp986214 false number number number _ number number _ number number s510006 false number number number _ number number _ number s540006 true	0
Q_139	efficient cummulative sum in python	C_139_0	var = np . sum ( arr [ i ] )	1
Q_139	efficient cummulative sum in python	C_139_1	var = np . sum ( asorted [ i ] )	0
Q_139	efficient cummulative sum in python	C_139_2	import numpy as np def min_sum_threshold_orig ( arr , threshold = number . number ) idx = np . argsort ( arr ) arr_sorted = arr [ idx ] [ _ number ] sum_ = number i = number while sum_ < threshold i + = number sum_ = np . sum ( arr_sorted [ i ] ) return i	0
Q_139	efficient cummulative sum in python	C_139_3	def min_sum_threshold ( arr , threshold = number . number ) arr = np . sort ( arr ) [ _ number ] sum_ = number for var in range ( arr . size ) sum_ + = arr [ var ] if sum_ > = threshold break return var + number	0
Q_139	efficient cummulative sum in python	C_139_4	import numba as nb min_sum_threshold_nbn = nb . jit ( min_sum_threshold ) min_sum_threshold_nbn . _name_ = string	0
Q_139	efficient cummulative sum in python	C_139_5	nb . jit def min_sum_thres_nb_inplace ( arr , threshold = number . number ) arr . sort ( ) sum_ = number for var in range ( arr . size _ number , _ number , _ number ) sum_ + = arr [ var ] if sum_ > = threshold break return arr . size _ var	0
Q_139	efficient cummulative sum in python	C_139_6	nb . jit def _min_sum_thres_nb ( arr , threshold = number . number ) sum_ = number . number for var in range ( arr . size ) sum_ + = arr [ var ] if sum_ > = threshold break return var + number def min_sum_thres_nb ( arr , threshold = number . number ) return _min_sum_thres_nb ( np . sort ( arr ) [ _ number ] , threshold )	0
Q_139	efficient cummulative sum in python	C_139_7	def min_sum_threshold_np_sum ( arr , threshold = number . number ) return np . sum ( np . cumsum ( np . sort ( arr ) [ _ number ] ) < threshold ) + number	0
Q_139	efficient cummulative sum in python	C_139_8	def min_sum_threshold_np_ss ( arr , threshold = number . number ) return np . searchsorted ( np . cumsum ( np . sort ( arr ) [ _ number ] ) , threshold ) + number	0
Q_139	efficient cummulative sum in python	C_139_9	def min_sum_threshold_np_part ( arr , threshold = number . number ) n = arr . size m = np . int ( size * threshold ) + number part_arr = np . partition ( arr , n _ m ) [ n _ m ] return np . searchsorted ( np . cumsum ( np . sort ( arr ) [ _ number ] ) , threshold ) + number	0
Q_139	efficient cummulative sum in python	C_139_10	def min_sum_thres_rec ( arr , threshold = number . number , cutoff = number ) n = arr . size if n < = cutoff return np . searchsorted ( np . cumsum ( np . sort ( arr ) [ _ number ] ) , threshold ) + number else m = n / / number partitioned = np . partition ( arr , m ) low = partitioned [ m ] high = partitioned [ m ] sum_high = np . sum ( high ) if sum_high > = threshold return min_sum_thres_rec ( high , threshold ) else return min_sum_thres_rec ( low , threshold _ sum_high ) + high . size	0
Q_139	efficient cummulative sum in python	C_139_11	def gen_input ( n , a = number , b = number ) arr = np . random . randint ( a , b , n ) arr = arr / np . sum ( arr ) return arr	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_0	var = pd . data_frame ( np . random . randint ( number , number , size = ( number , number ) ) , columns = list ( string ) ) var [ string ] = [ number , number , number , number , number , number ] var = var [ [ string , string , string ] ]	1
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_1	group a b number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_2	def func_i1_o1 ( x ) return x + number df [ string ] = df [ string ] . apply ( func_i1_o1 )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_3	def func_i1_o1_rolling ( x ) return ( x [ number ] + x [ number ] ) df [ string ] = df [ string ] . rolling ( number ) . apply ( func_i1_o1_rolling , raw = true )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_4	df [ string ] = df . groupby ( string ) [ string ] . rolling ( number ) . apply ( func_i1_o1_rolling , raw = true ) . reset_index ( drop = true )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_5	def func_i2_o1 ( x ) return np . sum ( x ) df [ string ] = df [ [ string , string ] ] . apply ( func_i2_o1 , axis = number , raw = true )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_6	def func_i2_o1_rolling ( x ) values_b = x values_c = df . loc [ x . index , string ] . to_numpy ( ) return np . sum ( values_b ) + np . sum ( values_c ) df [ string ] = df [ string ] . rolling ( number ) . apply ( func_i2_o1_rolling , raw = false )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_7	df [ string ] = df . groupby ( string ) [ string ] . rolling ( number ) . apply ( func_i2_o1_rolling , raw = false ) . reset_index ( drop = true )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_8	def func_i1_o2 ( x ) return pd . series ( ( x + number , x + number ) ) df [ [ string , string ] ] = df [ string ] . apply ( func_i1_o2 )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_9	def func_i1_o2_fast ( x ) return x + number , x + number df [ string ] , df [ string ] = zip ( * df [ string ] . apply ( func_i1_o2_fast ) )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_10	def func_i1_o2_rolling_solution1 ( x ) output_1 = np . max ( x ) output_2 = np . min ( x )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_11	var = number nan_prefix = ( var _ number ) * [ np . nan ] output_list_1 = nan_prefix . copy ( ) output_list_2 = nan_prefix . copy ( ) def func_i1_o2_rolling_solution2 ( x ) output_list_1 . append ( np . max ( x ) ) output_list_2 . append ( np . min ( x ) ) return number df [ string ] . rolling ( var ) . apply ( func_i1_o2_rolling_solution2 , raw = true ) df [ string ] = output_list_1 df [ string ] = output_list_2	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_12	def func_i1_o2_rolling_groupby ( x ) output_1 = np . max ( x ) output_2 = np . min ( x )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_13	def func_i2_o2 ( x ) return np . mean ( x ) , np . median ( x ) df [ string ] , df [ string ] = zip ( * df [ [ string , string ] ] . apply ( func_i2_o2 , axis = number ) )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_14	def func_i2_o2_rolling ( x ) values_b = x . to_numpy ( ) values_c = df . loc [ x . index , string ] . to_numpy ( ) output_1 = np . min ( [ np . sum ( values_b ) , np . sum ( values_c ) ] ) output_2 = np . max ( [ np . sum ( values_b ) , np . sum ( values_c ) ] )	0
Q_140	panda apply roll groupby with multiple input multiple output column	C_140_15	def func_i2_o2_rolling_groupby ( x ) values_b = x . to_numpy ( ) values_c = df . loc [ x . index , string ] . to_numpy ( ) output_1 = np . min ( [ np . sum ( values_b ) , np . sum ( values_c ) ] ) output_2 = np . max ( [ np . sum ( values_b ) , np . sum ( values_c ) ] )	0
Q_141	python _ deal with date	C_141_0	from datetime import datetime , timedelta import pandas as pd my_date = string start = datetime . strptime ( my_date + string , string ) . date ( ) _ timedelta ( weeks = number ) dates = [ start + timedelta ( days = var ) for var in range ( number ) ] date_strings = [ d . strftime ( string ) for d in dates ] date_codes = [ string . format ( * ( d _ timedelta ( days = number ) ) . isocalendar ( ) ) for d in dates ] dates_df = pd . data_frame ( { string date_codes , string date_strings } )	1
Q_141	python _ deal with date	C_141_1	import required classes from datetime import datetime , timedelta import pandas as pd	0
Q_141	python _ deal with date	C_141_2	from datetime import date , timedelta import pandas as pd def create_table ( year , week , n = number ) start = date . fromisocalendar ( year , week , number ) dates = [ start + timedelta ( days = var ) for var in range ( n * number ) ] date_strings = [ d . strftime ( string ) for d in dates ] date_codes = [ string . format ( * ( d _ timedelta ( days = number ) ) . isocalendar ( ) ) for d in dates ] return pd . data_frame ( { string date_codes , string date_strings } ) table = create_table ( number , number , number ) print ( table )	0
Q_141	python _ deal with date	C_141_3	year_week date number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number	0
Q_141	python _ deal with date	C_141_4	def date_from_isoweek ( year , week , day ) return datetime . strptime ( f string , string ) . date ( )	0
Q_141	python _ deal with date	C_141_5	var = pd . date_range ( start , end ) . date . tolist ( )	0
Q_141	python _ deal with date	C_141_6	def create_table_from_dates ( dates ) date_strings = [ var . strftime ( string ) for var in dates ] date_codes = [ ( var _ timedelta ( days = number ) ) . strftime ( string ) for var in dates ] return pd . data_frame ( { string date_codes , string date_strings } ) def create_table_between_dates ( start , end ) dates = pd . date_range ( start , end ) . date . tolist ( ) return create_table_from_dates ( dates ) def create_table_by_weeks ( year , week , n = number ) friday_as_isoweek_string = f string start = datetime . strptime ( friday_as_isoweek_string , string ) . date ( ) dates = [ start + timedelta ( days = i ) for i in range ( n * number ) ] return create_table_from_dates ( dates ) table_by_weeks = create_table_by_weeks ( number , number , number ) table_from_range = create_table_between_dates ( string , string )	0
Q_141	python _ deal with date	C_141_7	var = [ ( var _ timedelta ( days = number ) ) . strftime ( string ) for var in dates ]	0
Q_141	python _ deal with date	C_141_8	var = [ ( var _ timedelta ( days = number ) ) . strftime ( string ) + var . strftime ( string ) for var in dates ]	0
Q_141	python _ deal with date	C_141_9	def create_table_from_dates ( dates , fmt ) date_strings = [ var . strftime ( string ) for var in dates ] date_codes = [ ( var _ timedelta ( days = number ) ) . strftime ( fmt ) for var in dates ] return pd . data_frame ( { string date_codes , string date_strings } ) def create_table_between_dates ( start , end , fmt = string ) dates = pd . date_range ( start , end ) . date . tolist ( ) return create_table_from_dates ( dates , fmt ) def create_table_by_weeks ( year , week , n = number , fmt = string ) friday_as_isoweek_string = f string start = datetime . strptime ( friday_as_isoweek_string , string ) . date ( ) dates = [ start + timedelta ( days = i ) for i in range ( n * number ) ] return create_table_from_dates ( dates , fmt ) table = create_table_by_weeks ( number , number , number , fmt = string ) print ( table )	0
Q_141	python _ deal with date	C_141_10	year_week date number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number	0
Q_142	convert small number to a scale from tagint to tagint	C_142_0	with open ( string , string ) as p lst = p . read ( ) . splitlines ( )	1
Q_142	convert small number to a scale from tagint to tagint	C_142_1	url , value https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number	0
Q_142	convert small number to a scale from tagint to tagint	C_142_2	url , value , scaled_value https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number	0
Q_142	convert small number to a scale from tagint to tagint	C_142_3	var = [ round ( var * number / max ( lst2 ) ) + number for var in lst2 ]	0
Q_142	convert small number to a scale from tagint to tagint	C_142_4	var = round ( x * number / maxpri ) + number res2 = round ( ( ( x _ minpri ) / ( maxpri _ minpri ) ) * number , number )	0
Q_142	convert small number to a scale from tagint to tagint	C_142_5	var = [ round ( var * number / max ( lst2 ) ) + number for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_142	convert small number to a scale from tagint to tagint	C_142_6	[ number , number , number , number , number , number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_142	convert small number to a scale from tagint to tagint	C_142_7	var = [ round ( var * number / max ( lst2 ) , number ) + number for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_142	convert small number to a scale from tagint to tagint	C_142_8	[ number . number , number . number , number . number , number . number , number . number , number . number number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_142	convert small number to a scale from tagint to tagint	C_142_9	round ( x * number / max ( lst2 ) , number ) + number round ( x * number / max ( lst2 ) , number )	0
Q_142	convert small number to a scale from tagint to tagint	C_142_10	var = [ round ( var * number / max ( lst2 ) , number ) for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_142	convert small number to a scale from tagint to tagint	C_142_11	[ number . number , number . number , number . number , number . number , number . number , number . number number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_142	convert small number to a scale from tagint to tagint	C_142_12	var = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ]	0
Q_143	reshape a panda series	C_143_0	in [ number ] l = [ [ string , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] , [ string , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] ] in [ number ] df = pd . data_frame ( l , columns = [ string , string ] ) in [ number ] df out [ number ] name lst number s1 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number s2 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	1
Q_143	reshape a panda series	C_143_1	in [ number ] df [ string ] out [ number ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] name lst , dtype object	0
Q_143	reshape a panda series	C_143_2	in [ number ] df [ string ] . to_numpy ( ) out [ number ] array ( [ list ( [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ) , list ( [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ) ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , )	0
Q_143	reshape a panda series	C_143_3	in [ number ] df [ string ] . to_list ( ) out [ number ] [ [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] , [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ]	0
Q_143	reshape a panda series	C_143_4	in [ number ] np . array ( df [ string ] . to_list ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] ) in [ number ] _ . shape out [ number ] ( number , number , number )	0
Q_143	reshape a panda series	C_143_5	in [ number ] np . stack ( df [ string ] . to_numpy ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_143	reshape a panda series	C_143_6	in [ number ] alist = [ np . empty ( number , object ) ] in [ number ] alist [ number ] [ ] = [ np . array ( [ number , number , number ] ) , np . array ( [ number , number , number ] ) ] in [ number ] alist out [ number ] [ array ( [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , dtype = object ) ]	0
Q_143	reshape a panda series	C_143_7	in [ number ] np . stack ( alist ) out [ number ] array ( [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ] , dtype = object )	0
Q_143	reshape a panda series	C_143_8	in [ number ] np . stack ( alist [ number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_143	reshape a panda series	C_143_9	in [ number ] df out [ number ] name lst number s1 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number s2 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	0
Q_143	reshape a panda series	C_143_10	in [ number ] df [ string ] out [ number ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] name lst , dtype object	0
Q_143	reshape a panda series	C_143_11	in [ number ] df [ string ] . to_numpy ( ) out [ number ] array ( [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) , array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , )	0
Q_143	reshape a panda series	C_143_12	in [ number ] df [ [ string ] ] out [ number ] lst number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	0
Q_143	reshape a panda series	C_143_13	in [ number ] df [ [ string ] ] . to_numpy ( ) out [ number ] array ( [ [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) ] , [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_143	reshape a panda series	C_143_14	in [ number ] np . stack ( _280 ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_143	reshape a panda series	C_143_15	in [ number ] np . stack ( _283 ) out [ number ] array ( [ [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) ] , [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] ] , dtype = object )	0
Q_143	reshape a panda series	C_143_16	in [ number ] np . stack ( _283 . ravel ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_0	import yfinance as yf import pandas as pd ticker_strings = [ string , string ] df_list = list ( ) for var in ticker_strings data = yf . download ( var , group_by = string , period = string ) data [ string ] = var	1
Q_144	how to deal with multi_level column name download with yfinance	C_144_1	var = [ string , string ] df = yf . download ( var , group_by = string , period = string ) df = df . stack ( level = number ) . rename_axis ( [ string , string ] ) . reset_index ( level = number )	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_2	var = pd . read_csv ( string , header = [ number , number ] ) var . drop ( [ number ] , axis = number , inplace = true )	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_3	aapl msft open high low close adj close volume open high low close adj close volume date number _ number _ number number . number number . number number . number number . number number . number number na_n na_n na_n na_n na_n na_n number _ number _ number number . number number . number number . number number . number number . number number na_n na_n na_n na_n na_n na_n number _ number _ number number . number number . number number . number number . number number . number number na_n na_n na_n na_n na_n na_n number _ number _ number number . number number . number number . number number . number number . number number na_n na_n na_n na_n na_n na_n number _ number _ number number . number number . number number . number number . number number . number number na_n na_n na_n na_n na_n na_n	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_4	, aapl , aapl , aapl , aapl , aapl , aapl , msft , msft , msft , msft , msft , msft , open , high , low , close , adj close , volume , open , high , low , close , adj close , volume date , , , , , , , , , , , , number _ number _ number , number . number , number . number , number . number , number . number , number . number , number , , , , , , number _ number _ number , number . number , number . number , number . number , number . number , number . number , number , , , , , , number _ number _ number , number . number , number . number , number . number , number . number , number . number , number , , , , , ,	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_5	df . stack ( level = number ) . rename_axis ( [ string , string ] ) . reset_index ( level = number )	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_6	df . stack ( level = number ) . rename_axis ( [ string , string ] ) . reset_index ( level = number )	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_7	import yfinance as yf import pandas as pd ticker_strings = [ string , string ] for var in ticker_strings data = yf . download ( var , group_by = string , period = prd , interval = intv ) data [ string ] = var	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_8	open high low close adj close volume ticker date number _ number number _ number number . number number number . number number . number number number . number number number . number number number msft number _ number number _ number number . number number number . number number . number number number . number number . number number number msft number _ number number _ number number . number number . number number . number number . number number . number number number msft number _ number number _ number number . number number . number number . number number number . number number number . number number number msft number _ number number _ number number . number number number . number number . number number number . number number number . number number number msft	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_9	date , open , high , low , close , adj close , volume , ticker number _ number number _ number , number . number number , number . number , number . number number , number . number number , number . number number , number , msft number _ number number _ number , number . number number , number . number , number . number number , number . number , number . number number , number , msft number _ number number _ number , number . number , number . number , number . number , number . number , number . number number , number , msft number _ number number _ number , number . number , number . number , number . number number , number . number number , number . number number , number , msft number _ number number _ number , number . number number , number . number , number . number number , number . number number , number . number number , number , msft	0
Q_144	how to deal with multi_level column name download with yfinance	C_144_10	read in multiple files saved with the previous section and create a single dataframe import pandas as pd from pathlib import path	0
Q_145	max range in interval for good number	C_145_0	from typing import list def bad ( a int , b int , x list [ int ] ) _ > none string string string max_x = max ( x ) y = range ( a , b + number ) if max_x in y print ( len ( y ) _ max_x ) else print ( y ) numbers = input ( ) . split ( ) m = numbers [ number ] n = numbers [ number ] x = str ( numbers [ number ] ) bad ( m , n , x )	1
Q_145	max range in interval for good number	C_145_1	mypy bad . py bad . py number error argument number to string has incompatible type string expected string bad . py number error argument number to string has incompatible type string expected string bad . py number error argument number to string has incompatible type string expected string	0
Q_145	max range in interval for good number	C_145_2	var = input ( ) . split ( ) reveal_type ( var )	0
Q_145	max range in interval for good number	C_145_3	mypy test . py bad . py number note revealed type is string bad . py number error argument number to string has incompatible type string expected string bad . py number error argument number to string has incompatible type string expected string bad . py number error argument number to string has incompatible type string expected string	0
Q_145	max range in interval for good number	C_145_4	var = [ int ( var ) for var in input ( ) . split ( ) ] reveal_type ( var )	0
Q_145	max range in interval for good number	C_145_5	mypy bad . py bad . py number note revealed type is string bad . py number error argument number to string has incompatible type string expected string	0
Q_145	max range in interval for good number	C_145_6	var = [ int ( var ) for var in input ( ) . split ( ) ] m = var [ number ] var = var [ number ] x = var [ number ] bad ( m , var , x )	0
Q_145	max range in interval for good number	C_145_7	mypy bad . py success no issues found in number source file	0
Q_145	max range in interval for good number	C_145_8	python bad . py number number number number number number	0
Q_145	max range in interval for good number	C_145_9	def bad ( a int , b int , x list [ int ] ) string string string max_x = max ( x ) y = range ( a , b + number ) if max_x in y print ( b _ max_x ) else print ( y )	0
Q_145	max range in interval for good number	C_145_10	python bad . py number number number number number number	0
Q_145	max range in interval for good number	C_145_11	python bad . py number number number range ( number , number ) python bad . py number number number number	0
Q_145	max range in interval for good number	C_145_12	from typing import list def bad ( a int , b int , x list [ int ] ) _ > int string string string max_x = max ( x ) y = range ( a , b + number ) if max_x in y return b _ max_x else return len ( y )	0
Q_145	max range in interval for good number	C_145_13	mypy bad . py test . py number error incompatible types in assignment ( expression has type string , variable has type string )	0
Q_145	max range in interval for good number	C_145_14	python bad . py traceback ( most recent call last ) file string , line number , in < module > assert bad ( number , number , [ number ] ) = = number assertion_error	0
Q_145	max range in interval for good number	C_145_15	def bad ( a int , b int , x list [ int ] ) _ > int string string string min_x = min ( x ) max_x = max ( x ) y = range ( a , b + number ) if min_x in y and max_x in y return max ( b _ max_x , min_x _ a ) elif min_x in y return min_x _ a elif max_x in y return b _ max_x else return len ( y )	0
Q_145	max range in interval for good number	C_145_16	assert bad ( number , number , [ number , number ] ) = = number	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_0	from pyspark . sql . functions import expr , first , collect_list , broadcast , monotonically_increasing_id , flatten import pandas as pd df = spark . create_data_frame ( [ [ string , string ] , [ string , string ] , [ string , string ] , [ string , string ] ] ) . to_df ( string , string )	1
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_1	var = pd . read_csv ( string , sep = string )	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_2	var = df . alias ( string ) . join ( broadcast ( df1 . alias ( string ) ) , expr ( string ) , string ) var . show ( ) + _ + _ + _ + _ + _ + address name id iso2 keywords + _ + _ + _ + _ + _ + number whispering p . john number us ( ? m ) b_arizona b . kalverstraat amst . mary number nl ( ? m ) b_amsterdam b . kalverstraat amst . mary number us ( ? m ) b_arizona b . kalverstraat amst . lex number nl ( ? m ) b_amsterdam b . kalverstraat amst . lex number us ( ? m ) b_arizona b . xvcv ddd number null null + _ + _ + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_3	var = df2 . with_column ( string , expr ( string ) ) + _ + _ + _ + _ + _ + _ + address name id iso2 keywords num_matches + _ + _ + _ + _ + _ + _ + number whispering p . john number us ( ? m ) b_arizona b . number kalverstraat amst . mary number nl ( ? m ) b_amsterdam b . number kalverstraat amst . mary number us ( ? m ) b_arizona b . number kalverstraat amst . lex number nl ( ? m ) b_amsterdam b . number kalverstraat amst . lex number us ( ? m ) b_arizona b . number xvcv ddd number null null _ number + _ + _ + _ + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_4	var = df3 . with_column ( string , expr ( string ) ) + _ + _ + _ + _ + _ + _ + address name id iso2 keywords num_matches + _ + _ + _ + _ + _ + _ + number whispering p . john number [ us , us , us ] ( ? m ) b_arizona b . number kalverstraat amst . mary number [ nl ] ( ? m ) b_amsterdam b . number kalverstraat amst . mary number [ us ] ( ? m ) b_arizona b . number kalverstraat amst . lex number [ nl , nl ] ( ? m ) b_amsterdam b . number kalverstraat amst . lex number [ us ] ( ? m ) b_arizona b . number xvcv ddd number [ ] null _ number + _ + _ + _ + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_5	var = df4 . groupby ( string ) . agg ( first ( string ) . alias ( string ) , first ( string ) . alias ( string ) , flatten ( collect_list ( string ) ) . alias ( string ) ) + _ + _ + _ + _ + id address name countries + _ + _ + _ + _ + number number whispering p . john [ us , us , us ] number kalverstraat amst . mary [ nl , us ] number xvcv ddd [ ] number kalverstraat amst . lex [ nl , nl , us ] + _ + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_6	from pyspark . sql . functions import pandas_udf , pandas_udf_type from pandas import series import re pandas_udf ( string , pandas_udf_type . scalar ) def get_num_matches ( addr , ptn ) return series ( [ number if var is none else len ( re . findall ( var , var ) ) for var , var in zip ( ptn , addr ) ] ) df3 = df2 . with_column ( string , get_num_matches ( expr ( string ) , string ) ) + _ + _ + _ + _ + _ + _ + address name id iso2 keywords num_matches + _ + _ + _ + _ + _ + _ + number whispering p . john number us ( ? m ) b_arizona b . number kalverstraat amst . mary number nl ( ? m ) b_amsterdam b . number kalverstraat amst . mary number us ( ? m ) b_arizona b . number kalverstraat amst . lex number nl ( ? m ) b_amsterdam b . number kalverstraat amst . lex number us ( ? m ) b_arizona b . number xvcv ddd number null null number + _ + _ + _ + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_7	var = pd . read_csv ( string , sep = string ) var [ string ] = var [ string ] . str . replace ( r string , lambda m m . group ( number ) + m . group ( number ) . upper ( ) ) df_ptn = spark . spark_context . broadcast ( var . groupby ( string ) . agg ( { string lambda x string + string . join ( x ) } ) [ string ] . to_dict ( ) ) df_ptn . value	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_8	def _get_iso2_2 ( addr , ptn ) return series ( [ [ [ var ] * len ( re . findall ( var , s ) ) for var , var in ptn . value . items ( ) ] for s in addr ] ) get_iso2_2 = pandas_udf ( lambda x _get_iso2_2 ( x , df_ptn ) , string , pandas_udf_type . scalar ) df . with_column ( string , flatten ( get_iso2_2 ( expr ( string ) ) ) ) . show ( )	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_9	def _get_iso2_3 ( addr , ptn ) return series ( [ [ var for var , var in ptn . value . items ( ) if re . search ( var , s ) ] for s in addr ] ) get_iso2_3 = pandas_udf ( lambda x _get_iso2_3 ( x , df_ptn ) , string , pandas_udf_type . scalar ) df . with_column ( string , get_iso2_3 ( expr ( string ) ) ) . show ( ) + _ + _ + _ + address name iso2 + _ + _ + _ + number whispering p . john [ us ] kalverstraat amst . mary [ nl , us ] kalverstraat amst . lex [ nl , us ] xvcv ddd [ ] + _ + _ + _ +	0
Q_146	py_spark udf optimization challenge use a dictionary with regex	C_146_10	from pyspark . sql . functions import size , split , upper , col , array , expr , flatten df_regex = pd . read_csv ( string , sep = string ) df_regex [ string ] = df_regex [ string ] . str . replace ( r string , lambda m m . group ( number ) + m . group ( number ) . upper ( ) ) df_ptn = df_regex . groupby ( string ) . agg ( { string lambda x string + string . join ( x ) } ) [ string ] . to_dict ( ) df1 = df . select ( string , * [ ( size ( split ( upper ( col ( string ) ) , var ) ) _ number ) . alias ( var ) for var , var in df_ptn . items ( ) ] ) df1 . select ( * df . columns , flatten ( array ( * [ expr ( string { number } string . format ( c ) ) for c in df_ptn . keys ( ) ] ) ) . alias ( string ) ) . show ( ) + _ + _ + _ + _ + address name id iso2 + _ + _ + _ + _ + number whispering p . john number [ us , us , us ] kalverstraat amst . mary number [ nl , us ] kalverstraat amst . lex number [ nl , nl , us ] xvcv ddd number [ ] + _ + _ + _ + _ +	0
Q_147	2_d rotation of image	C_147_0	var = cv2 . imread ( string , cv2 . imread_grayscale ) new = np . zeros_like ( var )	1
Q_147	2_d rotation of image	C_147_1	var = im . shape [ number ] / / number center_col = im . shape [ number ] / / number	0
Q_147	2_d rotation of image	C_147_2	var = np . arange ( im . shape [ number ] ) [ , none ] _ center_row col_coord = np . arange ( im . shape [ number ] ) _ center_col	0
Q_147	2_d rotation of image	C_147_3	var = float ( input ( string ) ) * np . pi / number . number source_row = row_coord * np . cos ( var ) _ col_coord * np . sin ( var ) + center_row source_col = row_coord * np . sin ( var ) + col_coord * np . cos ( var ) + center_col	0
Q_147	2_d rotation of image	C_147_4	var = source_row > = number source_row < im . shape [ number ] source_col > = number source_col < im . shape [ number ] new [ var ] = im [ source_row [ var ] . round ( ) . astype ( int ) , source_col [ var ] . round ( ) . astype ( int ) ]	0
Q_147	2_d rotation of image	C_147_5	[ [ r string ] = [ number number _ cc ] . [ c ] [ number ] ] [ number number number ] ] [ number ] ]	0
Q_147	2_d rotation of image	C_147_6	[ [ r string ] [ [ cos ( a ) _ sin ( a ) number ] [ [ r string string ] [ number ] ] [ number number number ] ] [ number ] ]	0
Q_147	2_d rotation of image	C_147_7	[ [ r string string string string ] = [ number number cc ] . [ c string ] [ number ] ] [ number number number ] ] [ number ] ]	0
Q_147	2_d rotation of image	C_147_8	[ [ cos ( a ) _ sin ( a ) cc * sin ( a ) _ rc * cos ( a ) + rc ] m = [ sin ( a ) cos ( a ) _ cc * cos ( a ) _ rc * sin ( a ) + cc ] [ number number number ] ]	0
Q_147	2_d rotation of image	C_147_9	var = np . array ( [ [ np . cos ( angle ) , _ np . sin ( angle ) , col_center * np . sin ( angle ) _ row_center * np . cos ( angle ) + row_center ] , [ np . sin ( angle ) , np . cos ( angle ) , _ col_center * np . cos ( angle ) _ row_center * np . sin ( angle ) + col_center ] , [ number , number , number ] ] ) coord = np . ones ( ( * im . shape , number , number ) ) coord [ . , number , ] = np . arange ( im . shape [ number ] ) . reshape ( _ number , number , number , number ) coord [ . , number , ] = np . arange ( im . shape [ number ] ) . reshape ( _ number , number , number ) source = ( var coord ) [ . , number , number ]	0
Q_147	2_d rotation of image	C_147_10	var = ( source > = number source_row < im . shape ) . all ( axis = _ number ) new [ var ] = im [ source [ number , var ] . round ( ) . astype ( int ) , source_col [ number , var ] . round ( ) . astype ( int ) ]	0
Q_148	sort contour base on precedence in python open_cv	C_148_0	var = row_mask . at ( number , number )	1
Q_148	sort contour base on precedence in python open_cv	C_148_1	row_table . at ( number , number ) = number	0
Q_148	sort contour base on precedence in python open_cv	C_148_2	/ / read the input image std string image_name = string cv mat test_image = cv imread ( image_name ) / / compute grayscale image cv mat gray_image cv cvt_color ( test_image , gray_image , cv color_rgb2_gray ) / / get binary image via otsu cv mat bin_image cv threshold ( gray_image , bin_image , number , number , cv thresh_otsu ) / / invert image bin_image = number _ bin_image	0
Q_148	sort contour base on precedence in python open_cv	C_148_3	/ / create a hard copy of the binary mask cv mat row_mask = bin_image . clone ( ) / / horizontal dilation + erosion int horizontal_size = number / / a very big horizontal structuring element cv mat se = cv get_structuring_element ( cv morph_rect , cv size ( horizontal_size , number ) ) cv morphology_ex ( row_mask , row_mask , cv morph_dilate , se , cv point ( _ number , _ number ) , number ) cv morphology_ex ( row_mask , row_mask , cv morph_erode , se , cv point ( _ number , _ number ) , number )	0
Q_148	sort contour base on precedence in python open_cv	C_148_4	/ / label the row mask int row_count = number / / this will count our rows / / loop thru the mask for ( int y = number y < row_mask . rows y + + ) { for ( int x = number x < row_mask . cols x + + ) { / / get the current pixel uchar current_pixel = row_mask . at < uchar > ( y , x ) / / if the pixel is white , this is an unlabeled blob if ( current_pixel = = number ) { / / create new label ( different from zero ) row_count + + / / flood fill on this point cv flood_fill ( row_mask , cv point ( x , y ) , row_count , ( cv rect * ) number , cv scalar ( ) , number ) } } }	0
Q_148	sort contour base on precedence in python open_cv	C_148_5	/ / create rows image cv mat row_table = cv mat zeros ( cv size ( bin_image . cols , row_count ) , cv_8_uc1 ) / / just for convenience row_table = number _ row_table	0
Q_148	sort contour base on precedence in python open_cv	C_148_6	/ / prepare a couple of dictionaries for data storing std map < int , cv point > blob_map / / holds label , gives centroid std map < int , cv rect > bounding_box_map / / holds label , gives bounding box	0
Q_148	sort contour base on precedence in python open_cv	C_148_7	/ / extract each individual blob cv mat bob_filter_input = bin_image . clone ( ) / / the new blob label int blob_label = number / / some control variables bool extract_blobs = true / / controls loop int current_blob = number / / counter of blobs while ( extract_blobs ) { / / get the biggest blob cv mat biggest_blob = find_biggest_blob ( bob_filter_input ) / / compute the centroid / center of mass cv moments moment_structure = cv moments ( biggest_blob , true ) float cx = moment_structure . m10 / moment_structure . m00 float cy = moment_structure . m01 / moment_structure . m00 / / centroid point cv point blob_centroid blob_centroid . x = cx blob_centroid . y = cy / / compute bounding box bounding_box box_data compute_bounding_box ( biggest_blob , box_data ) / / convert bounding_box data into opencv rect data cv rect crop_box = bounding_box2_rect ( box_data ) / / label blob blob_label + + blob_map . emplace ( blob_label , blob_centroid ) bounding_box_map . emplace ( blob_label , crop_box ) / / get the row for this centroid int blob_row = row_mask . at < uchar > ( cy , cx ) blob_row _ / / place centroid on rowed image row_table . at < uchar > ( blob_row , cx ) = blob_label / / resume blob flow control cv mat blob_difference = bob_filter_input _ biggest_blob / / how many pixels are left on the new mask ? int pixels_left = cv count_non_zero ( blob_difference ) bob_filter_input = blob_difference / / done extracting blobs ? if ( pixels_left < = number ) { extract_blobs = false } / / increment blob counter current_blob + + }	0
Q_148	sort contour base on precedence in python open_cv	C_148_8	/ / label blob blob_label + + blob_map . emplace ( blob_label , blob_centroid ) bounding_box_map . emplace ( blob_label , crop_box )	0
Q_148	sort contour base on precedence in python open_cv	C_148_9	/ / get the row for this centroid int blob_row = row_mask . at < uchar > ( cy , cx ) blob_row _ / / place centroid on rowed image row_table . at < uchar > ( blob_row , cx ) = blob_label	0
Q_148	sort contour base on precedence in python open_cv	C_148_10	int blob_counter = number / / the ordered label , starting at number for ( int y = number y < row_table . rows y + + ) { for ( int x = number x < row_table . cols x + + ) { / / get current label uchar current_label = row_table . at < uchar > ( y , x ) / / is it a valid label ? if ( current_label = number ) { / / get the bounding box for this label cv rect current_bounding_box = bounding_box_map [ current_label ] cv rectangle ( test_image , current_bounding_box , cv scalar ( number , number , number ) , number , number , number ) / / the blob counter to string std string counter_string = std to_string ( blob_counter ) cv put_text ( test_image , counter_string , cv point ( current_bounding_box . x , current_bounding_box . y _ number ) , cv font_hershey_simplex , number . number , cv scalar ( number , number , number ) , number , cv line_8 , false ) blob_counter + + / / increment the blob / label } } }	0
Q_149	how can i manipulate the string item in a list	C_149_0	for var in movie_list movie_list2 . append ( re . findall ( string , str ( movie_list ) ) )	1
Q_149	how can i manipulate the string item in a list	C_149_1	def findall ( pattern pattern [ any_str ] , string any_str , flags union [ int , regex_flag ] = . ) _ > list	0
Q_149	how can i manipulate the string item in a list	C_149_2	while movie_list2 temp = movie_list2 . pop ( ) print ( type ( temp ) ) print ( string + str ( temp ) ) temp2 = temp . lstrip ( string )	0
Q_149	how can i manipulate the string item in a list	C_149_3	from urllib . request import urlopen page = urlopen ( string ) html_bytes = page . read ( ) html = html_bytes . decode ( string ) span_index = html . find ( string showtimes_wrapper string ) start_index = span_index + len ( string showtimes_wrapper string ) end_index = html . find ( string t_comingsoon string ) movie_info = html [ start_index end_index ]	0
Q_149	how can i manipulate the string item in a list	C_149_4	[ string , string , string , string , string , string , string , string , string , string ]	0
Q_149	how can i manipulate the string item in a list	C_149_5	var = [ var for var in range ( number ) if var = number ]	0
Q_149	how can i manipulate the string item in a list	C_149_6	var = [ ] for var in range ( number ) . if var = number . var . append ( var )	0
Q_149	how can i manipulate the string item in a list	C_149_7	[ [ var for var in string ] for var in range ( number ) ] [ [ string , string , string , string , string ] , [ string , string , string , string , string ] ]	0
Q_149	how can i manipulate the string item in a list	C_149_8	[ string for var in range ( number ) ] [ string , string , string , string ]	0
Q_149	how can i manipulate the string item in a list	C_149_9	"var = [ var . split ( string ) [ _ number ] . rstrip ( r string > string string showtimes_movie "" in var ]"	0
Q_149	how can i manipulate the string item in a list	C_149_10	var = [ ] for var in movie_info . split ( string ) if string in var split_strings_list = var . split ( string ) last_item_in_list = split_strings_list [ _ number ]	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_0	group1 / cats / breeds_5_cats001 . jpeg breeds_5_cats002 . jpeg dogs / breeds_4_dogs001 . jpeg breeds_4_dogs002 . jpeg group2 / cats / breeds_5_cats001 . jpeg breeds_5_cats002 . jpeg dogs / breeds_4_dogs001 . jpeg breeds_4_dogs002 . jpeg group3 / cats / breeds_5_cats001 . jpeg breeds_5_cats002 . jpeg dogs / breeds_4_dogs001 . jpeg breeds_4_dogs002 . jpeg	1
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_1	from tensorflow . keras . wrappers . scikit_learn import keras_classifier from sklearn . model_selection import cross_val_score import numpy as np from tensorflow . keras . layers import * from tensorflow . keras import sequential import os from glob2 import glob from itertools import groupby from itertools import accumulate import cv2 os . environ [ string ] = string import tensorflow as tf tf . config . experimental . list_physical_devices ( string ) os . chdir ( string ) filenames = glob ( string ) groups = [ list ( var ) for var , var in groupby ( sorted ( filenames ) , key = lambda x x . split ( os . sep ) [ number ] ) ] lengths = [ number ] + list ( accumulate ( map ( len , groups ) ) ) groups = [ i for s in groups for i in s ]	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_2	[ string , string , string , string , string , string , string , string , string , string ]	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_3	var = list ( ) for var in filenames array = cv2 . imread ( var ) / number resized = cv2 . resize ( array , ( number , number ) ) var . append ( resized ) x = np . array ( var ) . astype ( np . float32 ) y = np . array ( list ( map ( lambda x x . split ( os . sep ) [ number ] = = string , groups ) ) ) . astype ( int )	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_4	def build_model ( ) model = sequential ( ) model . add ( conv2_d ( number , ( number , number ) , input_shape = ( number , number , number ) ) ) model . add ( activation ( string ) ) model . add ( max_pooling2_d ( pool_size = ( number , number ) ) ) model . add ( flatten ( ) ) model . add ( dropout ( number . number ) ) model . add ( dense ( number ) ) model . add ( dropout ( number . number ) ) model . add ( dense ( number ) ) model . add ( activation ( string ) ) model . summary ( ) model . compile ( loss = string , optimizer = string , metrics = [ string , string ] ) return model keras_clf = keras_classifier ( build_fn = build_model , epochs = number , batch_size = number , verbose = number )	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_5	def three_fold_cv ( ) i = number while i < = number min_length = lengths [ i _ number ] max_length = lengths [ i ] idx = np . arange ( min_length , max_length , dtype = int ) yield idx , idx i + = number	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_6	var = three_fold_cv ( ) accuracies = cross_val_score ( estimator = keras_clf , scoring = string , x = x , y = y , cv = var ) print ( accuracies )	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_7	[ number . number number . number number . number ]	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_8	from tensorflow . keras . wrappers . scikit_learn import keras_classifier from sklearn . model_selection import cross_val_score import numpy as np from tensorflow . keras . layers import * from tensorflow . keras import sequential import os from glob2 import glob from itertools import groupby from itertools import accumulate import cv2 os . environ [ string ] = string import tensorflow as tf tf . config . experimental . list_physical_devices ( string ) os . chdir ( string ) filenames = glob ( string ) groups = [ list ( var ) for var , var in groupby ( sorted ( filenames ) , key = lambda x x . split ( os . sep ) [ number ] ) ] lengths = [ number ] + list ( accumulate ( map ( len , groups ) ) ) groups = [ i for s in groups for i in s ] images = list ( ) for image in filenames array = cv2 . imread ( image ) / number resized = cv2 . resize ( array , ( number , number ) ) images . append ( resized ) x = np . array ( images ) . astype ( np . float32 ) y = np . array ( list ( map ( lambda x x . split ( os . sep ) [ number ] = = string , groups ) ) ) . astype ( int ) def build_model ( ) model = sequential ( ) model . add ( conv2_d ( number , ( number , number ) , input_shape = ( number , number , number ) ) ) model . add ( activation ( string ) ) model . add ( max_pooling2_d ( pool_size = ( number , number ) ) ) model . add ( flatten ( ) ) model . add ( dropout ( number . number ) ) model . add ( dense ( number ) ) model . add ( dropout ( number . number ) ) model . add ( dense ( number ) ) model . add ( activation ( string ) ) model . summary ( ) model . compile ( loss = string , optimizer = string , metrics = [ string , string ] ) return model keras_clf = keras_classifier ( build_fn = build_model , epochs = number , batch_size = number , verbose = number ) def three_fold_cv ( ) i = number while i < = number min_length = lengths [ i _ number ] max_length = lengths [ i ] idx = np . arange ( min_length , max_length , dtype = int ) yield idx , idx i + = number tfc = three_fold_cv ( ) accuracies = cross_val_score ( estimator = keras_clf , scoring = string , x = x , y = y , cv = tfc ) print ( accuracies )	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_9	[ number . number number . number number . number ]	0
Q_150	k_fold cross_validation in kera with single output for binary class	C_150_10	from tensorflow . keras . wrappers . scikit_learn import keras_classifier from sklearn . model_selection import cross_val_score import numpy as np from tensorflow . keras . layers import * from tensorflow . keras import sequential from itertools import accumulate import tensorflow as tf	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_0	from tableauscraper import tableau_scraper as ts url = string ts = ts ( ) ts . loads ( url ) dashboard = ts . get_dashboard ( ) for var in dashboard . worksheets	1
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_1	post https / / public . tableau . com / { vizql_root } / sessions / { session_id } / commands / tabdoc / select	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_2	worksheet map_state_mobile dashboard vis o geral selection { string [ number ] , string string } select_options select _ options _ simple	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_3	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_4	{ string { string { string { string { string { string { string { string [ ] } } } } } , string { string { string { string { string { } , string { } , string { } , string { } , string { } , string { } } } } } } } }	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_5	string { string { string [ ] , string { string [ ] , string [ ] } } }	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_6	{ string string , string string , string string , < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = match this string string , string string , string [ ] , string string , string string , string string , string { string string , string number } , string string , < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = match this string true , string [ number < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = extract this ] , string [ number < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = extract this ] }	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_7	[ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ]	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_8	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_9	var = requests . post ( f string vizql_root string sessionid string , data = { string string , string string , string json . dumps ( { string [ int ( selected_index ) ] , string string } ) , string string } )	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_10	import requests from bs4 import beautiful_soup import json import re data_host = string	0
Q_151	how to scrape a tableau dashboard in which data be only display in a plot after click in a map	C_151_11	import requests from bs4 import beautiful_soup import json data_host = string r = requests . get ( f string , params = { string string } ) soup = beautiful_soup ( r . text , string ) tableau_data = json . loads ( soup . find ( string , { string string } ) . text ) data_url = f string vizql_root string sessionid string r = requests . post ( data_url , data = { string tableau_data [ string ] , } ) state_names = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] for var , var in enumerate ( state_names ) print ( f string ) selected_index = input ( string ) print ( f string ) r = requests . post ( f string vizql_root string sessionid string , data = { string string , string string , string json . dumps ( { string [ int ( selected_index ) ] , string string } ) , string string } ) data_segments = r . json ( ) [ string ] [ string ] [ string ] [ string ] [ string ] print ( data_segments [ max ( [ * data_segments ] ) ] [ string ] )	0
Q_152	return majority weight vote from array base in column	C_152_0	var = np . arange ( number ) + number m = ( x . reshape ( ( number , number , number ) ) = = var . reshape ( ( number , number , number ) ) ) np . argmax ( np . sum ( m , axis = number ) . t * w , axis = number ) + number	1
Q_152	return majority weight vote from array base in column	C_152_1	in [ number ] x = np . array ( [ [ number , number , number ] , . [ number , number , number ] , . [ number , number , number ] , . [ number , number , number ] ] ) . . w = np . array ( [ number . number , number . number , number . number ] )	0
Q_152	return majority weight vote from array base in column	C_152_2	in [ number ] i = np . arange ( number ) + number	0
Q_152	return majority weight vote from array base in column	C_152_3	in [ number ] m = ( x . reshape ( ( number , number , number ) ) = = i . reshape ( ( number , number , number ) ) ) * number in [ number ] m out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] )	0
Q_152	return majority weight vote from array base in column	C_152_4	in [ number ] np . sum ( m , axis = number ) out [ number ] array ( [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] )	0
Q_152	return majority weight vote from array base in column	C_152_5	in [ number ] np . sum ( m , axis = number ) . t * w out [ number ] array ( [ [ number . number , number . number , number . ] , [ number . number , number . number , number . number ] , [ number . number , number . number , number . ] , [ number . number , number . , number . number ] ] )	0
Q_152	return majority weight vote from array base in column	C_152_6	in [ number ] np . argmax ( np . sum ( m , axis = number ) . t * w , axis = number ) + number out [ number ] array ( [ number , number , number , number ] )	0
Q_152	return majority weight vote from array base in column	C_152_7	var = np . array ( [ [ number , number , number , number ] ] ) w = np . array ( [ number . number , number . number , number . number , number . number ] )	0
Q_152	return majority weight vote from array base in column	C_152_8	[ number . number , number . number , number . , number . number ]	0
Q_152	return majority weight vote from array base in column	C_152_9	var = np . sum ( m , axis = number ) . t * w result = np . argmax ( np . sum ( m * w , axis = number ) , axis = number ) + number special_cases = np . argwhere ( np . sum ( var = = np . max ( var ) , axis = number ) > number )	0
Q_152	return majority weight vote from array base in column	C_152_10	var = np . arange ( number ) + number m = ( x [ np . newaxis ] = = var [ , np . newaxis , np . newaxis ] ) np . argmax ( np . sum ( m , axis = number ) . t * w , axis = number ) + number	0
Q_153	extract minute per hour base on occupancy in excel	C_153_0	import pandas as pd df = pd . read_excel ( string , parse_dates = [ number ] ) df [ string ] = df . timestamp . dt . time	1
Q_153	extract minute per hour base on occupancy in excel	C_153_1	timestamp room name occupancy time number number _ number number _ number number number number number number number number room number number number number number number number number number number _ number number _ number number number number number number number number room number number number number number number number number number number _ number number _ number number number number number number room number number number number number number number number _ number number _ number number number number number number room number number number number number number number number _ number number _ number number number number number number number room number number number number number number number number number _ number number _ number number number number number number number room number number number number number number number number number _ number number _ number number number number number number room number number number number number number number number _ number number _ number number number number number number room number number number number number number	0
Q_153	extract minute per hour base on occupancy in excel	C_153_2	var = df . set_index ( string ) var . loc [ pd . timestamp ( string ) ] = ( string , number . number , none ) var . sort_index ( inplace = true )	0
Q_153	extract minute per hour base on occupancy in excel	C_153_3	room name occupancy time timestamp number _ number number _ number number number number number number room number number . number none number _ number number _ number number number number number number number number room number number . number number number number number number number number _ number number _ number number number number number number number number room number number . number number number number number number number number _ number number _ number number number number number number room number number . number number number number number number _ number number _ number number number number number number room number number . number number number number number number _ number number _ number number number number number number number room number number . number number number number number number number _ number number _ number number number number number number number room number number . number number number number number number number _ number number _ number number number number number number room number number . number number number number number number _ number number _ number number number number number number room number number . number number number number number	0
Q_153	extract minute per hour base on occupancy in excel	C_153_4	var = df2 . resample ( string ) . ffill ( )	0
Q_153	extract minute per hour base on occupancy in excel	C_153_5	var = upsampled . resample ( string ) . mean ( )	0
Q_153	extract minute per hour base on occupancy in excel	C_153_6	occupancy timestamp number _ number number _ number number number number number number number . number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number . number	0
Q_153	extract minute per hour base on occupancy in excel	C_153_7	var = df . groupby ( string , as_index = false ) . resample ( string ) . ffill ( ) var . index = var . index . get_level_values ( number ) result = var . groupby ( string ) . resample ( string ) . mean ( )	0
Q_153	extract minute per hour base on occupancy in excel	C_153_8	occupancy room name timestamp room number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number . number room number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number number . number number _ number number _ number number number number number number . number	0
Q_153	extract minute per hour base on occupancy in excel	C_153_9	import pandas as pd df = pd . read_excel ( string , parse_dates = [ number ] ) df2 = df . set_index ( string )	0
Q_153	extract minute per hour base on occupancy in excel	C_153_10	room name room number room number timestamp number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_0	post http / / alta . registries . gov . ab . ca / spin_ii / mapserver . aspx	1
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_1	switch ( element_type ) { case number var line_color = new way_to . wtb . element . line_color ( ) byte_offset = line_color . parse ( data_reader , byte_offset ) output_element = line_color break case number var line_style = new way_to . wtb . element . line_style ( ) byte_offset = line_style . parse ( data_reader , byte_offset ) output_element = line_style break case number var ellipse = new way_to . wtb . element . ellipse ( ) byte_offset = ellipse . parse ( data_reader , byte_offset ) output_element = ellipse break . }	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_2	with open ( string , mode = string ) as file encoded_data = file . read ( ) offset = number objects = [ ] while offset < len ( encoded_data ) element_size = encoded_data [ offset ] offset + = number element_type = encoded_data [ offset ] offset + = number if element_type = = number break cur_elem_size = element_size cur_elem_type = element_type if element_type = = number large_element_size = int . from_bytes ( encoded_data [ offset offset + number ] , string ) offset + = number large_element_type = int . from_bytes ( encoded_data [ offset offset + number ] , string ) offset + = number cur_elem_size = large_element_size cur_elem_type = large_element_type print ( f string ) offset_init = offset if cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number text_length = cur_elem_size _ number objects . append ( { string string , string int . from_bytes ( encoded_data [ offset offset + number ] , string ) , string int . from_bytes ( encoded_data [ offset + number offset + number ] , string ) , string int . from_bytes ( encoded_data [ offset + number offset + number ] , string ) , string encoded_data [ offset + number offset + number + ( text_length * number ) ] . decode ( string ) . replace ( string , string ) } ) offset + = number + ( text_length * number ) elif cur_elem_type = = number num_point = int ( cur_elem_size / number ) offset + = number * num_point elif cur_elem_type = = number num_point = int ( cur_elem_size / number ) offset + = number * num_point elif cur_elem_type = = number num_point = int ( cur_elem_size / number ) offset + = number * num_point elif cur_elem_type = = number num_point = int ( cur_elem_size / number ) offset + = number * num_point elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number pass elif cur_elem_type = = number offset + = number elif cur_elem_type = = number offset + = number elif cur_elem_type = = number pass elif cur_elem_type = = number high_short = int . from_bytes ( encoded_data [ offset + number offset + number ] , string ) low_short = int . from_bytes ( encoded_data [ offset + number offset + number ] , string ) objects . append ( { string string , string int . from_bytes ( encoded_data [ offset offset + number ] , string ) , string ( high_short < < number ) + low_short } ) offset + = number elif cur_elem_type = = number	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_3	get https / / alta . registries . gov . ab . ca / spinii / logon . aspx	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_4	post https / / alta . registries . gov . ab . ca / spinii / logon . aspx	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_5	get https / / alta . registries . gov . ab . ca / spinii / legalnotice . aspx	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_6	post https / / alta . registries . gov . ab . ca / spinii / legalnotice . aspx	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_7	post http / / alta . registries . gov . ab . ca / spin_ii / mapserver . aspx	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_8	{ string string , string string , string linc_number , string string ,	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_9	[ { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number , string number , string number , string number , string number } , { string string , string string , string number , string number , string number , string number ,	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_10	var = [ var for var in objects if var . get ( string , number ) < number and var . get ( string ) = = number ] [ number ] print ( var )	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_11	get https / / alta . registries . gov . ab . ca / spin_ii / popup_title_search . aspx ? title = { selected_zone [ string ] }	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_12	import requests from bs4 import beautiful_soup import pandas as pd linc_number = string	0
Q_154	ca not fetch a number populate dynamically from a webpage after follow some step	C_154_13	title number type linc number short legal rights registration date change / cancel date number number number current title number number number number number surface number / number number / number number / number / number number number number current title number number number number number surface number / number number / number number / number number / number number number number current title number number number number number surface number number / number number / number number / number number / number number number number current title number number number number number surface number / number number / number number number / number number / number number number number current title number number number number number surface number / number number / number number / number / number number number number current title number number number number number surface number / number number / number number / number / number number number number current title number number number number number surface number / number number / number number number / number number / number number number number current title number number number number number surface number / number number / number number number / number / number number number number current title number number number number number surface number / number number / number number / number number / number number number number current title number number number number number surface number / number number / number number / number / number	0
Q_155	how to create another dictionary which contain string	C_155_0	def get_set ( var , field ) return { var [ field ] } if isinstance ( var [ field ] , str ) else set ( var [ field ] )	1
Q_155	how to create another dictionary which contain string	C_155_1	[ { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_155	how to create another dictionary which contain string	C_155_2	def contains ( item , field , values ) string string string if field item = item . get ( field )	0
Q_155	how to create another dictionary which contain string	C_155_3	var = [ { string string , string string , string [ string ] , string [ string ] , string string } , { string string , string string , string [ string ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_155	how to create another dictionary which contain string	C_155_4	[ { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_155	how to create another dictionary which contain string	C_155_5	var = [ { string string , string string , string [ { string string , string string } ] , string [ string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_155	how to create another dictionary which contain string	C_155_6	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_155	how to create another dictionary which contain string	C_155_7	var = [ { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } , ] } , { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } , ] } , { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } ] } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_155	how to create another dictionary which contain string	C_155_8	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_155	how to create another dictionary which contain string	C_155_9	var = [ { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string ] , string [ string ] , string string } } , { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } } , { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_155	how to create another dictionary which contain string	C_155_10	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_156	reshape array in array in array	C_156_0	import uproot4 import skhep_testdata events = uproot4 . open ( skhep_testdata . data_path ( string ) ) [ string ]	1
Q_156	reshape array in array in array	C_156_1	events . show ( filter_name = string ) name typename interpretation _ + _ + _ muon_px float [ ] as_jagged ( as_dtype ( string ) ) muon_py float [ ] as_jagged ( as_dtype ( string ) ) muon_pz float [ ] as_jagged ( as_dtype ( string ) ) muon_e float [ ] as_jagged ( as_dtype ( string ) ) muon_charge int32_t [ ] as_jagged ( as_dtype ( string ) ) muon_iso float [ ] as_jagged ( as_dtype ( string ) )	0
Q_156	reshape array in array in array	C_156_2	var = events . arrays ( filter_name = string ) var < array [ { muon_px [ _ number . number , number . number , . number ] } ] type = string muon_px string >	0
Q_156	reshape array in array in array	C_156_3	import awkward1 as ak ak . type ( muons ) number * { string var * float32 , string var * float32 , string var * float32 , string var * float32 , string var * int32 , string var * float32 }	0
Q_156	reshape array in array in array	C_156_4	muons [ number ] . tolist ( ) { string [ _ number . number , number . number ] , string [ _ number . number , number . number ] , string [ _ number . number , _ number . number ] , string [ number . number , number . number ] , string [ number , _ number ] , string [ number . number , number . number ] }	0
Q_156	reshape array in array in array	C_156_5	ak . num ( muons ) < array [ { muon_px number , . muon_iso number } ] type = string muon_px string muon_py string >	0
Q_156	reshape array in array in array	C_156_6	ak . num ( muons ) [ number ] . tolist ( ) { string number , string number , string number , string number , string number , string number }	0
Q_156	reshape array in array in array	C_156_7	ak . max ( ak . num ( muons ) ) number	0
Q_156	reshape array in array in array	C_156_8	ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) < array [ { muon_px [ _ number . number , number . number , . none ] } ] type = string muon_px string >	0
Q_156	reshape array in array in array	C_156_9	{ string [ _ number . number , number . number , none , none ] , string [ _ number . number , number . number , none , none ] , string [ _ number . number , _ number . number , none , none ] , string [ number . number , number . number , none , none ] , string [ number , _ number , none , none ] , string [ number . number , number . number , none , none ] }	0
Q_156	reshape array in array in array	C_156_10	ak . fill_none ( ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) , number ) [ number ] . tolist ( ) { string [ _ number . number , number . number , number . number , number . number ] , string [ _ number . number , number . number , number . number , number . number ] , string [ _ number . number , _ number . number , number . number , number . number ] , string [ number . number , number . number , number . number , number . number ] , string [ number , _ number , number , number ] , string [ number . number , number . number , number . number , number . number ] }	0
Q_156	reshape array in array in array	C_156_11	var = ak . unzip ( ak . fill_none ( ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) , number ) ) var ( < array [ [ _ number . number , number . number , number , number , . number . number , number , number , number ] ] type = string > , < array [ [ _ number . number , number . number , number , number , . number , number , number ] ] type = string > , < array [ [ _ number . number , _ number . number , number , number , . number , number , number ] ] type = string > , < array [ [ number . number , number . number , number , number ] , . number . number , number , number , number ] ] type = string > , < array [ [ number , _ number , number , number ] , . [ _ number , number , number , number ] ] type = string > , < array [ [ number . number , number . number , number , number ] , . [ number , number , number , number ] ] type = string > )	0
Q_156	reshape array in array in array	C_156_12	var = [ ak . to_numpy ( var ) for var in arrays ] var [ array ( [ [ _ number . number , number . number , number . , number . ] , [ _ number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . ] , . , [ _ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] ] ) , array ( [ [ _ number . number , number . number , number . , number . ] , [ _ number . number , number . , number . , number . ] , [ _ number . number , number . number , number . , number . ] , . , [ _ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] , [ _ number . number , number . , number . , number . ] ] ) , array ( [ [ _ number . number , _ number . number , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . ] , . , [ _ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] ] ) , array ( [ [ number . number , number . number , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . ] , . , [ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] ] ) , array ( [ [ number , _ number , number , number ] , [ number , number , number , number ] , [ number , _ number , number , number ] , . , [ _ number , number , number , number ] , [ _ number , number , number , number ] , [ _ number , number , number , number ] ] ) , array ( [ [ number . number , number . number , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . number , number . number , number . , number . ] , . , [ number . number , number . , number . , number . ] , [ number . number , number . , number . , number . ] , [ number . , number . , number . , number . ] ] ) ]	0
Q_156	reshape array in array in array	C_156_13	import numpy as np np . dstack ( numpy_arrays ) array ( [ [ [ _ number . number , _ number . number , _ number . number , number . number , number . , number . number ] , [ number . number , number . number , _ number . number , number . number , _ number . , number . number ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] , [ [ _ number . number , _ number . number , number . number , number . number , number . , number . number ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] , [ [ number . number , _ number . number , number . number , number . number , number . , number . number ] , [ number . number , number . number , number . number , number . number , _ number . , number . number ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] , . , [ [ _ number . number , _ number . number , _ number . number , number . number , _ number . , number . number ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] , [ [ number . number , number . number , number . number , number . number , _ number . , number . number ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] , [ [ number . number , _ number . number , number . number , number . number , _ number . , number . ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . ] ] ] )	0
Q_157	order list of some element by list of rule	C_157_0	from functools import cmp_to_key comes_after = { ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) } cmp_to_key def ordering_rules ( a , b ) if a = = b return number return number if ( a , b ) in comes_after else _ number sorted_colors = sorted ( colors , key = ordering_rules )	1
Q_157	order list of some element by list of rule	C_157_1	var = [ string , string , string , string ] sorted ( var , key = ordering_rules ) [ string , string , string , string ]	0
Q_157	order list of some element by list of rule	C_157_2	from functools import total_ordering total_ordering class color_sort_key comes_after = { ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) } _slots_ = ( string , ) def _init_ ( self , color ) self . color = color def _lt_ ( self , other ) if not isinstance ( other , color_sort_key ) return not_implemented return ( other . color , self . color ) in self . comes_after def _eq_ ( self , other ) if not isinstance ( other , color_sort_key ) return not_implemented return self . color = = other . color	0
Q_157	order list of some element by list of rule	C_157_3	sorted ( colors , key = color_sort_key ) [ string , string , string , string ]	0
Q_157	order list of some element by list of rule	C_157_4	from functools import partial , total_ordering total_ordering class color_sort_key _slots_ = ( string , string ) classmethod def with_rules ( cls , rules ) return partial ( cls , set ( rules ) ) def _init_ ( self , comes_after , color ) self . comes_after = comes_after self . color = color def _lt_ ( self , other ) if not isinstance ( other , color_sort_key ) return not_implemented return ( other . color , self . color ) in self . comes_after def _eq_ ( self , other ) if not isinstance ( other , color_sort_key ) return not_implemented return self . color = = other . color	0
Q_157	order list of some element by list of rule	C_157_5	sorted ( colors , key = color_sort_key . with_rules ( rules ) ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_157	order list of some element by list of rule	C_157_6	from heapq import heapify , heappop , heappush def topological_sort ( colors , rules ) forward = { var set ( ) for var in colors } reverse = { } for a , b in rules if forward . keys ( ) > = { a , b }	0
Q_157	order list of some element by list of rule	C_157_7	var = [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] rules = [ ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) ] topological_sort ( var , rules ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_157	order list of some element by list of rule	C_157_8	var = [ ( var , var ) for var , var in rules ] topological_sort ( colors , var ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_157	order list of some element by list of rule	C_157_9	( number , number , number ) > ( number , number , number ) ( number , number , number ) > ( number , number , number )	0
Q_157	order list of some element by list of rule	C_157_10	topological_sort ( colors , rules ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_157	order list of some element by list of rule	C_157_11	from graphlib import topological_sorter sorter = topological_sorter ( dict . fromkeys ( colors , ( ) ) ) used = set ( colors ) for var , var in rules . if used > = { var , var } . sorter . add ( var , var ) . sorted_colors = list ( sorter . static_order ( ) ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in static_order self . prepare ( ) file string , line number , in prepare raise cycle_error ( f string , cycle ) graphlib . cycle_error ( string , [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] )	0
Q_157	order list of some element by list of rule	C_157_12	from graphlib import topological_sorter , cycle_error def best_effort_topological_sort ( colors , rules ) sorter = topological_sorter ( dict . fromkeys ( colors , ( ) ) ) used = set ( colors ) for var , var in rules if used > = { var , var } sorter . add ( var , var ) try sorter . prepare ( ) except cycle_error pass result = [ ] while sorter . is_active ( ) for node in sorter . get_ready ( ) used . remove ( node ) result . append ( node ) sorter . done ( node ) if used	0
Q_157	order list of some element by list of rule	C_157_13	best_effort_topological_sort ( colors , rules ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_157	order list of some element by list of rule	C_157_14	var = [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] rules = [ ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) , ( ( number , number , number ) , ( number , number , number ) ) ]	0
Q_157	order list of some element by list of rule	C_157_15	topological_sort ( colors , rules ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] best_effort_topological_sort ( colors , rules ) [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_158	sort a random array use permutation	C_158_0	var = [ number , number , number ] b = np . array ( [ string , string , string ] ) print ( b [ var ] )	1
Q_158	sort a random array use permutation	C_158_1	var = [ number , number , number ] b = np . array ( [ string , string , string ] ) c = b for var in range ( number ) c = c [ var ] print ( c )	0
Q_158	sort a random array use permutation	C_158_2	var = [ number , number , number ] b = np . array ( [ number , number , number ] ) c = b for var in range ( number ) c = c [ var ] print ( c )	0
Q_158	sort a random array use permutation	C_158_3	var = [ number , number , number ] b = np . array ( [ number , number , number ] ) c = b for var in range ( number ) c = c [ var ] print ( c )	0
Q_158	sort a random array use permutation	C_158_4	var = [ number , number , number , number , number , number , number , number ] b = np . array ( [ number , number , number , number , number , number , number , number ] ) c = b for var in range ( number ) c = c [ var ] print ( c )	0
Q_158	sort a random array use permutation	C_158_5	var = np . array ( [ number , number , number , number , number , number , number , number , number , number ] ) var = var [ var ] var = var [ var ] print ( var )	0
Q_158	sort a random array use permutation	C_158_6	var = np . array ( [ number , number , number , number , number , number , number , number , number , number ] ) a2 = var [ var ] a4 = a2 [ a2 ] print ( a4 )	0
Q_158	sort a random array use permutation	C_158_7	var = np . array ( [ number , number , number , number , number , number , number , number , number , number ] ) a4 = ( var [ var ] ) [ var [ var ] ]	0
Q_158	sort a random array use permutation	C_158_8	a [ b [ c ] ] = = ( a [ b ] ) [ c ]	0
Q_158	sort a random array use permutation	C_158_9	var = np . array ( [ number , number , number , number , number , number , number , number , number , number ] ) a4 = ( ( var [ var ] ) [ var ] ) [ var ] print ( a4 )	0
Q_158	sort a random array use permutation	C_158_10	var = np . array ( [ number , number , number , number , number , number , number , number , number , number ] ) a4 = var [ var ] [ var ] [ var ] print ( a4 )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_0	df [ string ] = df . ts . shift ( )	1
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_1	df . set_index ( string , inplace = true )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_2	var = df . event . resample ( string ) . asfreq ( ) . index . union ( df . index )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_3	var = df . reindex ( ind ) var . event = var . event . bfill ( )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_4	def parts ( grp ) lst_row = grp . iloc [ _ number ]	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_5	var = df2 . groupby ( np . isfinite ( df2 . duration . values [ _ number ] ) . cumsum ( ) [ _ number ] , sort = false ) . apply ( parts ) . reset_index ( level = number , drop = true )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_6	number _ number number _ number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number dtype int32	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_7	var = prod_det . resample ( string ) . sum ( ) . rename ( string )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_8	number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number number _ number number _ number number number number number number freq h , name produced , dtype int32	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_9	var = prod . to_frame ( ) . join ( df2 . event )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_10	result [ string ] = df . duration . resample ( string ) . apply ( lambda grp grp . index . min ( ) )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_11	var = var . reset_index ( ) . rename ( columns = { string string } )	0
Q_159	downsampling in panda data_frame by divide observation into ratio	C_159_12	ts produced event ts_min number number _ number number _ number number number number number number a number _ number number _ number number number number number number number number _ number number _ number number number number number number a na_t number number _ number number _ number number number number number number a na_t number number _ number number _ number number number number number a number _ number number _ number number number number number number _ number number _ number number number number number number a number _ number number _ number number number number number number number _ number number _ number number number number number number c number _ number number _ number number number number number number number number _ number number _ number number number number number number b number _ number number _ number number number number number number number number _ number number _ number number number number number number c number _ number number _ number number number number number number number number _ number number _ number number number number number number c na_t number number _ number number _ number number number number number number c number _ number number _ number number number number number number	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_0	in [ number ] a , x , y out [ number ] ( array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) , array ( [ number , number , number , number , number ] ) , array ( [ number , number , number , number , number ] ) )	1
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_1	in [ number ] x = np . diag ( x ) y = np . diag ( y )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_2	in [ number ] a_sp out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format >	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_3	in [ number ] x_sp = sparse . csr_matrix ( x ) y_sp = sparse . csr_matrix ( y ) in [ number ] x_sp out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format >	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_4	in [ number ] x_sp = sparse . diags ( x ) y_sp = sparse . diags ( y ) in [ number ] x_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements ( number diagonals ) in di_agonal format >	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_5	in [ number ] x a y out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_6	in [ number ] x a_sp y out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_7	in [ number ] x a_sp out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_8	in [ number ] x_sp a_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] x_sp a_sp y_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] _ . a out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_9	in [ number ] x [ , none ] * a * y [ none , ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_10	in [ number ] y [ none , ] * a_sp	0
Q_160	multiplication of sparse matrix by diagonal matrix	C_160_11	in [ number ] a_sp . multiply ( y [ none , ] ) out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in co_ordinate format > in [ number ] _ . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] a_sp . multiply ( y [ none , ] ) . multiply ( x [ , none ] ) out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in co_ordinate format > in [ number ] _ . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_161	permutation of list with overlap value	C_161_0	+ _ + _ + s1 day + _ + _ + s2 night + _ + _ + s3 day + _ + _ + s4 night + _ + _ + s5 day + _ + _ + s6 night + _ + _ +	1
Q_161	permutation of list with overlap value	C_161_1	+ _ + _ + _ + shift day people or night + _ + _ + _ + s1 day ? ? ? + _ + _ + _ + s2 night p1 + _ + _ + _ + s3 day + _ + _ + _ + s4 night + _ + _ + _ + s5 day + _ + _ + _ + s6 night + _ + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_2	+ _ + _ + _ + shift day people or night + _ + _ + _ + s1 day p2 , p3 , p4 + _ + _ + _ + s2 night p1 + _ + _ + _ + s3 day + _ + _ + _ + s4 night + _ + _ + _ + s5 day + _ + _ + _ + s6 night + _ + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_3	+ _ + _ + _ + shift day people or night + _ + _ + _ + s1 day p2 , p3 , p4 + _ + _ + _ + s2 night p1 + _ + _ + _ + s3 day not ( p1 ) + _ + _ + _ + s4 night + _ + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_4	+ _ + _ + _ + _ + shift day quantity people or of night people + _ + _ + _ + _ + s1 day number p2 , p3 , p4 + _ + _ + _ + _ + s2 night number p1 + _ + _ + _ + _ + s3 day number p2 , p3 , p4 + _ + _ + _ + _ + s4 night number p1 + _ + _ + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_5	+ _ + _ + _ + _ + _ + _ + _ + shift day quantity p1 p2 p3 p4 or of night people + _ + _ + _ + _ + _ + _ + _ + s1 day number work snooze + _ + _ + _ + _ + _ + _ + _ + s2 night number work snooze + _ + _ + _ + _ + _ + _ + _ + s3 day number snooze work + _ + _ + _ + _ + _ + _ + _ + s4 night number snooze work + _ + _ + _ + _ + _ + _ + _ + s5 day number snooze work + _ + _ + _ + _ + _ + _ + _ + s6 night number snooze work + _ + _ + _ + _ + _ + _ + _ + s7 day number snooze work + _ + _ + _ + _ + _ + _ + _ + s8 night number snooze work + _ + _ + _ + _ + _ + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_6	+ _ + _ + single _ shift snooze _ work _ snooze + _ + _ + double _ shift snooze _ work _ work _ snooze + _ + _ + triple _ shift snooze _ work _ work _ work _ snooze + _ + _ +	0
Q_161	permutation of list with overlap value	C_161_7	shift day quantity p1 p2 p3 p4 or of night people s1 day number work work work snooze s2 night number work snooze snooze snooze s3 day number snooze work work work s4 night number snooze work snooze snooze s5 day number work snooze work work s6 night number snooze snooze work snooze s7 day number work work snooze work s8 night number snooze snooze snooze work	0
Q_161	permutation of list with overlap value	C_161_8	shift day number p1 p2 p3 p4 or of night people working s1 day number s2 night number work s3 day number s4 night number work s5 day number s6 night number work s7 day number s8 night number work s9 day number s10 night number	0
Q_161	permutation of list with overlap value	C_161_9	shift day number p1 p2 p3 p4 or of night people working s1 day number s2 night number work s3 day number snooze s4 night number work s5 day number snooze s6 night number work s7 day number snooze s8 night number work s9 day number snooze	0
Q_161	permutation of list with overlap value	C_161_10	shift day number p1 p2 p3 p4 or of night people working s1 day number s2 night number work s3 day number snooze work work work s4 night number work s5 day number work snooze work work s6 night number work s7 day number work work snooze work s8 night number work s9 day number work work work snooze	0
Q_161	permutation of list with overlap value	C_161_11	shift day number p1 p2 p3 p4 or of night people working s1 day number work work work snooze s2 night number work snooze snooze snooze s3 day number snooze work work work s4 night number snooze work snooze snooze s5 day number work snooze work work s6 night number snooze snooze work snooze s7 day number work work snooze work s8 night number snooze snooze snooze work s9 day number work work work snooze s10 night number work snooze snooze snooze	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_0	var = [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] player2 = [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ]	1
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_1	var = np . ones ( number , dtype = np . uint8 ) player2 = np . full ( number , number , dtype = np . uint8 )	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_2	class player ( object ) def _init_ ( self , number ) self . remaining_pieces = number self . number = number	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_3	def create_board ( ) board = np . zeros ( ( row_count , column_count ) ) return board board = create_board ( )	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_4	var = np . zeros ( ( row_count , column_count ) )	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_5	var = [ ( _ number , _ number ) , ( _ number , number ) , ( _ number , number ) , ( number , number ) , ( number , number ) , ( number , _ number ) , ( number , number ) , ( number , _ number ) ]	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_6	for var in directions x = row y = column	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_7	while true x = x + d [ number ] y = y + d [ number ]	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_8	[ [ number number number number number number number number ] [ number number number number number number number number ] [ number number number number number number number number ] [ number number number number number number number number ] [ number number * number number number number number ] [ number number number number number number number number ] [ number number number number number number number number ] [ number number number number number number number number ] ]	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_9	if board [ x ] [ y ] = = number break	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_10	if p . number = = board [ x ] [ y ] print ( f string ) i = row j = column while i = x or j = y i = i + d [ number ] j = j + d [ number ] print ( f string ) board [ i ] [ j ] = p . number	0
Q_162	make a game in python call othello it a real game cannot change specific value in a array	C_162_11	import pygame , sys import math import numpy as np pygame . init ( ) row_count = number column_count = number player_count = number red = ( number , number , number ) beige = ( number , number , number ) black = ( number , number , number ) white = ( number , number , number ) squaresize = number width = column_count * squaresize height = row_count * squaresize size = ( width , height ) screen = pygame . display . set_mode ( size ) screen . fill ( red )	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_0	for var in range ( number ) . print ( string ) . break . else	1
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_1	for var in range ( number ) . print ( string ) . else	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_2	for . < loop body > else < else statement >	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_3	for . < loop body > < else statement >	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_4	var = [ ] for var in trip_chains for stepscount_ in range ( len ( var ) _ number ) var . append ( [ var [ stepscount_ ] , var [ stepscount_ + number ] ] ) else var . append ( [ var [ _ number ] , var [ number ] ] )	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_5	var = [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] chain_steps = [ ] for var in var chain_step = [ ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_6	[ [ [ string , string ] , [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] , [ string , string ] ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_7	[ var if var < number else break for var in range ( number ) ] traceback ( most recent call last ) [ var if var < number else break for var in range ( number ) ] ^ syntax_error invalid syntax	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_8	var = [ string , string , string ] chain_step = [ ] for var in range ( len ( var ) _ number ) chain_step . append ( [ var [ var ] , var [ var + number ] ] ) chain_step . append ( [ var [ _ number ] , var [ number ] ] )	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_9	[ [ string , string ] , [ string , string ] , [ string , string ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_10	var = [ ] for var in list ( range ( len ( chain_ ) _ number ) ) + [ _ number ] var . append ( [ chain_ [ var ] , chain_ [ var + number ] ] )	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_11	var = [ string , string , string ] [ [ var [ var ] , var [ var + number ] ] for var in list ( range ( len ( var ) _ number ) ) + [ _ number ] ] [ [ string , string ] , [ string , string ] , [ string , string ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_12	var = [ string , string , string ] [ [ var [ var ] , var [ var + number ] ] for var in range ( len ( var ) _ number ) ] + [ [ var [ _ number ] , var [ number ] ] ] [ [ string , string ] , [ string , string ] , [ string , string ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_13	var = [ [ [ var [ var ] , var [ var + number ] ] for var in range ( len ( var ) _ number ) ] + [ [ var [ _ number ] , var [ number ] ] ] for var in trip_chains ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_14	var = [ ] for var in zip ( chain_ , chain_ [ number ] + [ chain_ [ number ] ] ) var . append ( var ) pprint ( var )	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_15	[ ( string , string ) , ( string , string ) , ( string , string ) ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_16	chain [ number ] , chain [ number ] , . chain_ [ n _ number ] , chain_ [ n _ number ] < _ chain_ chain [ number ] , chain [ number ] , . chain_ [ n _ number ] , chain_ [ number ] < _ chain_ [ number ] + [ chain_ [ number ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_17	var = [ [ string , string , string ] , . [ string , string , string ] , . [ string , string , string ] ] [ [ var for var in zip ( chain_ , chain_ [ number ] + [ chain_ [ number ] ] ) ] for chain_ in var ] [ [ ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) ] ]	0
Q_163	use an else clause like the one in formal for loop but in a list comprehension be it possible	C_163_18	[ list ( zip ( var , var [ number ] + [ var [ number ] ] ) ) for var in trip_chains ] [ [ ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) ] ]	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_0	def cut ( t , p ) def loop ( t , r ) if not t yield r elif p ( t [ number ] ) yield r yield from loop ( t [ number ] , [ t [ number ] ] ) else yield from loop ( t [ number ] , [ * r , t [ number ] ] ) return list ( loop ( t , [ ] ) )	1
Q_164	recursively divide a list into sublists base on a predicate	C_164_1	print ( cut ( [ ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number , number , number , number , number , number ] , lambda x x number = number ) )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_2	[ [ ] ] [ [ ] , [ number , number ] , [ number , number ] ] [ [ number , number ] , [ number , number , number , number ] , [ number , number ] , [ number ] ]	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_3	def cut ( t , p ) def loop ( t , r ) if not t yield r elif not r yield from loop ( t [ number ] , [ t [ number ] ] ) elif p ( t [ number ] ) yield r yield from loop ( t [ number ] , [ t [ number ] ] ) else yield from loop ( t [ number ] , [ * r , t [ number ] ] ) return list ( loop ( t , [ ] ) )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_4	print ( cut ( [ ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number , number , number , number , number , number ] , lambda x x number = number ) )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_5	[ [ ] ] [ [ number , number ] , [ number , number ] ] [ [ number , number ] , [ number , number , number , number ] , [ number , number ] , [ number ] ]	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_6	def cut ( t , p , r = [ ] ) if not t return [ r ] elif not r return cut ( t [ number ] , p , [ t [ number ] ] ) elif p ( t [ number ] ) return [ r , * cut ( t [ number ] , p , [ t [ number ] ] ) ] else return cut ( t [ number ] , p , [ * r , t [ number ] ] )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_7	print ( cut ( [ ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number ] , lambda x x number = number ) ) print ( cut ( [ number , number , number , number , number , number , number , number , number ] , lambda x x number = number ) )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_8	[ [ ] ] [ [ number , number ] , [ number , number ] ] [ [ number , number ] , [ number , number , number , number ] , [ number , number ] , [ number ] ]	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_9	def first ( t ) return t [ number ] def rest ( t ) return t [ number ]	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_10	def cut ( t , p ) def loop ( t , r ) if not t yield r elif not r yield from loop ( rest ( t ) , [ first ( t ) ] ) elif p ( first ( t ) ) yield r yield from loop ( rest ( t ) , [ first ( t ) ] ) else yield from loop ( rest ( t ) , [ * r , first ( t ) ] ) return list ( loop ( t , [ ] ) )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_11	def cut ( t , p , r = [ ] ) if not t return [ r ] elif not r return cut ( rest ( t ) , p , [ first ( t ) ] ) elif p ( first ( t ) ) return [ r , * cut ( rest ( t ) , p , [ first ( t ) ] ) ] else return cut ( rest ( t ) , p , [ * r , first ( t ) ] )	0
Q_164	recursively divide a list into sublists base on a predicate	C_164_12	def cut ( t , p , r = [ ] ) if not t return [ r ] else ( first , * rest ) = t	0
Q_165	insert column into array use scaler obj	C_165_0	var = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) print ( var ) print ( var [ , number ] ) print ( var [ , [ number ] ] ) var [ [ number number ] [ number number ] [ number number ] ] var [ , number ] [ number number number ] var [ , [ number ] ] [ [ number ] [ number ] [ number ] ]	1
Q_165	insert column into array use scaler obj	C_165_1	var = np . array ( [ [ number , number ] , [ number , number ] ] ) print ( var , string ) c4 = np . insert ( var , number , [ [ number , number ] , [ number , number ] ] , axis = number ) print ( c4 , string )	0
Q_165	insert column into array use scaler obj	C_165_2	a [ , number ] = [ a01 a11 ] = [ [ number number ] [ number number ] ]	0
Q_165	insert column into array use scaler obj	C_165_3	var = [ [ number ] a11 = [ [ number ] [ number ] ] [ number ] ]	0
Q_165	insert column into array use scaler obj	C_165_4	[ [ number number number number ] [ number number number number ] ]	0
Q_165	insert column into array use scaler obj	C_165_5	var = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) c11 = np . insert ( var , number , [ number , number ] , axis = number ) print ( c11 , string ) c12 = np . insert ( var , number , [ [ number ] , [ number ] ] , axis = number ) print ( c12 , string )	0
Q_165	insert column into array use scaler obj	C_165_6	a [ number , ] = [ a10 a11 ] = [ number number ]	0
Q_165	insert column into array use scaler obj	C_165_7	var = [ number ] a11 = [ number ]	0
Q_165	insert column into array use scaler obj	C_165_8	a [ number , ] = [ a10 a11 ] = [ [ number number ] [ number number ] ]	0
Q_165	insert column into array use scaler obj	C_165_9	var = [ [ number ] a11 = [ [ number ] [ number ] ] [ number ] ]	0
Q_165	insert column into array use scaler obj	C_165_10	[ [ number number ] [ number number ] [ number number ] [ number number ] ] [ [ number number ] [ number number ] [ number number ] [ number number ] [ number number ] ]	0
Q_166	fast way to compare list of list against list of set	C_166_0	var = { ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) } list_of_lists_of_tuples = [ [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] , [ ( number , number , number ) ] ]	1
Q_166	fast way to compare list of list against list of set	C_166_1	var = [ [ var for var in l if var in set_of_tuples ] for l in list_of_lists_of_tuples ] var [ [ ( number , number , number ) , ( number , number , number ) ] , [ ( number , number , number ) ] ] timeit _ n1000000 _ r7 var = [ [ var for var in l if var not in set_of_tuples ] for l in list_of_lists_of_tuples ] number ns number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_166	fast way to compare list of list against list of set	C_166_2	var = [ set ( var ) _ set_of_tuples for var in list_of_lists_of_tuples ] var [ { ( number , number , number ) } , set ( ) ] timeit _ n1000000 _ r7 var = [ set ( var ) _ set_of_tuples for var in list_of_lists_of_tuples ] number ns number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_166	fast way to compare list of list against list of set	C_166_3	var = [ set ( var ) _ set_of_tuples for var in list_of_lists_of_tuples ]	0
Q_166	fast way to compare list of list against list of set	C_166_4	var = [ var _ set_of_tuples for var in map ( set , list_of_lists_of_tuples ) ]	0
Q_166	fast way to compare list of list against list of set	C_166_5	from operator import sub filtered_list_of_sets_of_tuples = [ sub ( var , set_of_tuples ) for var in map ( set , list_of_lists_of_tuples ) ]	0
Q_166	fast way to compare list of list against list of set	C_166_6	from operator import sub filtered_list_of_sets_of_tuples = list ( sub ( var , set_of_tuples ) for var in map ( set , list_of_lists_of_tuples ) )	0
Q_166	fast way to compare list of list against list of set	C_166_7	from itertools import repeat from operator import sub filtered_list_of_sets_of_tuples = list ( map ( sub , map ( set , list_of_lists_of_tuples ) , repeat ( set_of_tuples ) ) )	0
Q_166	fast way to compare list of list against list of set	C_166_8	var = { ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) } list_of_lists_of_tuples = [ [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] , [ ( number , number , number ) ] ] timeit _ n1000000 _ r20 filtered_list_of_lists_of_tuples = [ [ var for var in l if var not in var ] for l in list_of_lists_of_tuples ] number ns number ns per loop ( mean std . dev . of number runs , number loops each ) timeit _ n1000000 _ r20 filtered_list_of_sets_of_tuples = [ set ( l ) _ var for l in list_of_lists_of_tuples ] number ns number ns per loop ( mean std . dev . of number runs , number loops each ) timeit _ n1000000 _ r20 filtered_list_of_sets_of_tuples = list ( map ( sub , map ( set , list_of_lists_of_tuples ) , repeat ( var ) ) ) number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_166	fast way to compare list of list against list of set	C_166_9	from random import randint list_of_lists_of_tuples = [ [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ] , [ ( number , number , number ) ] ] * number set_of_tuples = { ( randint ( number , number ) , randint ( number , number ) , randint ( number , number ) ) for var in range ( number ) }	0
Q_166	fast way to compare list of list against list of set	C_166_10	timeit _ n10000 _ r20 filtered_list_of_lists_of_tuples = [ [ var for var in l if var not in set_of_tuples ] for l in list_of_lists_of_tuples ] number s number . number number s per loop ( mean std . dev . of number runs , number loops each ) timeit _ n10000 _ r20 filtered_list_of_sets_of_tuples = [ set ( l ) _ set_of_tuples for l in list_of_lists_of_tuples ] number . number s number . number s per loop ( mean std . dev . of number runs , number loops each ) timeit _ n10000 _ r20 filtered_list_of_sets_of_tuples = list ( map ( sub , map ( set , list_of_lists_of_tuples ) , repeat ( set_of_tuples ) ) ) number . number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_167	python multiprocessing	C_167_0	import numpy as np import multiprocessing import concurrent . futures multiprocessing = true def init_pool ( q , z ) global q , z q = q z = z def matchdictfunc ( index , x , y )	1
Q_167	python multiprocessing	C_167_1	import numpy as np import multiprocessing def init_pool ( q , z ) global q , z q = q z = z def matchdictfunc ( t )	0
Q_167	python multiprocessing	C_167_2	import numpy as np np . random . seed ( number ) x = np . random . randint ( m , size = n ) x = np . char . mod ( string , x ) . tolist ( )	0
Q_167	python multiprocessing	C_167_3	import random random . seed ( number ) x = [ str ( random . randrange ( m ) ) for var in range ( n ) ]	0
Q_167	python multiprocessing	C_167_4	def next_tuple ( n , stop , m ) with open ( string ) as f start = number while true end = min ( start + n , stop ) index = [ str ( var ) for var in range ( start , end ) ]	0
Q_167	python multiprocessing	C_167_5	import random import multiprocessing import concurrent . futures import time multiprocessing = true pool_size = multiprocessing . cpu_count ( ) def init_pool ( q , z ) global q , z q = q z = z def matchdictfunc ( index , x , y )	0
Q_167	python multiprocessing	C_167_6	import random random . seed ( number ) with open ( string , string ) as f offsets = [ ] for var in range ( number ) n = [ str ( random . randrange ( number ) ) for _ in range ( number ) ] b = string . join ( n ) . encode ( string ) l = len ( b ) offsets . append ( ( f . tell ( ) , l ) ) f . write ( b ) print ( offsets )	0
Q_167	python multiprocessing	C_167_7	"op "" s original program modified to read x and y values in from file number . number seconds multiprocessing elapsed time number . number seconds"	0
Q_167	python multiprocessing	C_167_8	var = [ lookup . get ( ( var , var ) , [ ] ) for var , var in zip ( x , y ) ]	0
Q_167	python multiprocessing	C_167_9	import random import concurrent . futures import time pool_size = number x_specs = [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] y_specs = [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] def init_pool ( q_z ) global q_z q_z = q_z def matchdictfunc ( index , i )	0
Q_167	python multiprocessing	C_167_10	from multiprocessing import pool import pickle import time def create_files ( ) l = [ var for var in range ( number ) ]	0
Q_168	autocomplete fail when multiple key be press at once	C_168_0	import string from tkinter import * from tkinter import font	1
Q_168	autocomplete fail when multiple key be press at once	C_168_1	class auto_complete def _init_ ( self ) self . root = tk ( ) self . root . title ( string ) self . ent_var = string_var ( ) self . entry = entry ( self . root , textvariable = self . ent_var , width = number ) self . entry . pack ( ) self . list_var = variable ( self . entry ) self . listbox = listbox ( self . root , listvariable = self . list_var , width = number ) self . listbox . pack ( ) self . all_fonts = list ( font . families ( ) ) self . all_fonts . sort ( ) self . all_fonts = self . all_fonts [ number ] self . non_duplicates_fonts ( ) self . lower_case = [ var . lower ( ) for var in self . all_fonts ] self . list_var . set ( self . all_fonts ) self . entry . focus ( ) self . root . resizable ( number , number ) self . root . mainloop ( ) def non_duplicates_fonts ( self ) string string string prev_family = string font_families = [ ] for family in self . all_fonts if not family . startswith ( prev_family ) font_families . append ( family ) prev_family = family self . all_fonts = font_families	0
Q_168	autocomplete fail when multiple key be press at once	C_168_2	def default ( self ) string string string self . listbox . selection_set ( number ) self . ent_var . set ( string ) self . entry . config ( insertofftime = number , insertontime = number ) self . set_selection ( )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_3	def key_pressed ( self , event = none ) key = event . keysym if key = = string key = string if key in string . printable if self . entry . selection_present ( ) self . sel = self . entry . index ( string ) + number self . entry . delete ( string , string ) else self . sel = self . entry . index ( string ) + number value = self . ent_var . get ( ) + key self . ent_var . set ( value ) self . ent_index + = number self . entry . icursor ( self . ent_index ) self . auto_complete ( )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_4	self . entry . bind ( string , self . key_pressed )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_5	def backspace ( self , event = none ) value = self . entry . get ( ) [ _ number ] self . ent_var . set ( value ) if self . ent_index = number if self . entry . selection_present ( ) self . entry . delete ( string , string ) self . ent_index = len ( self . ent_var . get ( ) ) if self . entry [ string ] = = number	0
Q_168	autocomplete fail when multiple key be press at once	C_168_6	self . entry . bind ( string , self . backspace )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_7	def tab_completion ( self , event = none ) string string string value = self . ent_var . get ( ) self . entry . selection_range ( number , string ) self . entry . icursor ( string ) index = self . all_fonts . index ( value ) self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . entry . config ( insertofftime = number , insertontime = number )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_8	self . entry . bind ( string , self . tab_completion )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_9	def up_direction ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] if index > number index _ = number self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . listbox . see ( index ) self . ent_var . set ( self . all_fonts [ index ] ) self . entry . selection_range ( number , string ) return string	0
Q_168	autocomplete fail when multiple key be press at once	C_168_10	self . entry . bind ( string , self . up_direction )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_11	def down_direction ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] if index < len ( self . all_fonts ) _ number index + = number self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . listbox . see ( index ) self . ent_var . set ( self . all_fonts [ index ] ) self . entry . selection_range ( number , string ) return string	0
Q_168	autocomplete fail when multiple key be press at once	C_168_12	self . entry . bind ( string , self . down_direction )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_13	def button_click ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] self . ent_var . set ( self . all_fonts [ index ] ) self . root . after ( number , self . set_selection )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_14	def set_selection ( self ) string string string self . entry . select_range ( number , string ) self . entry . focus ( )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_15	self . listbox . bind ( string , self . button_click )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_16	def auto_complete ( self ) value = self . ent_var . get ( ) . strip ( ) . lower ( ) matched = [ var for var in self . lower_case if var . startswith ( value ) ] if matched matched = matched [ number ] index = self . lower_case . index ( matched ) self . ent_var . set ( self . all_fonts [ index ] ) if self . entry . index ( string ) = = len ( matched ) self . entry . selection_range ( number , string ) else self . entry . selection_range ( self . sel , string ) self . listbox . see ( index )	0
Q_168	autocomplete fail when multiple key be press at once	C_168_17	putting everything together import string from tkinter import * from tkinter import font class auto_complete def _init_ ( self ) self . ent_index = number self . root = tk ( ) self . root . title ( string ) self . ent_var = string_var ( ) self . entry = entry ( self . root , textvariable = self . ent_var , width = number ) self . entry . pack ( ) self . list_var = variable ( self . entry ) self . listbox = listbox ( self . root , listvariable = self . list_var , exportselection = false , activestyle = string , selectmode = single , width = number ) self . listbox . pack ( ) self . all_fonts = list ( font . families ( ) ) self . all_fonts . sort ( ) self . all_fonts = self . all_fonts [ number ] self . non_duplicates_fonts ( ) self . lower_case = [ var . lower ( ) for var in self . all_fonts ] self . list_var . set ( self . all_fonts ) self . entry . focus ( ) self . entry . bind ( string , self . up_direction ) self . entry . bind ( string , self . tab_completion ) self . entry . bind ( string , self . backspace ) self . entry . bind ( string , self . down_direction ) self . entry . bind ( string , self . key_pressed ) self . listbox . bind ( string , self . button_click ) self . default ( ) self . root . resizable ( number , number ) self . root . mainloop ( ) def non_duplicates_fonts ( self ) string string string prev_family = string font_families = [ ] for family in self . all_fonts if not family . startswith ( prev_family ) font_families . append ( family ) prev_family = family self . all_fonts = font_families def default ( self ) string string string self . listbox . selection_set ( number ) self . ent_var . set ( string ) self . entry . config ( insertofftime = number , insertontime = number ) self . set_selection ( ) def key_pressed ( self , event = none ) key = event . keysym if key = = string key = string if key in string . printable if self . entry . selection_present ( ) self . sel = self . entry . index ( string ) + number self . entry . delete ( string , string ) else self . sel = self . entry . index ( string ) + number value = self . ent_var . get ( ) + key self . ent_var . set ( value ) self . ent_index + = number self . entry . icursor ( self . ent_index ) self . auto_complete ( ) return string def backspace ( self , event = none ) value = self . entry . get ( ) [ _ number ] self . ent_var . set ( value ) if self . ent_index = number if self . entry . selection_present ( ) self . entry . delete ( string , string ) self . ent_index = len ( self . ent_var . get ( ) ) if self . entry [ string ] = = number	0
Q_169	how to create panda pivot table that count common variable	C_169_0	var = df . groupby ( string ) [ string ] . apply ( list ) . reset_index ( ) var	1
Q_169	how to create panda pivot table that count common variable	C_169_1	discount group product id _ _ _ number number [ string , string ] number number [ string , string ] number number [ string , string ] number number [ string ] number number [ string ]	0
Q_169	how to create panda pivot table that count common variable	C_169_2	df2 [ string ] = number df3 = df2 . merge ( df2 , on = string , how = string ) . drop ( columns = [ string ] ) df3	0
Q_169	how to create panda pivot table that count common variable	C_169_3	discount group_x product id_x discount group_y product id_y _ _ _ _ _ number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string ] number number [ string , string ] number [ string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string ] number number [ string , string ] number [ string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string , string ] number number [ string , string ] number [ string ] number number [ string , string ] number [ string ] number number [ string ] number [ string , string ] number number [ string ] number [ string , string ] number number [ string ] number [ string , string ] number number [ string ] number [ string ] number number [ string ] number [ string ] number number [ string ] number [ string , string ] number number [ string ] number [ string , string ] number number [ string ] number [ string , string ] number number [ string ] number [ string ] number number [ string ] number [ string ]	0
Q_169	how to create panda pivot table that count common variable	C_169_4	df3 [ string ] = df3 . apply ( lambda row len ( set ( row [ string ] ) set ( row [ string ] ) ) , axis = number ) [ df3	0
Q_169	how to create panda pivot table that count common variable	C_169_5	discount group_x product id_x discount group_y product id_y count _ _ _ _ _ _ number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string ] number number number [ string , string ] number [ string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string ] number number number [ string , string ] number [ string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string , string ] number number number [ string , string ] number [ string ] number number number [ string , string ] number [ string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string ] number number number [ string ] number [ string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string , string ] number number number [ string ] number [ string ] number number number [ string ] number [ string ] number	0
Q_169	how to create panda pivot table that count common variable	C_169_6	df3 . set_index ( [ string , string ] ) [ string ] . unstack ( level = number )	0
Q_169	how to create panda pivot table that count common variable	C_169_7	discount group_y number number number number number discount group_x number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_169	how to create panda pivot table that count common variable	C_169_8	from itertools import product s = df . groupby ( string ) [ string ] . apply ( list ) pairs = [ [ ( var [ number ] [ number ] , var [ number ] [ number ] ) , ( var [ number ] [ number ] , var [ number ] [ number ] ) ] for var in product ( s . items ( ) , repeat = number ) ] count = [ [ var [ number ] [ number ] , var [ number ] [ number ] , len ( set ( var [ number ] [ number ] ) set ( var [ number ] [ number ] ) ) ] for var in pairs ] count	0
Q_169	how to create panda pivot table that count common variable	C_169_9	[ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_169	how to create panda pivot table that count common variable	C_169_10	pd . data_frame ( count ) . set_index ( [ number , number ] ) . unstack ( level = number )	0
Q_169	how to create panda pivot table that count common variable	C_169_11	number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_0	var = df . explode ( string ) df3 = pd . concat ( [ var . drop ( string , axis = number ) , var . apply ( lambda x pd . series ( x . wi17 ) , axis = number ) ] , axis = number ) . reset_index ( )	1
Q_170	how to explode column with multiple json object in each row in panda	C_170_1	var = { string [ string , string , string ] , string [ string , string , string ] } df = pd . data_frame ( var ) df [ string ] = [ string mac string number number xx number f string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string mac string e8xx a0 string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string , string mac string number number xx number f string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string mac string f8xx b0 string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string , string mac string number number number xx number f string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string mac string a8xx c0 string rssi string txrate string max_txrate string txbytes string rxbytes string nxn string number x1 string ] import json def parser2 ( d ) if d = d return np . nan else return json . loads ( d ) df . wi17 = df . wi17 . apply ( parser2 ) print ( df ) name rsn wi17 number de1 rsnjco4032 [ { string string , string _ number , string number . number , string number . number , string number , string number , string string } , { string string , string _ number , string number . number , string number . number , string number , string number , string string } ] number de2 rsnjco4033 [ { string string , string _ number , string number . number , string number . number , string number , string number , string string } , { string string , string _ number , string number . number , string number . number , string number , string number , string string } ] number de3 rsnjco4034 [ { string string , string _ number , string number . number , string number . number , string number , string number , string string } , { string string , string _ number , string number . number , string number . number , string number , string number , string string } ]	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_2	var = df . explode ( string ) df3 = pd . concat ( [ var . drop ( string , axis = number ) , var . apply ( lambda x pd . series ( x . wi17 ) , axis = number ) ] , axis = number ) . reset_index ( ) print ( df3 )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_3	name rsn mac rssi txrate max_txrate txbytes rxbytes nxn number de1 rsnjco4032 number number xx number f _ number number . number number . number number number number x1 number de1 rsnjco4032 e8xx a0 _ number number . number number . number number number number x1 number de2 rsnjco4033 number number xx number f _ number number . number number . number number number number x1 number de2 rsnjco4033 f8xx b0 _ number number . number number . number number number number x1 number de3 rsnjco4034 number number number xx number f _ number number . number number . number number number number x1 number de3 rsnjco4034 a8xx c0 _ number number . number number . number number number number x1	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_4	var = df . explode ( string ) df3 = pd . concat ( [ var . drop ( string , axis = number ) , pd . data_frame ( list ( map ( pd . series , var [ string ] ) ) , index = var . index ) ] , axis = number ) . reset_index ( )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_5	var = df . explode ( string ) var [ string ] = var [ string ] . fillna ( { var { } for var in var . index } )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_6	var = pd . concat ( [ df ] * number , ignore_index = true ) df2 = var . explode ( string )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_7	timeit df3 = pd . concat ( [ df2 . drop ( string , axis = number ) , df2 . apply ( lambda x pd . series ( x . wi17 ) , axis = number ) ] , axis = number ) . reset_index ( ) number . number s number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_8	timeit df3 = pd . concat ( [ df2 . drop ( string , axis = number ) , pd . data_frame ( list ( map ( pd . series , df2 [ string ] ) ) , index = df2 . index ) ] , axis = number ) . reset_index ( ) number . number s number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_9	timeit df3 = pd . concat ( [ df2 . drop ( string , axis = number ) . reset_index ( drop = true ) , pd . json_normalize ( df2 [ string ] ) ] , axis = number ) . reset_index ( ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_10	var = pd . concat ( [ df2 . drop ( string , axis = number ) , pd . data_frame ( df2 [ string ] . to_list ( ) , index = df2 . index ) ] , axis = number )	0
Q_170	how to explode column with multiple json object in each row in panda	C_170_11	timeit df3 = pd . concat ( [ df2 . drop ( string , axis = number ) , pd . data_frame ( df2 [ string ] . to_list ( ) , index = df2 . index ) ] , axis = number ) number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_171	how to return the maximum value for a give day in python django	C_171_0	max ( data [ string ] , key = lambda person person [ string ] )	1
Q_171	how to return the maximum value for a give day in python django	C_171_1	var = { string [ { string string , string number . number } , { string string , string number . number } , ] , string [ { string string , string number . number } , { string string , string number . number } ] } max_doctor = max ( var [ string ] , key = lambda person person [ string ] ) max_nurse = max ( var [ string ] , key = lambda person person [ string ] ) print ( string , max_doctor ) print ( string , max_nurse ) max_person = max ( [ max_doctor , max_nurse ] , key = lambda person person [ string ] ) print ( string , max_person )	0
Q_171	how to return the maximum value for a give day in python django	C_171_2	max_doctor { string string , string number . number } max_nurse { string string , string number . number } max_person { string string , string number . number }	0
Q_171	how to return the maximum value for a give day in python django	C_171_3	var = data [ string ] + data [ string ]	0
Q_171	how to return the maximum value for a give day in python django	C_171_4	var = max ( persons , key = lambda person person [ string ] )	0
Q_171	how to return the maximum value for a give day in python django	C_171_5	var = { string [ { string string , string number . number } , { string string , string number . number } , ] , string [ { string string , string number . number } , { string string , string number . number } ] } persons = var [ string ] + var [ string ] max_person = max ( persons , key = lambda person person [ string ] ) print ( string , max_person )	0
Q_171	how to return the maximum value for a give day in python django	C_171_6	var = lambda person ( person [ string ] or number )	0
Q_171	how to return the maximum value for a give day in python django	C_171_7	var = { string [ { string string , string number . number } , { string string , string number . number } , { string string , string none } , ] , string [ { string string , string number . number } , { string string , string number . number } , { string string , string none } , ] } persons = var [ string ] + var [ string ] max_person = max ( persons , key = lambda person ( person [ string ] or number ) ) print ( string , max_person )	0
Q_171	how to return the maximum value for a give day in python django	C_171_8	def get_amount ( person ) amount = person [ string ] if isinstance ( amount , ( float , int ) ) return amount return number max_person = max ( persons , key = get_amount )	0
Q_171	how to return the maximum value for a give day in python django	C_171_9	var = { string [ { string string , string number . number } , { string string , string number . number } , { string string , string none } , ] , string [ { string string , string number . number } , { string string , string number . number } , { string string , string string } , ] } persons = var [ string ] + var [ string ] def get_amount ( person ) amount = person [ string ] if isinstance ( amount , ( float , int ) ) return amount return number	0
Q_171	how to return the maximum value for a give day in python django	C_171_10	var = { string [ { string string , string number . number } , { string string , string number . number } , { string string , string none } , ] , string [ { string string , string number . number } , { string string , string number . number } , { string string , string string } , ] } persons = var [ string ] + var [ string ] import pandas as pd df = pd . data_frame ( persons ) print ( string ) print ( df )	0
Q_172	determine polygon coordinate from custom txt map	C_172_0	raw < _ r string data < _ do . call ( string , strsplit ( read_lines ( text_connection ( raw ) ) , string ) )	1
Q_172	determine polygon coordinate from custom txt map	C_172_1	allnei < _ expand . grid ( _ number number , _ number number ) allnei < _ allnei [ allnei [ , number ] = number allnei [ , number ] = number , ] get_neighbors < _ function ( point , data ) { cand < _ t ( c ( point ) + t ( allnei ) ) cand [ cand [ , number ] > = number cand [ , number ] < = nrow ( data ) cand [ , number ] > = number cand [ , number ] < = ncol ( data ) , true ] }	0
Q_172	determine polygon coordinate from custom txt map	C_172_2	fill < _ function ( point , data , corners = matrix ( nrow = number , ncol = number ) , fill_with = string ) { if ( is . matrix ( point ) ) { point < _ matrix ( point , ncol = number ) } cand < _ get_neighbors ( point , data ) data [ point ] < _ fill_with corner_cand < _ which ( data [ cand ] = = string ) if ( length ( corner_cand ) ) { corners < _ unique ( rbind ( corners , cand [ corner_cand , ] ) ) } empty_cand < _ which ( data [ cand ] = = string ( cand [ , number ] = = point [ , number ] cand [ , number ] = = point [ , number ] ) ) if ( length ( empty_cand ) > number ) { for ( i in empty_cand ) { result < _ fill ( cand [ i , ] , data , corners , fill_with ) data < _ result data corners < _ unique ( rbind ( corners , result corners ) ) } } list ( data = data , corners = corners ) }	0
Q_172	determine polygon coordinate from custom txt map	C_172_3	find_regions < _ function ( data ) { regions < _ list ( ) reg < _ number empty < _ which ( data = = string , arr . ind = true ) while ( nrow ( empty ) > number ) { empty < _ empty [ number , ] results < _ fill ( empty , data , fill_with = reg ) regions < _ c ( regions , list ( results corners ) ) data < _ results data reg < _ reg + number empty < _ which ( data = = string , arr . ind = true ) } list ( data = data , regions = regions ) } result < _ find_regions ( data ) result regions	0
Q_172	determine polygon coordinate from custom txt map	C_172_4	[ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number	0
Q_172	determine polygon coordinate from custom txt map	C_172_5	cat ( paste ( apply ( result data , number , paste , collapse = string ) , collapse = string ) )	0
Q_172	determine polygon coordinate from custom txt map	C_172_6	find_hit < _ function ( corner , corners , rvec , cvec ) { best < _ na best_dist < _ inf for ( i in number nrow ( corners ) ) { rdist < _ corners [ i , number ] _ corner [ , number ] cdist < _ corners [ i , number ] _ corner [ , number ] if ( sign ( rdist ) = = sign ( rvec ) sign ( cdist ) = = sign ( cvec ) ( ( rvec = = number cvec = = number ) ( rdist / rvec = = cdist / cvec ) ) ) { dist < _ rdist + cdist if ( dist < best_dist ) { best_dist < _ dist best < _ i } } } best }	0
Q_172	determine polygon coordinate from custom txt map	C_172_7	in_bounds < _ ( function ( data ) { function ( r , c ) { r > number r < = nrow ( data ) c > number c < = ncol ( data ) } } ) ( data )	0
Q_172	determine polygon coordinate from custom txt map	C_172_8	corners < _ which ( data = = string , arr . ind = true ) edges < _ list ( ) for ( i in number ( nrow ( corners ) _ number ) ) { corner < _ corners [ i , , drop = false ] rest < _ corners [ _ ( number i ) , , drop = false ] r < _ corner [ , number ] c < _ corner [ , number ] for ( dr in c ( _ number , number , number ) ) { for ( dc in c ( _ number , number , number ) ) { if ( in_bounds ( r + dr , c + dc ) ( dr = number dc = number ) data [ r + dr , c + dc ] = string ) { hit < _ find_hit ( corner , rest , dr , dc ) if ( is . na ( hit ) ) { edges < _ c ( edges , list ( c ( i , i + hit ) ) ) } } } } } edges	0
Q_172	determine polygon coordinate from custom txt map	C_172_9	library ( igraph ) dd < _ as . data . frame ( do . call ( rbind , edges ) ) dd [ ] < _ lapply ( dd , as . character ) g < _ graph_from_data_frame ( dd , directed = false ) vnames < _ as . character ( number nrow ( corners ) ) v ( g ) [ vnames ] row < _ corners [ , number ] v ( g ) [ vnames ] col < _ corners [ , number ] plot ( g )	0
Q_172	determine polygon coordinate from custom txt map	C_172_10	as . data . frame ( vertex_attr ( g ) )	0
Q_172	determine polygon coordinate from custom txt map	C_172_11	v ( g ) [ vnames ] y < _ _ corners [ , number ] v ( g ) [ vnames ] x < _ corners [ , number ] plot ( g )	0
Q_173	train custom voice use azure ai	C_173_0	post https / / < your service name > . cognitiveservices . azure . com / speechtotext / v3 . number / datasets	1
Q_173	train custom voice use azure ai	C_173_1	content _ type application / json ocp _ apim _ subscription _ key < key >	0
Q_173	train custom voice use azure ai	C_173_2	{ string string , string string , string string , string string , string string , string string , string string , string string , string { string string , string string } , string { string string } , string { string string } , string string }	0
Q_173	train custom voice use azure ai	C_173_3	post https / / < name > . cognitiveservices . azure . com / speechtotext / v3 . number / models	0
Q_173	train custom voice use azure ai	C_173_4	content _ type application / json ocp _ apim _ subscription _ key < key >	0
Q_173	train custom voice use azure ai	C_173_5	{ string string , string string , string string , string { string string , string string } , string { string string } , string { string string } , string string , string [ { string string , string string } . ] } }	0
Q_173	train custom voice use azure ai	C_173_6	get https / / < your service name > . cognitiveservices . azure . com / speechtotext / v3 . number / projects	0
Q_173	train custom voice use azure ai	C_173_7	get https / / < your service name > . cognitiveservices . azure . com / speechtotext / v3 . number / projects / < project id >	0
Q_173	train custom voice use azure ai	C_173_8	get https / / < your service name > . cognitiveservices . azure . com / speechtotext / v3 . number / projects / < project id >	0
Q_173	train custom voice use azure ai	C_173_9	post https / / < name > . cognitiveservices . azure . com / speechtotext / v3 . number / endpoints	0
Q_173	train custom voice use azure ai	C_173_10	content _ type application / json ocp _ apim _ subscription _ key < key >	0
Q_173	train custom voice use azure ai	C_173_11	{ string string , string string , string string , string { string string , string string } , string { string string , string string } , string { string string , string false , string false } , string { string false , string string } , string string }	0
Q_173	train custom voice use azure ai	C_173_12	get https / / < your service name > . cognitiveservices . azure . com / speechtotext / v3 . number / projects / < project id > / models	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_0	in [ number ] test_df = pd . data_frame ( { string np . arange ( number ) , string np . arange ( number ) , string np . arange ( number ) } ) . in [ number ] test_df out [ number ] a b c number number number number number number number number number number number number number number number number number number number number in [ number ] def myfunc ( a , b ) . return a + b .	1
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_1	in [ number ] test_df . apply ( lambda x x + number , raw = true ) out [ number ] a b c number number number number number number number number number number number number number number number number number number number number in [ number ] timeit test_df . apply ( lambda x x + number , raw = true ) number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_2	in [ number ] test_df + number out [ number ] a b c number number number number number number number number number number number number number number number number number number number number in [ number ] timeit test_df + number number s number . number number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_3	in [ number ] test_df . to_numpy ( ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] test_df . to_numpy ( ) + number out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] timeit test_df . to_numpy ( ) + number number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_4	in [ number ] timeit pd . data_frame ( test_df . to_numpy ( ) + number , columns = test_df . columns ) number . number s number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ]	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_5	in [ number ] f = np . vectorize ( myfunc )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_6	in [ number ] timeit f ( test_df . to_numpy ( ) , number ) number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_7	in [ number ] timeit f ( test_df , number ) number . number s number . number s per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit pd . data_frame ( f ( test_df , number ) , columns = test_df . columns ) number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_8	in [ number ] [ f ( test_df . iloc [ , var ] , number ) for var in range ( test_df . shape [ number ] ) ] out [ number ] [ array ( [ number , number , number , number , number ] ) , array ( [ number , number , number , number , number ] ) , array ( [ number , number , number , number , number ] ) ] in [ number ] timeit [ f ( test_df . iloc [ , var ] , number ) for var in range ( test_df . shape [ number ] ) ] number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_9	in [ number ] timeit [ f ( test_df . to_numpy ( ) [ , var ] , number ) for var in range ( test_df . shape [ number ] ) ] number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_174	correct way to use np vectorize to apply function to all column in panda dataframe	C_174_10	notes _ the vectorize function is provided primarily for convenience , not for performance . the implementation is essentially a for loop .	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_0	var = ( var . iloc [ _ number ] [ [ string , * var . columns . difference ( [ string ] ) ] ] . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string , string string } ) ) m = var [ string ] . ne ( var [ string ] . shift ( ) ) var [ string ] = np . where ( m , var [ string ] , var [ string ] ) var [ string ] = np . where ( m , string , string ) var [ string ] = m + number var = var [ [ string , string , string , string ] ]	1
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_1	level var_name value count number number ethnic hispanic or latino number number number race black or african american number number number race white number number number ethnic not hispanic or latino number number number race black or african american number number number race white number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_2	df . iloc [ _ number ] [ [ string , * df . columns . difference ( [ string ] ) ] ]	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_3	race all black or african american white ethnic hispanic or latino number number number not hispanic or latino number number number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_4	df . iloc [ _ number ] [ [ string , * df . columns . difference ( [ string ] ) ] ] . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string , string string } )	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_5	var_name value count number hispanic or latino all number number hispanic or latino black or african american number number hispanic or latino white number number not hispanic or latino all number number not hispanic or latino black or african american number number not hispanic or latino white number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_6	var = df [ string ] . ne ( df [ string ] . shift ( ) )	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_7	number true number false number false number true number false number false name var_name , dtype bool	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_8	df [ string ] = np . where ( m , df [ string ] , df [ string ] )	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_9	var_name value count number hispanic or latino hispanic or latino number number hispanic or latino black or african american number number hispanic or latino white number number not hispanic or latino not hispanic or latino number number not hispanic or latino black or african american number number not hispanic or latino white number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_10	df [ string ] = np . where ( m , string , string ) df [ string ] = m + number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_11	var_name value count level number ethnic hispanic or latino number number number race black or african american number number number race white number number number ethnic not hispanic or latino number number number race black or african american number number number race white number number	0
Q_175	how to transform pivot table with multi level column and axis name to row	C_175_12	var = var [ [ string , string , string , string ] ]	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_0	preliminary import glob2 , itertools , os , pyautogui , shutil , time , pyperclip , subprocess , keyboard as kb from datetime import datetime from zipfile import zip_file now = datetime . now ( ) dt_string str = now . strftime ( string ) print ( dt_string ) from selenium import webdriver from selenium . webdriver import desired_capabilities from selenium . webdriver . chrome . options import options from selenium . webdriver . support . wait import web_driver_wait from concurrent . futures import thread_pool_executor from os import path	1
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_1	def ext_update_method1 ( ps , section = string ) global w , p2s text_temp , p2s = [ string ] * len ( ps ) , [ ] def button_click ( p , parms = [ string , true ] )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_2	def ext_update_method2 ( ps , n_i_c = [ number , number , number , number ] , section = string )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_3	def ext_remove ( ps , ext ) for var in range ( len ( ps ) ) try activ ( var ) d [ var ] . get ( string )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_4	pyautogui . failsafe = false def activ ( p , index_wd = string ) global index_activ try if index_wd = = string index_wd = wd [ p ] [ number ] else index_wd = index_wd [ p ] except index_wd = wd [ p ] print ( f string ) index_activ [ p ] = false try index_wd . activate ( ) index_activ [ p ] = true return index_activ [ p ] except try index_wd . minimize ( ) index_wd . restore ( ) index_activ [ p ] = true return index_activ [ p ] except index_activ [ p ] = false index_activ [ p ] = false return index_activ [ p ]	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_5	def keys ( actions , delay = number . number )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_6	def data_mygrouper ( n , iterable ) args = [ iter ( iterable ) ] * n return ( [ var for var in t if var = none ] for t in itertools . zip_longest ( * args ) )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_7	def thread_all ( ps , fn , parm = string , actions = [ ] , workers = number , chunk = number )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_8	def tab_close ( p ) print ( f string )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_9	def vars ( ) print ( string ) global index , index2 , index3 , index4 , index5 , index6 global index_activ , index_activ2 , hks , pycharm_win global index_latest_files , index_hks , index_hks2 global parent , d , w , w2 global path_chrome , path_exec , path_core , path_temp , profile , done , caps , pycharm_win global ps , p2s , qs global l , tile_type , compact , outcome global kd , ku , hk , pr , tw , wr , cl global gats , gaws , gwwt , gawt , gaw global cc , ss , start , start2 , start_overall global wd , wd2 , ev , errors , errors2 , errors3 global ext_0 , ext_1 , ext_2 , ext_3 , ext_details caps = desired_capabilities . chrome . copy ( ) [ cc , ss , kd , ku , hk , pr , tw , wr , cl ] = [ pyautogui . countdown , time . sleep , pyautogui . key_down , pyautogui . key_up , pyautogui . hotkey , pyautogui . press , , pyautogui . typewrite , pyautogui . write , pyautogui . click ] [ gats , gaws , gwwt ] = [ pyautogui . get_all_titles , pyautogui . get_all_windows , pyautogui . get_windows_with_title ] [ gawt , gaw ] = [ pyautogui . get_active_window_title , pyautogui . get_active_window ] l = number qs , p2s , ps , = list ( range ( l ) ) , list ( range ( l ) ) , list ( range ( l ) ) text_temp , start = [ string ] * l , [ number ] * l index_hks , index_hks2 = [ hks ] * l , [ number ] * l index_latest_files = [ string ] parent , w , ev , d , wd = [ string ] * l , [ string ] * l , [ string ] * l , [ string ] * ( l + number ) , [ [ string ] ] * l start_overall , outcome = string , string try pycharm_win = [ gaw ( ) ] except pass path_chrome = string path_core = os . path . join ( os . path . expanduser ( string ) , string , string ) path_exec = os . path . join ( path_core , string ) ext_details = [ [ string , string ] , [ string , string ] , [ string , string ] , [ string , string ] ] ext_0 = os . path . join ( path_core , string ) ext_1 = os . path . join ( path_core , string ) ext_2 = os . path . join ( path_core , string ) ext_3 = os . path . join ( path_core , string )	0
Q_176	how to add or remove chrome extension tagstr selenium web_driver have be instantiate define	C_176_10	main code if _name_ = = string ps = string vars ( ) if len ( ps ) > number ps_new = list ( data_mygrouper ( int ( round ( len ( ps ) / number , ndigits = number ) ) , ps ) ) for var in range ( number ) thread_all ( ps_new [ var ] , new_profile , workers = len ( ps_new [ var ] ) + number , chunk = len ( ps_new [ var ] ) + number ) , cc ( number )	0
Q_177	customize search for consequtive value in numpy array	C_177_0	import numpy as np import numba as nb nb . njit def find_blocks_while2_nb ( arr , size , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) i = j = number while i < n _ size + number	1
Q_177	customize search for consequtive value in numpy array	C_177_1	for var in np . nonzero ( result ) [ number ] yield var	0
Q_177	customize search for consequtive value in numpy array	C_177_2	def find_blocks_for2 ( arr , size , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) for var in range ( n _ size + number ) all_equal = true for j in range ( var , var + size ) if arr [ j ] = value all_equal = false break	0
Q_177	customize search for consequtive value in numpy array	C_177_3	import numpy as np def find_blocks_for ( arr , size , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) block_size = number for var in range ( n ) if arr [ var ] = = value block_size + = number else block_size = number if block_size > = size result [ var _ size + number ] = true return result	0
Q_177	customize search for consequtive value in numpy array	C_177_4	import numpy as np def find_blocks_while2 ( arr , size , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) i = j = number while i < n _ size + number	0
Q_177	customize search for consequtive value in numpy array	C_177_5	import numba as nb find_blocks_while2_nb = nb . njit ( find_blocks_while2 ) find_blocks_while2_nb . _name_ = string	0
Q_177	customize search for consequtive value in numpy array	C_177_6	cython _ c _ o3 _ c _ march = native _ a	0
Q_177	customize search for consequtive value in numpy array	C_177_7	def find_blocks_for_all ( arr , size , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) for var in range ( n _ size + number ) if np . all ( arr [ var var + size ] = = value ) result [ var ] = true return result	0
Q_177	customize search for consequtive value in numpy array	C_177_8	def find_blocks_for_and ( arr , size , value ) result = ( arr = = value ) for var in range ( number , size ) result [ _ number ] = result [ number ] result [ number _ size ] = false return result	0
Q_177	customize search for consequtive value in numpy array	C_177_9	def find_blocks_strides ( arr , size , value ) n = arr . size strides = ( arr . itemsize , ) * number block = np . full ( size , value , dtype = arr . dtype )	0
Q_177	customize search for consequtive value in numpy array	C_177_10	def find_blocks_0_conv ( arr , size ) n = arr . size result = np . zeros_like ( arr , dtype = np . bool_ ) block = np . ones ( size , dtype = arr . dtype ) result [ number _ size ] = ( np . correlate ( arr , block , string ) = = number ) return result	0
Q_177	customize search for consequtive value in numpy array	C_177_11	def find_blocks_simd_nb_cached ( arr , size , value = number , cache = { } ) assert size > number if size not in cache print ( string , list ( cache . keys ( ) ) ) def find_blocks_simd_nb ( arr , value ) n = arr . size result = np . zeros ( n , dtype = np . bool_ ) check = ( arr = = value ) for var in range ( n _ size + number )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_0	var = df [ string ] . str . extract ( r string ) df [ string ] = var [ number ] . str . upper ( ) + var [ number ] . str . zfill ( number )	1
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_1	type count number d bu01 number d gpa01 number d da01 number nd da02 number nd lapp01	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_2	var = df [ string ] . str . extract ( r string )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_3	number number number bu number number gpa number number da number number da number number lapp number	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_4	s_df [ number ] . str . upper ( )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_5	number bu number gpa number da number da number lapp name number , dtype object	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_6	s_df [ number ] . str . zfill ( number )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_7	number number number number number number number number number number number number number number number name number , dtype object	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_8	s_df [ number ] . str . upper ( ) + s_df [ number ] . str . zfill ( number )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_9	number bu01 number gpa01 number da01 number da02 number lapp01 dtype object	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_10	var = pd . data_frame ( { string [ string , string , string , string , string ] , string [ string , string , string , string , string ] } )	0
Q_178	add lead zero for numerical value le than tagint digit to exist dataframe column	C_178_11	type count number d bu1 number d gpa1 number d da1 number nd da2 number nd lapp1	0
Q_179	get miss date from datafrane panda	C_179_0	df [ string ] = pd . to_datetime ( df [ string ] , format = string ) midx = pd . multi_index . from_frame ( df . groupby ( string ) [ string ] . agg ( [ string , string ] ) . apply ( lambda x pd . date_range ( x [ string ] , x [ string ] ) , axis = number ) . explode ( ) . reset_index ( ) , names = [ string , string ] ) new_df = ( df . set_index ( [ string , string ] ) . reindex ( midx ) . loc [ lambda df_ df_ [ string ] . isna ( ) ] . index . to_frame ( index = false ) . rename ( columns = { number string } ) )	1
Q_179	get miss date from datafrane panda	C_179_1	key date number hello number _ number _ number number number no number _ number _ number number number no number _ number _ number number	0
Q_179	get miss date from datafrane panda	C_179_2	new_df [ string ] = new_df [ string ] . dt . strftime ( string )	0
Q_179	get miss date from datafrane panda	C_179_3	key date number hello number number no number number no number	0
Q_179	get miss date from datafrane panda	C_179_4	var = pd . data_frame ( { string [ string , string , string , string , string , string , string ] , string [ number , number , number , number , number , number , number ] , string [ string , string , string , string , string , string , string ] , string [ number , number , number , number , number , number , number ] } )	0
Q_179	get miss date from datafrane panda	C_179_5	df . groupby ( string ) [ string ] . agg ( [ string , string ] ) min max key hello number _ number _ number number number _ number _ number number no number _ number _ number number number _ number _ number number	0
Q_179	get miss date from datafrane panda	C_179_6	df . groupby ( string ) [ string ] . agg ( [ string , string ] ) . apply ( lambda x pd . date_range ( x [ string ] , x [ string ] ) , axis = number )	0
Q_179	get miss date from datafrane panda	C_179_7	key hello datetime_index ( [ string , string , string number _ number _ number number string number _ number _ number number string number . dtype object	0
Q_179	get miss date from datafrane panda	C_179_8	df . groupby ( string ) [ string ] . agg ( [ string , string ] ) . apply ( lambda x pd . date_range ( x [ string ] , x [ string ] ) , axis = number ) . explode ( ) key hello number _ number _ number number hello number _ number _ number number hello number _ number _ number number hello number _ number _ number number hello number _ number _ number number no number _ number _ number number no number _ number _ number number no number _ number _ number number no number _ number _ number number no number _ number _ number number dtype datetime64 [ ns ]	0
Q_179	get miss date from datafrane panda	C_179_9	var = pd . multi_index . from_frame ( df . groupby ( string ) [ string ] . agg ( [ string , string ] ) . apply ( lambda x pd . date_range ( x [ string ] , x [ string ] ) , axis = number ) . explode ( ) . reset_index ( ) , names = [ string , string ] ) multi_index ( [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] , names = [ string , string ] )	0
Q_179	get miss date from datafrane panda	C_179_10	df . set_index ( [ string , string ] ) . reindex ( midx ) size number key date hello number _ number _ number number number . number k number . number number _ number _ number number number . number k number . number number _ number _ number number number . number k number . number number _ number _ number number na_n na_n number _ number _ number number number . number k number . number no number _ number _ number number number . number k number . number number _ number _ number number na_n na_n number _ number _ number number number . number k number . number number _ number _ number number na_n na_n number _ number _ number number number . number k number . number	0
Q_179	get miss date from datafrane panda	C_179_11	df . set_index ( [ string , string ] ) . reindex ( midx ) . loc [ lambda df_ df_ [ string ] . isna ( ) ] size number key date hello number _ number _ number number na_n na_n no number _ number _ number number na_n na_n number _ number _ number number na_n na_n	0
Q_179	get miss date from datafrane panda	C_179_12	( df . set_index ( [ string , string ] ) . reindex ( midx ) . loc [ lambda df_ df_ [ string ] . isna ( ) ] . index . to_frame ( index = false ) ) key date number hello number _ number _ number number number no number _ number _ number number number no number _ number _ number number	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_0	var = string port_flask_dev = number port_flask_prod = number port_node_dev = number	1
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_1	from flask import ( flask , jsonify , request , render_template , flash , redirect , url_for , session , send_from_directory ,	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_2	import { create_app , prototype } from string import store from string import app from string import router from string import string / / https / / v3 . vuejs . org / guide / migration / filters . html	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_3	< style > [ . ] < / style > < template > < div class = string style = string > < div id = string class = string > < / div > < div class = string > < ul > < li v _ for = string key = string > [ [ currency ( data . x , string , number ) ] ] _ [ [ currency ( data . y , string , number ) ] ] < / li > < / ul > < / div > < div id = string class = string > < / div > < / div > < / template > < script setup > / / https / / v3 . vuejs . org / api / sfc _ script _ setup . html import { computed , on_before_unmount } from string import { use_store } from string import { currency } from string / / https / / github . com / vuejs / vuex / tree / number . number / examples / composition / shopping _ cart const store = use_store ( ) const bokehinlinejs = computed ( ( ) = > store . state . modprodsinus . bokehinlinejs ) async function get1st_jsonbokeh ( ) { const promise = new promise ( ( resolve / * , reject * / ) = > { set_timeout ( ( ) = > { return resolve ( bokehinlinejs . value ) } , number ) } ) let result = await promise var temp1 = result . gr document . get_element_by_id ( string ) . inner_html = temp1 . div . p1 document . get_element_by_id ( string ) . inner_html = temp1 . div . p2 eval ( temp1 . script ) } get1st_jsonbokeh ( ) var product_check_interval = null const datasinus = computed ( ( ) = > store . state . modprodsinus . datasinus ) / / console . log ( datasinus ) async function get_data_sinus_polling ( ) { const promise = new promise ( ( resolve / * , reject * / ) = > { set_timeout ( ( ) = > { resolve ( datasinus ) } , number ) } ) let result = await promise clear_interval ( product_check_interval ) product_check_interval = set_interval ( ( ) = > { store . dispatch ( string ) / / console . log ( product_check_interval ) } , number ) } get_data_sinus_polling ( ) const before_destroy = on_before_unmount ( ( ) = > { clear_interval ( product_check_interval ) console . log ( string ) } ) store . dispatch ( string ) < / script >	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_4	import axios from string export default { api_get_bokehinlinejs ( callback ) { axios . get ( string ) . then ( ( response ) = > { console . log ( response . data ) callback ( response . data ) } ) . catch ( ( err ) = > console . log ( ( process . env . node_env string ) = = string ? err . message json . stringify ( err ) ) ) } , api_get_datasinus ( callback ) { axios . get ( string ) . then ( ( response ) = > { / / console . log ( response . data ) callback ( response . data . sinus ) } ) . catch ( ( err ) = > console . log ( ( process . env . node_env string ) = = string ? err . message json . stringify ( err ) ) ) } , }	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_5	import apisinus from string / / initial state const state = { bokehinlinejs [ ] , datasinus [ ] , } const getters = { datasinus ( state ) = > { return state . datasinus } , } / / https / / github . com / vuejs / vuex / tree / number . number / examples / composition / shopping _ cart / / actions const actions = { get_bokehinlinejs ( { commit } ) { apisinus . api_get_bokehinlinejs ( ( bokehinlinejs ) = > { commit ( string , bokehinlinejs ) } ) } , get_data_sinus ( { commit } ) { apisinus . api_get_datasinus ( ( datasinus ) = > { commit ( string , datasinus ) } ) } , } / / mutations const mutations = { set_bokehinlinejs ( state , bokehinlinejs ) { state . bokehinlinejs = bokehinlinejs } , set_data_sinus ( state , datasinus ) { state . datasinus = datasinus } , } const modprodsinus = { namespaced true , state , getters , actions , mutations , } export default modprodsinus	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_6	import { create_router , create_web_history } from string import home from string import about from string import about2_comp from string import prodsinuspage from string const routes = [ { path string , name string , component home , } , { path string , name string , component about , } , { path string , name string , component about2_comp , } , { path string , name string , component prodsinuspage , } , ] const router = create_router ( { history create_web_history ( process . env . base_url ) , routes , } ) export default router	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_7	import { create_store } from string import modprodsinus from string / / https / / www . digitalocean . com / community / tutorials / how _ to _ build _ a _ shopping _ cart _ with _ vue _ number _ and _ vuex export default create_store ( { modules { modprodsinus , } , } )	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_8	package . json { string string , string string , string true , string { string string dev string , string string build string , string string } , [ . ] frontend / vue_node_serve . js const config = require ( string ) require ( string ) . set ( string , config . port_flask ) require ( string ) . set ( string , config . port_node_dev ) require ( string ) . exec_sync ( string + config . port_node_dev , { stdio string } ) frontend / vue_node_build . js const config = require ( string ) require ( string ) . set ( string , config . port_flask ) require ( string ) . exec_sync ( string , { stdio string , } )	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_9	/ / https / / stackoverflow . com / questions / number / using _ environment _ variables _ with _ vue _ js / number	0
Q_180	flask with import bokeh with tagint bokeh graph without external bokeh server and not tagstr	C_180_10	/ / https / / stackoverflow . com / questions / number / how _ to _ store _ node _ js _ deployment _ settings _ configuration _ files / / https / / stackoverflow . com / questions / number / read _ from _ file _ and _ find _ specific _ lines / number	0
Q_181	use timedelta in loop	C_181_0	var = pd . data_frame ( { string range ( number ) , string [ string ] * number + [ string ] * number , string [ string ] * number + [ string ] * number + [ string ] * number , string pd . to_datetime ( [ string ] * number ) , string pd . date_range ( string , periods = number , freq = string ) } ) var [ string ] = var . max_date _ var . min_date	1
Q_181	use timedelta in loop	C_181_1	prod_loc code_1 code_2 min_date max_date date_diff number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number _ number number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number number days number number number number number number number _ number number _ number number _ number number _ number number number days	0
Q_181	use timedelta in loop	C_181_2	var = list ( range ( number , number , number ) ) + [ df . date_diff . max ( ) . days + number ] cut = pd . cut ( df . date_diff . dt . days , var , right = false )	0
Q_181	use timedelta in loop	C_181_3	var = df . groupby ( [ string , cut ] ) . prod_loc . count ( ) . unstack ( number )	0
Q_181	use timedelta in loop	C_181_4	date_diff [ number , number ) [ number , number ) [ number , number ) [ number , number ) code_1 number number number number number number number number number number number number	0
Q_181	use timedelta in loop	C_181_5	var = df . groupby ( [ string , string , cut ] ) . prod_loc . count ( ) . unstack ( number )	0
Q_181	use timedelta in loop	C_181_6	date_diff [ number , number ) [ number , number ) [ number , number ) [ number , number ) code_1 code_2 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_181	use timedelta in loop	C_181_7	df [ string ] = cut result = df . pivot_table ( index = [ string ] , columns = string , values = string , aggfunc = string ) result = df . pivot_table ( index = [ string , string ] , columns = string , values = string , aggfunc = string )	0
Q_181	use timedelta in loop	C_181_8	var = pd . data_frame ( { string pd . to_datetime ( [ string , string ] ) , string pd . to_datetime ( [ string , string ] ) } ) var [ string ] = ( var . max_date _ var . min_date )	0
Q_181	use timedelta in loop	C_181_9	min_date max_date date_diff number number _ number number _ number number _ number _ number number days number number _ number number _ number number _ number number _ number number days	0
Q_181	use timedelta in loop	C_181_10	var = max_days_by_order . date_diff . where ( max_days_by_order . date_diff . dt . days > number )	0
Q_181	use timedelta in loop	C_181_11	number na_t number number days name date_diff , dtype timedelta64 [ ns ]	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_0	df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ]	1
Q_182	split extract a panda column of nest tuples into multiple column	C_182_1	var = { string [ string , string ] , string [ ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) , ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) ] } df = pd . data_frame ( var ) link coordinates number abd ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) number abe ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ] df [ string ] = df [ string ] . str [ number ] . str [ number ] link coordinates to_longitude to_latitude from_longitude from_latitude number abd ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) _ number . number number . number _ number . number number . number number abe ( ( _ number . number , number . number ) , ( _ number . number , number . number ) ) _ number . number number . number _ number . number number . number	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_2	var = pd . concat ( [ df ] * number , ignore_index = true )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_3	def my_func ( record ) record [ string ] = record [ string ] [ number ] [ number ] record [ string ] = record [ string ] [ number ] [ number ] record [ string ] = record [ string ] [ number ] [ number ] record [ string ] = record [ string ] [ number ] [ number ] return record timeit new_df = df2 . apply ( my_func , axis = number )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_4	number min number s number . number s per loop ( mean std . dev . of number runs , number loop each )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_5	timeit df2 [ string ] = df2 [ string ] . str [ number ] . str [ number ] df2 [ string ] = df2 [ string ] . str [ number ] . str [ number ] df2 [ string ] = df2 [ string ] . str [ number ] . str [ number ] df2 [ string ] = df2 [ string ] . str [ number ] . str [ number ]	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_6	number ms number . number ms per loop ( mean std . dev . of number runs , number loops each )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_7	timeit cols = [ string , string , string , string ] out = pd . data_frame ( np . hstack ( df2 [ string ] . values ) , columns = cols )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_8	value_error shape of passed values is ( number , number ) , indices imply ( number , number )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_9	number min number s number . number s per loop ( mean std . dev . of number runs , number loop each )	0
Q_182	split extract a panda column of nest tuples into multiple column	C_182_10	number ms number . number ms per loop ( mean std . dev . of number runs , number loops each )	0
Q_183	how do i melt a panda dataframe	C_183_0	print ( df . melt ( id_vars = [ string , string ] , var_name = string , value_name = string ) )	1
Q_183	how do i melt a panda dataframe	C_183_1	print ( df . set_index ( [ string , string ] ) . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string } ) . sort_values ( string ) . reset_index ( drop = true ) )	0
Q_183	how do i melt a panda dataframe	C_183_2	name age subject grade number bob number english c number john number english b number foo number english b number bar number english a + number alex number english f number tom number english a number bob number math a + number john number math b number foo number math a number bar number math f number alex number math d number tom number math c	0
Q_183	how do i melt a panda dataframe	C_183_3	print ( df . melt ( id_vars = [ string , string ] , value_vars = string , var_name = string , value_name = string , ) )	0
Q_183	how do i melt a panda dataframe	C_183_4	print ( df . set_index ( [ string , string ] ) [ [ string ] ] . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string } ) . sort_values ( string ) . reset_index ( drop = true ) )	0
Q_183	how do i melt a panda dataframe	C_183_5	name age subject grade number bob number math a + number john number math b number foo number math a number bar number math f number alex number math d number tom number math c	0
Q_183	how do i melt a panda dataframe	C_183_6	print ( df . melt ( id_vars = [ string , string ] ) . groupby ( string , as_index = false ) . agg ( string . join ) )	0
Q_183	how do i melt a panda dataframe	C_183_7	print ( df . set_index ( [ string , string ] ) . stack ( ) . reset_index ( ) . rename ( columns = { string string , number string } ) . groupby ( string , as_index = false ) . agg ( string . join ) )	0
Q_183	how do i melt a panda dataframe	C_183_8	grade name subjects number a foo , tom math , english number a + bob , bar math , english number b john , john , foo math , english , english number c bob , tom english , math number d alex math number f bar , alex math , english	0
Q_183	how do i melt a panda dataframe	C_183_9	var = var . melt ( id_vars = [ string , string ] , var_name = string , value_name = string )	0
Q_183	how do i melt a panda dataframe	C_183_10	print ( df . pivot_table ( string , [ string , string ] , string , aggfunc = string ) . reset_index ( ) . rename_axis ( columns = none ) )	0
Q_183	how do i melt a panda dataframe	C_183_11	name age english math number alex number f d number bar number a + f number bob number c a + number foo number b a number john number b b number tom number a c	0
Q_183	how do i melt a panda dataframe	C_183_12	print ( df . melt ( id_vars = [ string , string ] , var_name = string , value_name = string ) . groupby ( string , as_index = false ) . agg ( string . join ) )	0
Q_183	how do i melt a panda dataframe	C_183_13	print ( df . set_index ( [ string , string ] ) . stack ( ) . reset_index ( ) . groupby ( string , as_index = false ) . agg ( string . join ) . rename ( { string string , number string } , axis = number ) )	0
Q_183	how do i melt a panda dataframe	C_183_14	name subjects grades number alex math , english d , f number bar math , english f , a + number bob math , english a + , c number foo math , english a , b number john math , english b , b number tom math , english c , a	0
Q_183	how do i melt a panda dataframe	C_183_15	print ( df . melt ( var_name = string , value_name = string ) )	0
Q_183	how do i melt a panda dataframe	C_183_16	print ( df . stack ( ) . reset_index ( level = number ) . sort_values ( string ) . reset_index ( drop = true ) . set_axis ( [ string , string ] , axis = number ) )	0
Q_183	how do i melt a panda dataframe	C_183_17	column value number age number number age number number age number number age number number age number number age number number english a + number english b number english b number english a number english f number english c number math c number math a + number math d number math b number math f number math a number name alex number name bar number name tom number name foo number name john number name bob	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_0	var = pd . data_frame ( { string pd . date_range ( start = string , end = string , freq = string ) } ) var [ string ] = np . random . randint ( number , number , len ( var ) )	1
Q_184	seaborn heatmap _ row and column statistic to display	C_184_1	date value number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number number number _ number number _ number number number . . . number number _ number number _ number number number number number _ number number _ number number number number number _ number _ number number number number number _ number _ number number number number number _ number _ number number number	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_2	df [ string ] = df [ string ] . dt . month_name ( ) . str . slice ( stop = number ) . sort_values ( ) df [ string ] = df [ string ] . dt . year df = df . pivot ( columns = string , index = string , values = string )	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_3	year number number number number number number number number number number number number month apr number number number number number number number number number number number number aug number number number number number number number number number number number number dec number number number number number number number number number number number number feb number number number number number number number number number number number number jan number number number number number number number number number number number number jul number number number number number number number number number number number number jun number number number number number number number number number number number number mar number number number number number number number number number number number number may number number number number number number number number number number number number nov number number number number number number number number number number number number oct number number number number number number number number number number number number sep number number number number number number number number number number number number	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_4	df [ string ] = df . mean ( axis = number ) df . loc [ string ] = df . mean ( axis = number )	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_5	year number number number number number number number number number number number number month_mean month apr number number number number number number number number number number number number number aug number number number number number number number number number number number number number dec number number number number number number number number number number number number number feb number number number number number number number number number number number number number jan number number number number number number number number number number number number number jul number number number number number number number number number number number number number jun number number number number number number number number number number number number number mar number number number number number number number number number number number number number may number number number number number number number number number number number number number nov number number number number number number number number number number number number number oct number number number number number number number number number number number number number sep number number number number number number number number number number number number number year_mean number number number number number number number number number number number number number	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_6	var = pd . pivot_table ( data = var , columns = string , index = string , values = string , margins = true )	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_7	year number number number number number number number number number number number number all month apr number number number number number number number number number number number number number aug number number number number number number number number number number number number number dec number number number number number number number number number number number number number feb number number number number number number number number number number number number number jan number number number number number number number number number number number number number jul number number number number number number number number number number number number number jun number number number number number number number number number number number number number mar number number number number number number number number number number number number number may number number number number number number number number number number number number number nov number number number number number number number number number number number number number oct number number number number number number number number number number number number number sep number number number number number number number number number number number number number all number number number number number number number number number number number number number	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_8	var , var = plt . subplots ( ) sns . heatmap ( var = var , data = df , annot = true , fmt = string ) plt . show ( )	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_9	complete code import pandas as pd import matplotlib . pyplot as plt import seaborn as sns import numpy as np df = pd . data_frame ( { string pd . date_range ( start = string , end = string , freq = string ) } ) df [ string ] = np . random . randint ( number , number , len ( df ) ) df [ string ] = df [ string ] . dt . month_name ( ) . str . slice ( stop = number ) . sort_values ( ) df [ string ] = df [ string ] . dt . year df = df . pivot ( columns = string , index = string , values = string ) df [ string ] = df . mean ( axis = number ) df . loc [ string ] = df . mean ( axis = number ) fig , ax = plt . subplots ( ) sns . heatmap ( ax = ax , data = df , annot = true , fmt = string ) plt . show ( )	0
Q_184	seaborn heatmap _ row and column statistic to display	C_184_10	import pandas as pd import matplotlib . pyplot as plt import seaborn as sns import numpy as np df = pd . data_frame ( { string pd . date_range ( start = string , end = string , freq = string ) } ) df [ string ] = np . random . randint ( number , number , len ( df ) ) df [ string ] = df [ string ] . dt . month_name ( ) . str . slice ( stop = number ) . sort_values ( ) df [ string ] = df [ string ] . dt . year df = df . pivot ( columns = string , index = string , values = string ) df [ string ] = df . mean ( axis = number ) df . loc [ string ] = df . mean ( axis = number ) df_values = df . copy ( ) df_values [ string ] = float ( string ) df_values . loc [ string ] = float ( string ) df_means = df . copy ( ) df_means . loc [ _ number , _ number ] = float ( string ) fig , ax = plt . subplots ( ) sns . heatmap ( ax = ax , data = df_values , annot = true , fmt = string , cmap = string , vmin = df . to_numpy ( ) . min ( ) , vmax = df . to_numpy ( ) . max ( ) ) sns . heatmap ( ax = ax , data = df_means , annot = true , fmt = string , cmap = string , vmin = df . to_numpy ( ) . min ( ) , vmax = df . to_numpy ( ) . max ( ) ) plt . show ( )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_0	np . random . seed ( number ) arr1 = np . random . randint ( number , size = ( number , number ) ) arr2 = np . random . randint ( number , size = ( number , number ) ) def original ( a1 , a2 ) m = [ ] for var in range ( len ( a1 ) ) s = np . sum ( np . any ( a1 [ var ] = = a2 [ . , none ] , axis = number ) , axis = number ) m = np . append ( m , np . amax ( s , axis = number ) ) return m	1
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_1	timeit original ( arr1 , arr2 ) number . number s number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_2	def using_sets ( a1 , a2 ) l1 = [ frozenset ( var ) for var in a1 ] l2 = [ frozenset ( var ) for var in a2 ] return np . array ( [ max ( len ( s1 . intersection ( s2 ) ) for s2 in l2 ) for s1 in l1 ] )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_3	number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_4	def list_append ( a1 , a2 ) m = [ ] for var in range ( len ( a1 ) ) s = np . sum ( np . any ( a1 [ var ] = = a2 [ . , none ] , axis = number ) , axis = number ) m . append ( np . amax ( s , axis = number ) ) return np . array ( m )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_5	timeit list_append ( arr1 , arr2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_6	def preallocate ( a1 , a2 ) m = np . empty ( a1 . shape [ number ] , int ) for var in range ( len ( a1 ) ) s = np . sum ( np . any ( a1 [ var ] = = a2 [ . , none ] , axis = number ) , axis = number ) m [ var ] = np . amax ( s , axis = number ) return m	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_7	timeit preallocate ( arr1 , arr2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_8	def using_isin ( a1 , a2 ) m = np . empty ( a1 . shape [ number ] , int ) for var in range ( len ( a1 ) ) s = np . sum ( np . isin ( a2 , a1 [ var ] ) , axis = number ) m [ var ] = np . amax ( s , axis = number ) return m	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_9	timeit using_isin ( arr1 , arr2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_10	def using_sorted ( a1 , a2 ) a1 = np . sort ( a1 , axis = number ) m = np . empty ( a1 . shape [ number ] , int ) for var in range ( len ( a1 ) ) m [ var ] = ( a1 [ var , np . clip ( np . searchsorted ( a1 [ var ] , a2 ) , number , a2 . shape [ number ] _ number ) ] = = a2 ) . sum ( number ) . max ( ) return m	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_11	timeit using_sorted ( arr1 , arr2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_12	njit def using_numba ( a1 , a2 ) m = np . empty ( a1 . shape [ number ] , np . int32 ) s = np . empty ( a2 . shape [ number ] , a1 . dtype ) for var in range ( a1 . shape [ number ] ) for j in range ( a2 . shape [ number ] ) s [ j ] = number for k in range ( a1 . shape [ number ] ) s [ j ] + = a1 [ var , k ] in a2 [ j ] m [ var ] = s . max ( ) return m	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_13	timeit using_numba ( arr1 , arr2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loops each )	0
Q_185	count element_wise match per row between two tagint d numpy array of different length	C_185_14	( arr1 [ . , none , none ] = = arr2 ) . any ( axis = number ) . sum ( axis = number ) . max ( axis = number )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_0	in [ number ] idx = np . nonzero ( np . ones_like ( ourarray ) ) in [ number ] idx out [ number ] ( array ( [ number , number , number , number , number , number ] ) , array ( [ number , number , number , number , number , number ] ) ) in [ number ] ourarray [ idx ] out [ number ] array ( [ number , number , number , number , number , number ] )	1
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_1	in [ number ] ourarray [ idx [ number ] , idx [ number ] ] out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_2	in [ number ] tidx = np . transpose ( idx ) in [ number ] tidx out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_3	in [ number ] [ ourarray [ var , var ] for var , var in tidx ] out [ number ] [ number , number , number , number , number , number ]	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_4	in [ number ] np . argwhere ( np . ones_like ( ourarray ) ) out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_5	in [ number ] np . indices ( ourarray . shape ) out [ number ] array ( [ [ [ number , number ] , [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] , [ number , number ] ] ] ) in [ number ] np . indices ( ourarray . shape ) . reshape ( number , number ) out [ number ] array ( [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_6	in [ number ] timeit np . ones_like ( ourarray ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit ourarray > = number number . number s number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_7	in [ number ] timeit np . nonzero ( ourarray > = number ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_8	in [ number ] timeit np . array ( np . nonzero ( ourarray > = number ) ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_9	in [ number ] timeit np . argwhere ( ourarray > = number ) . t number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_186	how to get a tagint _d array contain index of another tagint _d array	C_186_10	in [ number ] timeit np . indices ( ourarray . shape ) . reshape ( number , _ number ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_187	speed up calculation in astropy	C_187_0	using pure num_py def my_sum2 ( a , b ) length = len ( a )	1
Q_187	speed up calculation in astropy	C_187_1	timeit my_sum ( df ) number ms number . number number ms per loop ( mean std . dev . of number runs , number loop each ) timeit my_sum2 ( df [ string ] , df [ string ] ) number . number ms number . number ms per loop ( mean std . dev . of number runs , number loops each )	0
Q_187	speed up calculation in astropy	C_187_2	def my_sum3 ( a , b ) length = len ( a )	0
Q_187	speed up calculation in astropy	C_187_3	timeit my_sum3 ( df [ string ] , df [ string ] ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_187	speed up calculation in astropy	C_187_4	def my_sum4 ( a , b ) length = len ( a )	0
Q_187	speed up calculation in astropy	C_187_5	timeit my_sum4 ( df [ string ] , df [ string ] ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_187	speed up calculation in astropy	C_187_6	var = sky_coord ( df [ string ] * u . deg , df [ string ] * u . deg , frame = string ) c2 = sky_coord ( df [ string ] * u . deg , df [ string ] * u . deg , frame = string )	0
Q_187	speed up calculation in astropy	C_187_7	c1 . separation ( c2 ) < angle [ number . number number , number . number , number . number , . ] deg >	0
Q_187	speed up calculation in astropy	C_187_8	def my_sum5 ( c1 , c2 ) angle_sum = number for var in range ( len ( c1 ) ) angle_sum + = c1 [ var ] . separation ( c2 [ var + number ] ) . sum ( ) return angle_sum	0
Q_187	speed up calculation in astropy	C_187_9	my_sum5 ( c1 , c2 ) < angle number . number deg >	0
Q_187	speed up calculation in astropy	C_187_10	timeit my_sum5 ( c1 , c2 ) number ms number . number ms per loop ( mean std . dev . of number runs , number loops each )	0
Q_187	speed up calculation in astropy	C_187_11	def my_sum6 ( c1 , c2 ) angle_sum = number lon1 = c1 . spherical . lon . to ( u . rad ) . value lat1 = c1 . spherical . lat . to ( u . rad ) . value lon2 = c2 . spherical . lon . to ( u . rad ) . value lat2 = c2 . spherical . lat . to ( u . rad ) . value for var in range ( len ( c1 ) ) angle_sum + = angular_separation ( lon1 [ var ] , lat1 [ var ] , lon2 [ var + number ] , lat2 [ var + number ] ) . sum ( ) return np . rad2deg ( angle_sum )	0
Q_187	speed up calculation in astropy	C_187_12	timeit my_sum6 ( c1 , c2 ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_0	< _ > df2 . start . df2 . end < _ > df1 . start df1 . end	1
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_1	< _ > df2 . start . df2 . end < _ > df1 . start df1 . end	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_2	var = ( df1 . merge ( df2 , how = string , suffixes = ( string , string ) ) . query ( string ) . rename ( { string string , string string } , axis = number ) [ [ string , string , string ] ] )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_3	var = ( df1 . assign ( key = number ) . merge ( df2 . assign ( key = number ) , on = string , suffixes = ( string , string ) ) . drop ( string , axis = number ) . query ( string ) . rename ( { string string , string string } , axis = number ) [ [ string , string , string ] ] )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_4	print ( df3 ) start end num number number number number number number number number number number number number number number number number	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_5	var = var . groupby ( [ string , string ] ) [ string ] . sum ( ) . reset_index ( )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_6	print ( df3 ) start end num number number number number number number number number number number number number	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_7	var = df1 . start . to_numpy ( ) d1_e = df1 . end . to_numpy ( ) d2_s = df2 . start . to_numpy ( ) d2_e = df2 . end . to_numpy ( )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_8	print ( df3 ) start end tag start_df2 end_df2 num_df2 number number number gneg45 number number number number number number gpos25 number number number number number number gneg34 number number number number number number gneg34 number number number	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_9	var = var . groupby ( [ string , string ] ) [ string ] . sum ( ) . reset_index ( name = string )	0
Q_188	map range from tagint column base on overlap range in another panda dataframe and sum value for same range	C_188_10	print ( df3 ) start end num number number number number number number number number number number number number	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_0	var = df [ [ string , string , string , string ] ] y = df [ string ] model = sm . ols ( y , var ) . fit ( ) predictions = model . predict ( var ) print_model = model . summary ( ) print ( print_model )	1
Q_189	perform multiple linear regression for group base on column unique value	C_189_1	ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable y_values r _ squared ( uncentered ) number . number model ols adj . r _ squared ( uncentered ) number . number method least squares f _ statistic number . number date wed , number oct number prob ( f _ statistic ) number . number number time number number number log _ likelihood _ number . number no . observations number aic number . number df residuals number bic number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ a number . number number . number number . number number . number number number . number number . number b number . number number . number number . number number . number number _ number . number number number . number c number . number number . number number . number number . number _ number . number number . number d _ number . number number . number _ number . number number . number _ number . number number . number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus number . number durbin _ watson number . number prob ( omnibus ) number . number jarque _ bera ( jb ) number . number skew number . number prob ( jb ) number . number kurtosis number . number cond . no . number . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = notes [ number ] r is computed without centering ( uncentered ) since the model does not contain a constant . [ number ] standard errors assume that the covariance matrix of the errors is correctly specified .	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_2	var = list ( set ( df [ string ] ) ) for var in var print ( var ) df_redux = df [ df [ string ] = = var ] print ( df_redux ) x = df_redux [ [ string , string , string , string ] ]	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_3	number id status y_values a b c d number number number number . number number . number number number . number number . number number number number number . number number . number number number . number number . number number number number number . number number . number number number . number number . number ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable y_values r _ squared number . number model ols adj . r _ squared nan method least squares f _ statistic nan date wed , number oct number prob ( f _ statistic ) nan time number number number log _ likelihood number . number no . observations number aic _ number . number df residuals number bic _ number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ a _ number . number inf _ number nan nan nan b _ number . number inf _ number nan nan nan c number . number inf number nan nan nan d number . number inf number nan nan nan = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus nan durbin _ watson number . number prob ( omnibus ) nan jarque _ bera ( jb ) number . number skew number . number number prob ( jb ) number . number kurtosis number . number cond . no . number . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = notes [ number ] standard errors assume that the covariance matrix of the errors is correctly specified . [ number ] the input rank is higher than the number of observations . number id status y_values a b c d number number number number . number number . number number number . number number . number number number number number . number number . number number number . number number . number number number number number . number number number . number number number . number number . number ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable y_values r _ squared number . number model ols adj . r _ squared nan method least squares f _ statistic nan date wed , number oct number prob ( f _ statistic ) nan time number number number log _ likelihood number . number no . observations number aic _ number . number df residuals number bic _ number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ a number . number inf number nan nan nan b number . number inf number nan nan nan c _ number . number inf _ number nan nan nan d _ number . number inf _ number nan nan nan = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus nan durbin _ watson number . number prob ( omnibus ) nan jarque _ bera ( jb ) number . number skew number . number number prob ( jb ) number . number kurtosis number . number cond . no . number . number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = notes [ number ] standard errors assume that the covariance matrix of the errors is correctly specified . [ number ] the input rank is higher than the number of observations . number id status y_values a b c d number number number number . number number . number number number . number number . number number number number number . number number number . number number number . number number . number ols regression results = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = dep . variable y_values r _ squared number . number model ols adj . r _ squared nan method least squares f _ statistic nan date wed , number oct number prob ( f _ statistic ) nan time number number number log _ likelihood number . number no . observations number aic _ number . number df residuals number bic _ number . number df model number covariance type nonrobust = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = coef std err t p > t [ number . number number number . number ] _ a number . number inf number nan nan nan b number . number inf number nan nan nan c number . number inf number nan nan nan d number . number inf number nan nan nan = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = omnibus nan durbin _ watson number . number prob ( omnibus ) nan jarque _ bera ( jb ) number . number skew number . number prob ( jb ) number . number kurtosis number . number cond . no . number . number = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = notes [ number ] standard errors assume that the covariance matrix of the errors is correctly specified . [ number ] the input rank is higher than the number of observations .	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_4	var = pd . read_html ( model . summary ( ) . tables [ number ] . as_html ( ) , header = number , index_col = number ) [ number ] stats_2 = pd . read_html ( model . summary ( ) . tables [ number ] . as_html ( ) , header = number , index_col = number ) [ number ]	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_5	stat_1 dep . variable y_values r _ squared ( uncentered ) number . number number model ols adj . r _ squared ( uncentered ) number . number number method least squares f _ statistic number . number number date wed , number oct number prob ( f _ statistic ) number . number number number time number number number number log _ likelihood _ number . number number no . observations number aic number . number number df residuals number bic number . number number df model number na_n na_n number covariance type nonrobust na_n na_n	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_6	stat_2 index coef std err t p > t [ number . number number number . number ] number a number . number number . number number . number number . number number number . number number . number number b number . number number . number number . number number . number number _ number . number number number . number number c number . number number . number number . number number . number _ number . number number . number number d _ number . number number . number _ number . number number . number _ number . number number . number	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_7	stat_2 [ string ] index coef number a number . number number b number . number number c number . number number d _ number . number	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_8	var = [ ] var = list ( set ( df [ string ] ) ) for var in var df_redux = df [ df [ string ] = = var ] print ( df_redux ) x = df_redux [ [ string , string , string , string ] ] y = df_redux [ string ] model = sm . ols ( y , x ) . fit ( ) predictions = model . predict ( x ) stats_1 = pd . read_html ( model . summary ( ) . tables [ number ] . as_html ( ) , header = number , index_col = number ) [ number ] stats_2 = pd . read_html ( model . summary ( ) . tables [ number ] . as_html ( ) , header = number , index_col = number ) [ number ] if len ( stats_2 ) = number stats_2 [ string ] = var var . append ( stats_2 ) else number all_coef = pd . concat ( var ) df = all_coef [ [ string , string ] ] print ( df )	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_9	status coef a number _ number . number b number _ number . number c number number . number d number number . number a number number . number b number number . number c number _ number . number d number _ number . number a number number . number b number number . number c number number . number d number number . number	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_10	. model = sm . ols ( y , x ) . fit ( ) predictions = model . predict ( x ) print_model = model . summary ( ) print ( predictions ) number number . number number number number . number number number . number number number . number number number . number . number number . number number number number . number number number . number number number number . number number number number . number length number , dtype float64 number number . number number number . number number number . number number number . number number number . number . number number . number number number . number number number . number number number . number number number number . number length number , dtype float64	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_11	var = pd . read_csv ( string , sep = string ) df_coef = [ ] var = list ( set ( var [ string ] ) ) for var in var df_redux = var [ var [ string ] = = var ] x = df_redux [ [ string , string , string , string ] ] y = df_redux [ string ] model = sm . ols ( y , x ) . fit ( ) predictions = model . predict ( x ) stats_2 = pd . read_html ( model . summary ( ) . tables [ number ] . as_html ( ) , header = number , index_col = number ) [ number ] predictions = pd . data_frame ( predictions , columns = [ string ] ) gf = pd . concat ( [ predictions , df_redux ] , axis = number ) df_coef . append ( gf ) all_coef = pd . concat ( df_coef )	0
Q_189	perform multiple linear regression for group base on column unique value	C_189_12	predictions id status y_values a b c d number number . number number number number . number number . number number number . number number . number number number . number number number number . number number . number number number . number number . number number number . number number number number . number number . number number number . number number . number number number . number number number number . number number . number number number . number number . number number number . number number number number . number number . number number number . number number . number number number . number number number number number . number number number . number number number . number number . number number number . number number number number . number number . number number number . number number . number number number . number number number number number . number number number . number number number . number number . number	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_0	server . py import socket import sys import os port = int ( os . getenv ( string ) ) sock = socket . socket ( socket . af_inet , socket . sock_stream ) server_address = ( string , port ) print ( string . format ( * server_address ) ) sock . bind ( server_address ) sock . listen ( ) while true print ( string ) connection , client_address = sock . accept ( ) try print ( string , client_address ) while true data = connection . recv ( number ) print ( string . format ( data ) ) if data print ( string ) connection . sendall ( data ) else print ( string , client_address ) break finally connection . close ( )	1
Q_190	server_client connection in kubernetes cluster use python socket	C_190_1	dockerfile from python number _ alpine workdir / app copy server . py . cmd [ string , string ]	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_2	docker build _ no _ cache _ t q69936079 _ server . docker tag q69936079 _ server gcr . io / < project_id > / q69936079 _ server docker push gcr . io / < project_id > / q69936079 _ server	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_3	client . py import socket import os import sys import time counter = number srv = os . getenv ( string ) port = int ( os . getenv ( string ) ) while number if counter = number time . sleep ( number ) counter + = number sock = socket . socket ( socket . af_inet , socket . sock_stream ) server_address = ( srv , port ) print ( string . format ( counter ) ) print ( string . format ( * server_address ) ) try sock . connect ( server_address ) except exception as e print ( string , e ) continue try message = b string print ( string . format ( message ) ) sock . sendall ( message ) amount_received = number amount_expected = len ( message ) while amount_received < amount_expected data = sock . recv ( number ) amount_received + = len ( data ) print ( string . format ( data ) ) finally print ( string ) sock . close ( )	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_4	dockerfile from python number _ alpine workdir / app copy client . py . cmd [ string , string ]	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_5	docker build _ no _ cache _ t q69936079 _ client . docker tag q69936079 _ client gcr . io / < project_id > / q69936079 _ client docker push gcr . io / < project_id > / q69936079 _ client	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_6	server deployment api_version apps / v1 kind deployment metadata name server _ deployment spec selector match_labels app server replicas number template metadata labels app server spec containers _ name server image string env _ name pythonunbuffered value string _ name listen_port value string	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_7	client deployment api_version apps / v1 kind deployment metadata name client _ deployment spec selector match_labels app client replicas number template metadata labels app client spec containers _ name client image string env _ name pythonunbuffered value string _ name server_address value my _ server _ service _ name server_port value string	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_8	server service api_version v1 kind service metadata name my _ server _ service spec type cluster_ip selector app server ports _ protocol tcp port number	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_9	k get all name ready status restarts age pod / client _ deployment _ number dd5d675ff _ pvwd4 number / number running number number m pod / server _ deployment _ number bd44cc68 _ w6jns number / number running number number m name type cluster _ ip external _ ip port ( s ) age service / kubernetes cluster_ip number . number . number . number < none > number / tcp number h service / my _ server _ service cluster_ip number . number . number . number < none > number / tcp number m name ready up _ to _ date available age deployment . apps / client _ deployment number / number number number number m deployment . apps / server _ deployment number / number number number number m name desired current ready age replicaset . apps / client _ deployment _ number dd5d675ff number number number number m replicaset . apps / server _ deployment _ number bd44cc68 number number number number m	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_10	server logs k logs _ f deployment . apps / server _ deployment starting up on number . number . number . number port number waiting for a connection connection from ( string , number ) received b string sending data back to the client received b string no data from ( string , number ) waiting for a connection connection from ( string , number ) received b string sending data back to the client received b string no data from ( string , number )	0
Q_190	server_client connection in kubernetes cluster use python socket	C_190_11	client logs k logs _ f deployment . apps / client _ deployment connection	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_0	app . post ( string ) def post_hello ( username str = form ( . ) ) return { string username }	1
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_1	app . post ( string ) def post_hello ( username str = form ( . , media_type = string ) ) return { string string , string username }	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_2	media type name application media subtype name x _ www _ form _ urlencoded required parameters no parameters optional parameters no parameters encoding considerations number bit	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_3	mime media type name text mime subtype name standards tree _ html required parameters no required parameters optional parameters charset the charset parameter may be provided to definitively specify the document string s value must be one of the labels of the character encoding used to serialize the file . encoding considerations number bit	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_4	from fastapi import fast_api , form from fastapi . openapi . utils import get_openapi app = fast_api ( ) app . post ( string ) def post_hello ( username str = form ( . ) ) return { string username } def custom_openapi ( ) if app . openapi_schema return app . openapi_schema app . openapi_schema = get_openapi ( title = app . title , version = app . version , openapi_version = app . openapi_version , description = app . description , terms_of_service = app . terms_of_service , contact = app . contact , license_info = app . license_info , routes = app . routes , tags = app . openapi_tags , servers = app . servers , ) request_body = app . openapi_schema [ string ] [ string ] [ string ] [ string ] content = request_body [ string ] new_content = { string content [ string ] } request_body [ string ] = new_content return app . openapi_schema app . openapi = custom_openapi	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_5	import typing from unittest . mock import patch from urllib . parse import unquote_plus import multipart from fastapi import fast_api , form , request , response from fastapi . openapi . utils import get_openapi from multipart . multipart import parse_options_header from starlette . datastructures import form_data , upload_file from starlette . formparsers import form_message , form_parser app = fast_api ( ) form_path = string app . post ( form_path ) async def post_hello ( username str = form ( . ) ) return { string username } def custom_openapi ( ) if app . openapi_schema return app . openapi_schema app . openapi_schema = get_openapi ( title = app . title , version = app . version , openapi_version = app . openapi_version , description = app . description , terms_of_service = app . terms_of_service , contact = app . contact , license_info = app . license_info , routes = app . routes , tags = app . openapi_tags , servers = app . servers , ) request_body = app . openapi_schema [ string ] [ string ] [ string ] [ string ] content = request_body [ string ] new_content = { string content [ string ] } request_body [ string ] = new_content return app . openapi_schema app . openapi = custom_openapi class cp932_form_parser ( form_parser ) async def parse ( self ) _ > form_data string string string	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_6	import sys from urllib . parse import quote_plus name = quote_plus ( string ) . encode ( string ) value = quote_plus ( string ) . encode ( string ) with open ( string , string ) as file . file . write ( name + b string + value ) . number	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_7	curl _ x string string _ h string _ h string _ data _ binary string _ silent jq _ c . { string string }	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_8	var = cp932 e6 number number e5 ad number e3 number b3 e3 number bc e3 number number	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_9	curl _ x string string _ h string _ h string _ data _ urlencode string _ silent jq _ c . { string string }	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_10	curl _ x string string _ h string _ h string _ data string _ silent jq _ c . { string string }	0
Q_191	with fast_api how to add charset to content_type on request header on open_api doc	C_191_11	import typing from unittest . mock import patch from urllib . parse import unquote_plus import multipart from fastapi import fast_api , form , request , response from fastapi . openapi . utils import get_openapi from multipart . multipart import parse_options_header from starlette . datastructures import form_data , upload_file from starlette . formparsers import form_message , form_parser app = fast_api ( ) form_path = string app . post ( form_path ) async def post_hello ( username str = form ( . ) ) return { string username } def custom_openapi ( ) if app . openapi_schema return app . openapi_schema app . openapi_schema = get_openapi ( title = app . title , version = app . version , openapi_version = app . openapi_version , description = app . description , terms_of_service = app . terms_of_service , contact = app . contact , license_info = app . license_info , routes = app . routes , tags = app . openapi_tags , servers = app . servers , ) request_body = app . openapi_schema [ string ] [ string ] [ string ] [ string ] content = request_body [ string ] new_content = { string content [ string ] } request_body [ string ] = new_content return app . openapi_schema app . openapi = custom_openapi class cp932_form_parser ( form_parser ) async def parse ( self ) _ > form_data string string string	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_0	for var in items2 df = df . append ( { string var [ string ] , * * var [ string ] } , ignore_index = true )	1
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_1	var = [ { string number , string { string string , string number , string string , string string } } , { string number , string { string string , string number , string string , string string } } , { string number , string { string string , string number , string string , string string } } , ]	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_2	{ string number , string { string string , string number , string string , string string } }	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_3	id name g_id d_key t_plan fields number number na_n na_n na_n na_n key1 number number na_n na_n na_n na_n number number number na_n na_n na_n na_n prop1 number number na_n na_n na_n na_n plan1 number number na_n na_n na_n na_n key2 number number na_n na_n na_n na_n number number number na_n na_n na_n na_n prop2 number number na_n na_n na_n na_n plan2 number number na_n na_n na_n na_n key3 number number na_n na_n na_n na_n number number number na_n na_n na_n na_n prop3 number number na_n na_n na_n na_n plan3	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_4	{ string number , string string , string number , string string , string string }	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_5	id name g_id d_key t_plan number number prop1 number key1 plan1 number number prop2 number key2 plan2 number number prop3 number key3 plan3	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_6	var = { string item [ string ] } for var , var in item [ string ] . items ( ) var [ var ] = var	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_7	var = { string item [ string ] , * * item [ string ] }	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_8	var = pd . data_frame ( { string item [ string ] , * * item [ string ] } , index = ( i , ) )	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_9	for var , var in enumerate ( items2 ) new_item = { string var [ string ] , * * var [ string ] } temp_df = pd . data_frame ( new_item , index = ( var , ) ) df = df . append ( temp_df , ignore_index = true )	0
Q_192	foor loop print all element but when result be save in panda dataframe it return na_n	C_192_10	for var in items2 new_item = { string var [ string ] , * * var [ string ] } df = df . append ( new_item , ignore_index = true )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_0	from sklearn . ensemble import random_forest_classifier from sklearn . datasets import load_breast_cancer from sklearn . model_selection import train_test_split from shap import tree_explainer from shap . maskers import independent from scipy . special import expit , logit x , y = load_breast_cancer ( return_x_y = true ) x_train , x_test , y_train , y_test = train_test_split ( x , y , random_state = number ) model = random_forest_classifier ( max_depth = number , n_estimators = number ) . fit ( x_train , y_train )	1
Q_193	shap how do i interpret expect value for force_plot	C_193_1	var = independent ( data = x_train ) explainer = tree_explainer ( model , data = var ) ev = explainer . expected_value ev	0
Q_193	shap how do i interpret expect value for force_plot	C_193_2	array ( [ number . number , number . number ] )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_3	model . predict_proba ( masker . data ) . mean ( number )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_4	array ( [ number . number , number . number ] )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_5	var = x_train [ [ number ] ] model . predict_proba ( var )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_6	array ( [ [ number . number number , number . number ] ] )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_7	var = explainer . shap_values ( data_to_explain ) np . array ( var ) . sum ( number ) . ravel ( )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_8	array ( [ _ number . number , number . number ] )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_9	ev + np . array ( sv ) . sum ( number ) . ravel ( )	0
Q_193	shap how do i interpret expect value for force_plot	C_193_10	array ( [ number . number number , number . number ] )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_0	import numpy as np df2 = df . set_index ( string ) . apply ( lambda x ( np . array ( list ( map ( lambda t t [ number ] , sorted ( x [ ( ser = pd . series ( x . index . to_list ( ) ) ) [ ser . str . startswith ( x . name ) ] ] . to_dict ( ) . items ( ) ) ) ) ) . reshape ( _ number , number ) ) , axis = number ) df2 . apply ( lambda arr np . array ( [ abs ( var [ number ] _ var [ number ] ) for var in arr ] ) . mean ( ) )	1
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_1	id id4 number . number number id1 number . number number id3 number . number number dtype float64	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_2	var = df . apply ( lambda x ( np . array ( list ( map ( lambda t t [ number ] , sorted ( x [ ( ser = pd . series ( x . index . to_list ( ) ) ) [ ser . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) ) ) . reshape ( _ number , number ) ) , axis = number ) df [ string ] = var . apply ( lambda arr np . array ( [ abs ( var [ number ] _ var [ number ] ) for var in arr ] ) . mean ( ) )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_3	df . apply ( lambda x x . index . str . startswith ( x . id ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_4	number [ false , false , false , true , false , false , fals . number [ false , true , true , false , false , false , true , . number [ false , false , false , false , true , true , false .	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_5	df . apply ( lambda x ( ser = pd . series ( x . index . to_list ( ) ) ) [ ser . str . startswith ( x . id ) ] , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_6	number number number number number number number number number number number na_n na_n id4_signal1_true na_n na_n na_n na_n id4_signal1_pred na_n na_n number id1_signal1_true id1_signal2_true na_n na_n na_n id1_signal1_pred id1_signal2_pred na_n na_n na_n number na_n na_n na_n id3_signal1_true id3_signal2_true na_n na_n na_n id3_signal1_pred id3_signal2_pred	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_7	df . apply ( lambda x x [ x . index [ x . index . str . startswith ( x . id ) ] ] , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_8	df . apply ( lambda x x [ x . index [ x . index . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_9	number ( ( id4_signal1_true , number . number ) , ( id4_signal1_pred , . number ( ( id1_signal1_true , number . number ) , ( id1_signal2_true , . number ( ( id3_signal1_true , number . number ) , ( id3_signal2_true , . dtype object	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_10	df . apply ( lambda x sorted ( x [ ( ser = pd . series ( x . index . to_list ( ) ) ) [ ser . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_11	number [ ( id4_signal1_pred , number . number ) , ( id4_signal1_true , number . number [ ( id1_signal1_pred , number . number ) , ( id1_signal1_true , . number [ ( id3_signal1_pred , number . number ) , ( id3_signal1_true , number .	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_12	df . apply ( lambda x list ( map ( lambda t t [ number ] , sorted ( x [ x . index [ x . index . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_13	number [ number . number , number . number ] number [ number . number , number . number , number . number , number . number ] number [ number . number , number . number , number . number , number . number ] dtype object	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_14	( np . array ( list ( map ( lambda t t [ number ] , sorted ( x [ ( ser = pd . series ( x . index . to_list ( ) ) ) [ ser . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) ) ) . reshape ( _ number , number ) )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_15	number [ [ number . number , number . number ] ] number [ [ number . number , number . number ] , [ number . number , number . number ] ] number [ [ number . number , number . number ] , [ number . number , number . number ] ] dtype object	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_16	df . apply ( lambda x np . array ( sorted ( x [ x . index [ x . index . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) [ , number ] . astype ( float ) . reshape ( _ number , number ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_17	df2 . apply ( lambda arr np . array ( [ abs ( var [ number ] _ var [ number ] ) for var in arr ] ) )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_18	number [ number . number number ] number [ number . number , number . number number ] number [ number . number number , number . number ] dtype object	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_19	df . apply ( lambda x np . abs ( np . diff ( np . array ( sorted ( x [ x . index [ x . index . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) [ , number ] . astype ( float ) . reshape ( _ number , number ) ) ) , axis = number )	0
Q_194	calculate mean absolute error for each row of a panda dataframe	C_194_20	the third and more simple and fast manner df . apply ( lambda x np . abs ( np . diff ( np . array ( sorted ( x [ x . index [ x . index . str . startswith ( x . id ) ] ] . to_dict ( ) . items ( ) ) ) [ , number ] . astype ( float ) . reshape ( _ number , number ) ) ) . mean ( ) , axis = number )	0
Q_195	concatenate array of different size	C_195_0	var = np . array ( [ parts1 , parts2 , parts3 , parts4 ] )	1
Q_195	concatenate array of different size	C_195_1	var = np . array ( [ var for var in data if var [ number ] < middle_x and var [ number ] > middle_y ] )	0
Q_195	concatenate array of different size	C_195_2	in [ number ] data = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) in [ number ] [ var for var in data ]	0
Q_195	concatenate array of different size	C_195_3	in [ number ] [ var for var in data if var [ number ] < number and var [ number ] > number ] out [ number ] [ array ( [ number , number ] ) ] in [ number ] np . array ( _ ) out [ number ] array ( [ [ number , number ] ] ) in [ number ] _ . shape out [ number ] ( number , number ) in [ number ] [ var for var in data if var [ number ] < number and var [ number ] > number ] out [ number ] [ ] in [ number ] [ var for var in data if var [ number ] < number and var [ number ] > number ] out [ number ] [ array ( [ number , number ] ) ] in [ number ] [ var for var in data if var [ number ] < number and var [ number ] > number ] out [ number ] [ ] in [ number ] [ var for var in data if var [ number ] < number and var [ number ] > number ] out [ number ] [ array ( [ number , number ] ) , array ( [ number , number ] ) ] in [ number ] np . array ( [ var for var in data if var [ number ] < number and var [ number ] > number ] ) out [ number ] array ( [ [ number , number ] , [ number , number ] ] ) in [ number ] np . array ( [ var for var in data if var [ number ] < number and var [ number ] > number ] ) out [ number ] array ( [ [ number , number ] ] )	0
Q_195	concatenate array of different size	C_195_4	[ partition ( var ) for var in part_data if np . shape ( partition ( var ) ) = ( number , number ) ]	0
Q_195	concatenate array of different size	C_195_5	in [ number ] [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] out [ number ] [ [ array ( [ number , number ] ) ] , array ( [ [ number , number ] , [ number , number ] ] ) , [ ] , array ( [ [ number , number ] ] ) ] in [ number ] x1 = np . array ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) < ipython _ input _ number _ b04a5e3fb51c > number visible_deprecation_warning creating an ndarray from ragged nested sequences ( which is a list _ or _ tuple of lists _ or _ tuples _ or ndarrays with different lengths or shapes ) is deprecated . if you meant to do this , you must specify string when creating the ndarray . x1 = np . array ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) in [ number ] x1 out [ number ] array ( [ list ( [ array ( [ number , number ] ) ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , list ( [ ] ) , array ( [ [ number , number ] ] ) ] , dtype = object )	0
Q_195	concatenate array of different size	C_195_6	in [ number ] x2 = np . array ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) in [ number ] x2 . shape out [ number ] ( number , number , number ) in [ number ] x2 out [ number ] array ( [ [ [ number , number ] ] , [ [ number , number ] ] , [ [ number , number ] ] , [ [ number , number ] ] ] )	0
Q_195	concatenate array of different size	C_195_7	in [ number ] x3 = np . array ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) in [ number ] x3 out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 ) in [ number ] x4 = np . array ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) in [ number ] x4 . shape out [ number ] ( number , number , number )	0
Q_195	concatenate array of different size	C_195_8	in [ number ] np . hstack ( ( x1 , x2 , x4 ) ) traceback ( most recent call last ) input in [ number ] in < cell line number > np . hstack ( ( x1 , x2 , x4 ) ) file < _array_function_ internals > number in hstack file / usr / local / lib / python3 . number / dist _ packages / numpy / core / shape_base . py number in hstack return _nx . concatenate ( arrs , number ) file < _array_function_ internals > number in concatenate value_error all the input arrays must have same number of dimensions , but the array at index number has number dimension ( s ) and the array at index number has number dimension ( s )	0
Q_195	concatenate array of different size	C_195_9	in [ number ] np . hstack ( ( x1 , x1 , x1 ) ) . shape out [ number ] ( number , )	0
Q_195	concatenate array of different size	C_195_10	in [ number ] def foo ( * args ) . res = np . empty ( len ( args ) , object ) . res [ ] = args . return res .	0
Q_195	concatenate array of different size	C_195_11	in [ number ] x1 = foo ( [ out [ number ] , out [ number ] , out [ number ] , out [ number ] ] ) in [ number ] x1 . shape , x1 . dtype out [ number ] ( ( number , ) , dtype ( string ) ) in [ number ] x1 = foo ( out [ number ] , out [ number ] , out [ number ] , out [ number ] ) in [ number ] x1 . shape , x1 . dtype out [ number ] ( ( number , ) , dtype ( string ) ) in [ number ] x2 = foo ( out [ number ] , out [ number ] , out [ number ] , out [ number ] ) in [ number ] x2 . shape , x2 . dtype out [ number ] ( ( number , ) , dtype ( string ) ) in [ number ] x3 = foo ( out [ number ] , out [ number ] , out [ number ] , out [ number ] ) in [ number ] x3 . shape , x3 . dtype out [ number ] ( ( number , ) , dtype ( string ) ) in [ number ] x4 = foo ( out [ number ] , out [ number ] , out [ number ] , out [ number ] ) in [ number ] x4 . shape , x4 . dtype out [ number ] ( ( number , ) , dtype ( string ) ) in [ number ] arr = np . hstack ( ( x1 , x2 , x3 , x4 ) ) in [ number ] arr . shape out [ number ] ( number , )	0
Q_195	concatenate array of different size	C_195_12	in [ number ] arr out [ number ] array ( [ array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , list ( [ ] ) , list ( [ ] ) , list ( [ ] ) , list ( [ ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) ] , dtype = object )	0
Q_195	concatenate array of different size	C_195_13	in [ number ] arr . tolist ( ) out [ number ] [ array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , array ( [ [ number , number ] ] ) , [ ] , [ ] , [ ] , [ ] , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) ]	0
Q_195	concatenate array of different size	C_195_14	in [ number ] x3 out [ number ] array ( [ list ( [ ] ) , list ( [ ] ) , list ( [ ] ) , list ( [ ] ) ] , dtype = object )	0
Q_195	concatenate array of different size	C_195_15	[ array ( [ [ number . number , number . number ] ] ) array ( [ [ number . number , number . number ] , [ number . number , number . number ] ] ) array ( [ ] , dtype = float64 ) array ( [ [ number . number , number . number ] , [ number . number , number . number ] ] ) ]	0
Q_196	polars how to add a column with numerical	C_196_0	import polars as pl df = pl . data_frame ( { string [ number , number , number , number , number ] , } ) print ( df )	1
Q_196	polars how to add a column with numerical	C_196_1	shape ( number , number ) col1 _ i64 number number number number number	0
Q_196	polars how to add a column with numerical	C_196_2	var = _ number df . with_column ( pl . lit ( var ) . alias ( string ) )	0
Q_196	polars how to add a column with numerical	C_196_3	shape ( number , number ) col1 col_scalar _ _ i64 i32 number _ number number _ number number _ number number _ number number _ number	0
Q_196	polars how to add a column with numerical	C_196_4	df . with_column ( pl . lit ( my_scalar , dtype = pl . float64 ) . alias ( string ) )	0
Q_196	polars how to add a column with numerical	C_196_5	shape ( number , number ) col1 col_scalar_float _ _ i64 f64 number _ number . number number _ number . number number _ number . number number _ number . number number _ number . number	0
Q_196	polars how to add a column with numerical	C_196_6	var = [ number , number , number , number , number ] df . with_column ( pl . series ( name = string , values = var ) )	0
Q_196	polars how to add a column with numerical	C_196_7	shape ( number , number ) col1 col_list _ _ i64 i64 number number number number number number number number number number	0
Q_196	polars how to add a column with numerical	C_196_8	df . with_column ( pl . series ( name = string , values = my_list , dtype = pl . float64 ) )	0
Q_196	polars how to add a column with numerical	C_196_9	shape ( number , number ) col1 col_list _ _ i64 f64 number number . number number number . number number number . number number number . number number number . number	0
Q_196	polars how to add a column with numerical	C_196_10	var = pl . series ( name = string , values = [ number , number , number , number , number ] ) df . with_column ( var )	0
Q_196	polars how to add a column with numerical	C_196_11	shape ( number , number ) col1 my_series_name _ _ i64 i64 number number number number number number number number number number	0
Q_196	polars how to add a column with numerical	C_196_12	var = pl . series ( values = [ number , number , number , number , number ] ) df . with_column ( var . alias ( string ) )	0
Q_196	polars how to add a column with numerical	C_196_13	shape ( number , number ) col1 col_no_name _ _ i64 i64 number number number number number number number number number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_0	var = df . groupby ( string ) . count ( ) . reset_index ( ) var = var . assign ( new_user_id = var . index + number ) . set_index ( string ) df = df . join ( var [ string ] , on = string ) . drop ( columns = [ string ] ) . rename ( columns = { string string } ) var = df . groupby ( string ) . count ( ) . reset_index ( ) var = var . assign ( new_movie_id = var . index + number ) . set_index ( string ) df = df . join ( var [ string ] , on = string ) . drop ( columns = [ string ] ) . rename ( columns = { string string } ) df = pd . concat ( [ df [ [ string , string ] ] , df . drop ( columns = [ string , string ] ) ] , axis = number )	1
Q_197	how to fix the miss order of id in the panda dataset	C_197_1	user_id movie_id rating timestamp number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_2	user_id movie_id rating timestamp number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_3	var = df . groupby ( string ) . count ( ) . reset_index ( )	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_4	user_id movie_id rating timestamp number number number number number number number number number number number number number number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_5	var = var . assign ( new_user_id = var . index + number ) . set_index ( string )	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_6	movie_id rating timestamp new_user_id user_id number number number number number number number number number number number number number number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_7	var = var . join ( df2 [ string ] , on = string ) . drop ( columns = [ string ] ) . rename ( columns = { string string } )	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_8	movie_id rating timestamp user_id number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_9	rating timestamp user_id movie_id number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_10	var = pd . concat ( [ var [ [ string , string ] ] , var . drop ( columns = [ string , string ] ) ] , axis = number )	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_11	user_id movie_id rating timestamp number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number number number number number . number number	0
Q_197	how to fix the miss order of id in the panda dataset	C_197_12	var = pd . data_frame ( df . user_id . unique ( ) , columns = [ string ] ) . reset_index ( ) . set_index ( string ) . rename ( columns = { string string } ) [ string ] + number df = df . join ( var , on = string ) . drop ( columns = [ string ] ) . rename ( columns = { string string } ) var = pd . data_frame ( df . movie_id . unique ( ) , columns = [ string ] ) . reset_index ( ) . set_index ( string ) . rename ( columns = { string string } ) [ string ] + number df = df . join ( var , on = string ) . drop ( columns = [ string ] ) . rename ( columns = { string string } ) df = pd . concat ( [ df [ [ string , string ] ] , df . drop ( columns = [ string , string ] ) ] , axis = number )	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_0	"var = io . string_io ( string string s a normal line in the file number _ number number _ number number number mm ss here string s error details it string s the same error but it just has one timestamp number _ number number _ number number number mm ss here string s a third normal line in the file string "" )"	1
Q_198	split a flatfile use timestamp as new line instead of n	C_198_1	"var = pd . read_csv ( str_io , header = none ) var number number _ number number _ number number number mm ss here string s an error number here string s a new line even though it string s a another normal li . number number _ number number _ number number number mm ss here "" s a third normal line ."	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_2	var = df [ number ] . str . startswith ( string )	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_3	"df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) ) . ffill ( ) . groupby ( string ) . apply ( lambda x x [ number ] . str . cat ( sep = string ) ) . reset_index ( drop = true ) number number _ number number _ number number number mm ss here string s an error here string s a another normal li . number number _ number number _ number number number mm ss here "" s a third normal line ."	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_4	df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) ) . ffill ( ) . groupby ( string ) . apply ( lambda x x [ number ] . str . cat ( sep = string ) ) [ number ] string s an error here string s a new line even though it string	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_5	df [ ts_rows ] [ number ] . str . slice ( number , number ) number number _ number number _ number number number mm ss number number _ number number _ number number number mm ss number number _ number number _ number number number mm ss number number _ number number _ number number number mm ss	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_6	df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) )	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_7	df [ string ] = df [ ts_rows ] [ number ] . str . slice ( number , number )	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_8	"number ts number number _ number number _ number number number mm ss here string s an error number _ number number _ number number number mm ss number here string s a new line even though it string s a another normal li . number _ number number _ number number number mm ss number number _ number number _ number number number mm ss here "" s a third normal line . number _ number number _ number number number mm ss"	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_9	"df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) ) . ffill ( ) number ts number number _ number number _ number number number mm ss here string s an error number _ number number _ number number number mm ss number here string s a new line even though it string s a another normal li . number _ number number _ number number number mm ss number number _ number number _ number number number mm ss here "" s a third normal line . number _ number number _ number number number mm ss"	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_10	var = pd . series ( [ string , string , string ] ) var number err1 number err2 number err3 var . str . cat ( sep = string ) string	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_11	"df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) ) . ffill ( ) . groupby ( string ) . apply ( lambda x x [ number ] . str . cat ( sep = string ) ) ts number _ number number _ number number number mm ss number _ number number _ number number number mm ss here string s an error here string s a another normal li . number _ number number _ number number number mm ss number _ number number _ number number number mm ss here "" s a third normal line ."	0
Q_198	split a flatfile use timestamp as new line instead of n	C_198_12	"df . assign ( ts = df [ ts_rows ] [ number ] . str . slice ( number , number ) ) . ffill ( ) . groupby ( string ) . apply ( lambda x x [ number ] . str . cat ( sep = string ) ) . reset_index ( drop = true ) number number _ number number _ number number number mm ss here string s an error here string s a another normal li . number number _ number number _ number number number mm ss here "" s a third normal line ."	0
Q_199	how to increase value of polars dataframe column by index	C_199_0	import numpy as np import polars as pl from scipy . signal import argrelextrema df = pl . data_frame ( { string [ number . number , number . number , number . number , number . number , number . number , number . number number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number number , number . number , number . number number , number . number number , ] } ) . with_row_count ( ) df	1
Q_199	how to increase value of polars dataframe column by index	C_199_1	shape ( number , number ) row_nr col1 _ _ u32 f64 number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number number . number number	0
Q_199	how to increase value of polars dataframe column by index	C_199_2	for var in range ( number , number ) print ( string , var , string , argrelextrema ( df [ string ] . to_numpy ( ) , np . less , order = var ) )	0
Q_199	how to increase value of polars dataframe column by index	C_199_3	order number ( array ( [ number , number , number , number , number , number , number , number ] ) , ) order number ( array ( [ number , number , number , number ] ) , ) order number ( array ( [ number , number , number ] ) , ) order number ( array ( [ number , number , number ] ) , ) order number ( array ( [ number , number ] ) , ) order number ( array ( [ number , number ] ) , )	0
Q_199	how to increase value of polars dataframe column by index	C_199_4	var = [ pl . col ( string ) . rolling_min ( window_size = var * number + number , min_periods = var + number , center = true ) . alias ( string + str ( var ) ) for var in range ( number , number ) ] df . with_columns ( var )	0
Q_199	how to increase value of polars dataframe column by index	C_199_5	shape ( number , number ) row_nr col1 roll_min1 roll_min2 roll_min3 roll_min4 roll_min5 roll_min6 _ _ _ _ _ _ _ _ u32 f64 f64 f64 f64 f64 f64 f64 number number . number null null null null null null number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number number number number . number number . number number . number number . number number . number number . number number number . number number number number . number number . number number . number number . number number . number number number . number number number . number number number number . number number . number number . number number . number number number . number number number . number number number . number number number number . number number . number number . number number number . number number number . number number number . number number number . number number number number . number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number null null null null null null	0
Q_199	how to increase value of polars dataframe column by index	C_199_6	var = [ ( pl . col ( string ) . rolling_min ( window_size = var * number + number , min_periods = var + number , center = true ) = = pl . col ( string ) ) . alias ( string + str ( var ) ) for var in range ( number , number ) ] df . with_columns ( var )	0
Q_199	how to increase value of polars dataframe column by index	C_199_7	shape ( number , number ) row_nr col1 min_idx_1 min_idx_2 min_idx_3 min_idx_4 min_idx_5 min_idx_6 _ _ _ _ _ _ _ _ u32 f64 bool bool bool bool bool bool number number . number false false false false false false number number . number false false false false false false number number . number true false false false false false number number . number false false false false false false number number . number true true true true true true number number . number number false false false false false false number number . number false false false false false false number number . number true true false false false false number number . number false false false false false false number number . number false false false false false false number number . number false false false false false false number number . number false false false false false false number number . number false false false false false false number number . number true false false false false false number number . number false false false false false false number number . number true true true true false false number number . number false false false false false false number number . number true false false false false false number number . number false false false false false false number number . number false false false false false false number number . number number true false false false false false number number . number false false false false false false number number . number number true true true true true true number number . number number false false false false false false	0
Q_199	how to increase value of polars dataframe column by index	C_199_8	var = [ ( pl . col ( string ) . rolling_min ( window_size = var * number + number , min_periods = var + number , center = true ) = = pl . col ( string ) ) . cast ( pl . u_int32 ) for var in range ( number , number ) ] df . with_columns ( pl . sum ( var ) . alias ( string ) )	0
Q_199	how to increase value of polars dataframe column by index	C_199_9	row_nr col1 min_freq _ _ _ u32 f64 u32 number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number number . number number number number . number number number number number . number number number	0
Q_199	how to increase value of polars dataframe column by index	C_199_10	var = [ ( pl . col ( string ) . rolling_min ( window_size = var * number + number , min_periods = var + number , center = true ) = = pl . col ( string ) ) for var in range ( number , number ) ]	0
Q_199	how to increase value of polars dataframe column by index	C_199_11	var = number df = df . with_column ( pl . lit ( number , dtype = pl . u_int32 ) . alias ( string ) )	0
Q_199	how to increase value of polars dataframe column by index	C_199_12	while ( min_expr_list ) next_batch , min_expr_list = min_expr_list [ number batch_size ] , min_expr_list [ batch_size ] df = ( df . with_column ( pl . fold ( pl . col ( string ) , lambda acc , x acc + x , next_batch , ) ) ) print ( df )	0
Q_199	how to increase value of polars dataframe column by index	C_199_13	shape ( number , number ) row_nr price min_freq _ _ _ u32 f64 u32 number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number . number number number number number . number number number number . number number number number number . number number number	0
Q_199	how to increase value of polars dataframe column by index	C_199_14	var = pl . data_frame ( { string [ number , number , number , number , number , number , number , number , number , number ] } ) var	0
Q_199	how to increase value of polars dataframe column by index	C_199_15	shape ( number , number ) col1 _ i64 number number number number number number number number number number	0
Q_199	how to increase value of polars dataframe column by index	C_199_16	var = number df = df . with_column ( pl . col ( string ) . rolling_min ( window_size = ( number * var ) + number , min_periods = ( var + number ) , center = true ) . alias ( string ) ) df	0
Q_199	how to increase value of polars dataframe column by index	C_199_17	shape ( number , number ) col1 rolling_min _ _ i64 i64 number null number number number number number number number number number number number number number number number number number null	0
Q_199	how to increase value of polars dataframe column by index	C_199_18	shape ( number , number ) col1 rolling_min _ _ i64 i64 number null number null number null number null number null number null number null number null number null number null	0
