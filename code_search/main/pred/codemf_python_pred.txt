Q_0	sql_alchemy _ dictionary of tag	C_0_0	from sqlalchemy import column , integer , string , table , create_engine from sqlalchemy import orm , meta_data , column , foreign_key from sqlalchemy . orm import relation , mapper , sessionmaker from sqlalchemy . orm . collections import column_mapped_collection from sqlalchemy . ext . associationproxy import association_proxy	1
Q_0	sql_alchemy _ dictionary of tag	C_0_1	var = create_engine ( string , echo = true ) meta = meta_data ( bind = var )	0
Q_0	sql_alchemy _ dictionary of tag	C_0_2	var = table ( string , meta , column ( string , integer , primary_key = true ) , column ( string , string ( number ) ) , column ( string , string ( number ) ) , ) tb_notes = table ( string , meta , column ( string , integer , foreign_key ( string ) , primary_key = true ) , column ( string , string ( number ) , primary_key = true ) , column ( string , string ( number ) ) , ) meta . create_all ( )	0
Q_0	sql_alchemy _ dictionary of tag	C_0_3	class note ( object ) def _init_ ( self , name , value ) self . name = name self . value = value class item ( object ) def _init_ ( self , name , description = string ) self . name = name self . description = description notes = association_proxy ( string , string , creator = note )	0
Q_0	sql_alchemy _ dictionary of tag	C_0_4	mapper ( note , tb_notes ) mapper ( item , tb_items , properties = { string relation ( note , collection_class = column_mapped_collection ( tb_notes . c . name ) ) , } )	0
Q_0	sql_alchemy _ dictionary of tag	C_0_5	var = sessionmaker ( bind = engine ) s = var ( ) i = item ( string , string ) i . notes [ string ] = string i . notes [ string ] = string i . notes [ string ] = string s . add ( i ) s . commit ( ) print i . notes	0
Q_0	sql_alchemy _ dictionary of tag	C_0_6	{ u string u string , u string u string , u string u string }	0
Q_0	sql_alchemy _ dictionary of tag	C_0_7	print list ( tb_notes . select ( ) . execute ( ) ) [ ( number , u string , u string ) , ( number , u string , u string ) , ( number , u string , u string ) ]	0
Q_1	how would i merge nest dictionary in a list in python	C_1_0	> string [ { string s singles string gold string luge _ men string string } , { string s singles string gold string luge _ women string string } , { string string } ]	1
Q_1	how would i merge nest dictionary in a list in python	C_1_1	> string [ { string s singles string gold string silver string luge _ women string [ string , string } , { string string } ]	0
Q_1	how would i merge nest dictionary in a list in python	C_1_2	"[ { string { string s singles string gold string germany string luge _ men string string } } , { string { string s singles string bronze "" } } ]"	0
Q_1	how would i merge nest dictionary in a list in python	C_1_3	"[ string { string s singles string gold string silver string luge _ women string [ string , string ] } , string { string s singles string bronze "" ] } ]"	0
Q_1	how would i merge nest dictionary in a list in python	C_1_4	"[ { string { string s singles string gold string austria string luge _ women string string } } , { string { string s singles string bronze "" } } ]"	0
Q_1	how would i merge nest dictionary in a list in python	C_1_5	[ string { string s singles string gold string bronze string austria string luge _ women string [ string ] } ]	0
Q_1	how would i merge nest dictionary in a list in python	C_1_6	from collections import defaultdict merged = defaultdict ( lambda defaultdict ( list ) ) for var in list_of_dicts for k in var for competition , medal in var [ k ] . iteritems ( ) merged [ k ] [ competition ] . append ( medal )	0
Q_1	how would i merge nest dictionary in a list in python	C_1_7	defaultdict ( < function < lambda > at number > , { string defaultdict ( < type string > , { string s singles string bronze string germany string list string luge _ men string [ string , string ] } ) } )	0
Q_1	how would i merge nest dictionary in a list in python	C_1_8	from collections import defaultdict merged = defaultdict ( lambda defaultdict ( list ) ) for var in listoflistsofdicts for d in var for k in d for competition , medal in d [ k ] . iteritems ( ) merged [ k ] [ competition ] . append ( medal )	0
Q_1	how would i merge nest dictionary in a list in python	C_1_9	defaultdict ( < function < lambda > at number > , { string defaultdict ( < type string > , { string s singles string bronze string austria string list string luge _ doubles string gold string luge _ women string [ string ] } ) , string defaultdict ( < type string > , { string [ string ] } ) , string defaultdict ( < type string > , { string [ string ] , string s singles string gold string silver string luge _ women string [ string , string ] } ) } )	0
Q_2	selective printing from a list	C_2_0	[ var for var in q_list if var [ number ] = = string ]	1
Q_2	selective printing from a list	C_2_1	filter ( lambda x x [ number ] = = string , q_list )	0
Q_2	selective printing from a list	C_2_2	[ var for var in q_list if [ var [ number ] . lower ( ) . replace ( string , string ) , var [ number ] ] = = q_dict . values ( ) ]	0
Q_2	selective printing from a list	C_2_3	var = [ string , string , string , string , string , string , string , string , string , string ] item = namedtuple ( string , var )	0
Q_2	selective printing from a list	C_2_4	var = [ item ( * var ) for var in q_list ]	0
Q_2	selective printing from a list	C_2_5	[ var for var in q_namedtuple if all ( getattr ( var , k ) = = v for k , v in q_dict . iteritems ( ) ) ]	0
Q_2	selective printing from a list	C_2_6	var = [ dict ( zip ( fields , var ) ) for var in q_list ]	0
Q_2	selective printing from a list	C_2_7	{ string string , . etc string string , string string }	0
Q_2	selective printing from a list	C_2_8	[ var for var in q_list_of_dicts if all ( var . get ( k ) = = v for k , v in q_dict . iteritems ( ) ) ]	0
Q_2	selective printing from a list	C_2_9	var = [ ] for var in q_list d = dict ( zip ( fields , var ) )	0
Q_3	how to test the membership of multiple value in a list	C_3_0	all ( var in [ string , string , string , string ] for var in [ string , string ] ) true	1
Q_3	how to test the membership of multiple value in a list	C_3_1	string , string in [ string , string , string , string ]	0
Q_3	how to test the membership of multiple value in a list	C_3_2	string , string ( string , string ) string , number + number ( string , number ) string , string in string ( string , true )	0
Q_3	how to test the membership of multiple value in a list	C_3_3	set ( [ string , string ] ) . issubset ( set ( [ string , string , string , string ] ) ) true { string , string } < = { string , string , string , string } true	0
Q_3	how to test the membership of multiple value in a list	C_3_4	{ string , [ string ] } < = { string , [ string ] , string , string } traceback ( most recent call last ) file string , line number , in < module > type_error unhashable type string	0
Q_3	how to test the membership of multiple value in a list	C_3_5	all ( var in container for var in items )	0
Q_3	how to test the membership of multiple value in a list	C_3_6	var = [ [ string ] , string , string , string ] items = ( var for var in ( string , [ string ] ) ) all ( x in [ [ string ] , string , string , string ] for x in items ) true	0
Q_3	how to test the membership of multiple value in a list	C_3_7	var = set ( range ( number ) ) smallsubset = set ( range ( number ) ) timeit var > = smallsubset number ns number . number ns per loop ( mean std . dev . of number runs , number loops each ) timeit all ( var in var for var in smallsubset ) number ns number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_8	var = set ( range ( number ) ) bigsubset = set ( range ( number ) ) timeit var > = bigsubset number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each ) timeit all ( var in var for var in bigsubset ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_9	timeit bigset > = set ( bigsubseq ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_10	timeit set ( bigseq ) > = set ( bigsubseq ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_11	timeit all ( var in bigseq for var in bigsubseq ) number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_12	timeit bigset = set ( bigseq ) all ( var in bigset for var in bigsubseq ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_3	how to test the membership of multiple value in a list	C_3_13	set ( bigseq ) > = set ( bigsubseq )	0
Q_3	how to test the membership of multiple value in a list	C_3_14	timeit hugeiter = ( x * number for var in [ bigsubseq ] * number for x in var ) set ( bigset ) > = set ( hugeiter ) number . number s number ms per loop ( mean std . dev . of number runs , number loop each ) timeit hugeiter = ( x * number for var in [ bigsubseq ] * number for x in var ) all ( x in bigset for x in hugeiter ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_4	order by dig_like rating in django	C_4_0	class post ( models . model ) name = models . char_field ( max_length = number ) class vote ( models . model ) post = models . foreign_key ( post ) value = models . integer_field ( ) type = models . char_field ( max_length = number , choices = ( ( string , string ) , ( string , string ) ) )	1
Q_4	order by dig_like rating in django	C_4_1	from django . db . models import sum post . objects . annotate ( vote_total = sum ( string ) ) . order_by ( string )	0
Q_4	order by dig_like rating in django	C_4_2	post . objects . get_or_create ( id = number , name = string ) post . objects . get_or_create ( id = number , name = string ) post . objects . get_or_create ( id = number , name = string ) post . objects . get_or_create ( id = number , name = string ) vote . objects . get_or_create ( id = number , post_id = number , value = number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = _ number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = _ number , type = string ) vote . objects . get_or_create ( id = number , post_id = number , value = _ number , type = string )	0
Q_4	order by dig_like rating in django	C_4_3	var = post . objects . annotate ( vote_total = sum ( string ) ) . order_by ( string )	0
Q_4	order by dig_like rating in django	C_4_4	[ ( var . name , var . vote_total ) for var in posts ]	0
Q_4	order by dig_like rating in django	C_4_5	[ ( u string , number ) , ( u string , _ number ) , ( u string , _ number ) , ( u string , none ) ]	0
Q_4	order by dig_like rating in django	C_4_6	for var in post . objects . all ( ) vote . objects . get_or_create ( post_id = var . id , value = number )	0
Q_4	order by dig_like rating in django	C_4_7	[ ( var . name , var . vote_total ) for var in post . objects . annotate ( vote_total = sum ( string ) ) . order_by ( string ) ] [ ( u string , number ) , ( u string , number ) , ( u string , _ number ) , ( u string , _ number ) ]	0
Q_4	order by dig_like rating in django	C_4_8	var = dict ( vote_total = string , awesome_total = string aw string , useful_total = string us string , ) posts = post . objects . all ( ) . extra ( select = var ) . order_by ( string ) [ ( var . name , var . vote_total , var . awesome_total , var . useful_total ) for var in posts ] [ ( u string , number , number , number ) , ( u string , number , number , number ) , ( u string , _ number , _ number , number ) , ( u string , _ number , _ number , number ) ]	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_0	var = dict ( ) var [ string ] = { string number . number , string number . number , string number . number , string number . number , string number . number , string number } var [ string ] = { string number . number , string number . number , string number . number , string number . number , string number . number , string number } var { string { string number . number , string number , string number . number , string number . number , string number . number , string number . number } , string { string number . number , string number , string number . number , string number . number , string number . number , string number . number } }	1
Q_5	how to sort a structure list of stock data for late access in python	C_5_1	prices [ string ] { string number . number , string number , string number . number , string number . number , string number . number , string number . number }	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_2	prices [ string ] [ string ] number . number prices [ string ] [ string ] number . number	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_3	[ date , open , high , low , close , volume , adj_clos ]	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_4	var = [ string , number . number , number . number , number . number , number . number , number . number , number ] date = var [ number ] date string values = var [ number ] values [ number . number , number . number , number . number , number . number , number . number , number ]	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_5	zip ( p , q ) [ i ] = = ( p [ i ] , q [ i ] )	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_6	var = [ string , string , string , string , string , string ] pairs = zip ( var , entry [ number ] ) pairs [ ( string , number . number ) , ( string , number . number ) , ( string , number . number ) , ( string , number . number ) , ( string , number . number ) , ( string , number ) ]	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_7	var = dict ( pairs ) var { string number . number , string number , string number . number , string number . number , string number . number , string number . number } histodict = dict ( ) histodict [ date ] = var	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_8	var = [ string , string , string , string , string , string ] histodict = dict ( ) for var in history date = var [ number ] values = var [ number ] histodict [ date ] = dict ( zip ( var , values ) )	0
Q_5	how to sort a structure list of stock data for late access in python	C_5_9	var = [ string , string , string , string , string , string ] histodict = dict ( ( var [ number ] , dict ( zip ( var , var [ number ] ) ) ) for var in history )	0
Q_6	how to create an object for a django model with a many to many field	C_6_0	var = sample ( ) var . save ( ) var . users . add ( number , number )	1
Q_6	how to create an object for a django model with a many to many field	C_6_1	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars . add ( var ) foo . bars . add ( bar2 )	0
Q_6	how to create an object for a django model with a many to many field	C_6_2	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number ) ) insert into string ( string , string ) values ( number , number ) select string . string from string where ( string . string = number and string . string in ( number ) ) insert into string ( string , string ) values ( number , number )	0
Q_6	how to create an object for a django model with a many to many field	C_6_3	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars . add ( var , bar2 )	0
Q_6	how to create an object for a django model with a many to many field	C_6_4	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_6	how to create an object for a django model with a many to many field	C_6_5	var = bar . objects . get ( pk = number ) bar2 = bar . objects . get ( pk = number ) foo = foo ( ) foo . save ( ) foo . bars = [ var , bar2 ]	0
Q_6	how to create an object for a django model with a many to many field	C_6_6	select string . string , string . string from string where string . string = number select string . string , string . string from string where string . string = number insert into string ( string ) values ( ) select string . string , string . string , string . string from string where string . string = number select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_6	how to create an object for a django model with a many to many field	C_6_7	var = foo ( ) var . save ( ) var . bars = [ number , number ]	0
Q_6	how to create an object for a django model with a many to many field	C_6_8	insert into string ( string ) values ( ) select string . string , string . string , string . string from string where string . string = number select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_6	how to create an object for a django model with a many to many field	C_6_9	var = foo ( ) var . save ( ) var . bars . add ( number , number )	0
Q_6	how to create an object for a django model with a many to many field	C_6_10	insert into string ( string ) values ( ) select string . string from string where ( string . string = number and string . string in ( number , number ) ) insert into string ( string , string ) values ( number , number ) insert into string ( string , string ) values ( number , number )	0
Q_7	detect if a triangle flip when change a point	C_7_0	[ ( number . number , number . number ) , ( number . number , number . number ) , ( number . number , number . number ) ]	1
Q_7	detect if a triangle flip when change a point	C_7_1	( number _ number , number _ number , number ) = ( number , number , number )	0
Q_7	detect if a triangle flip when change a point	C_7_2	( number _ number , number _ number , number ) = ( number , number , number )	0
Q_7	detect if a triangle flip when change a point	C_7_3	( number , number , number ) x ( number , number , number ) = ( number , number , number _ number ) = ( number , number , _ number )	0
Q_7	detect if a triangle flip when change a point	C_7_4	import numpy as np np . cross ( [ number , number , number ] , [ number , number , number ] )	0
Q_7	detect if a triangle flip when change a point	C_7_5	[ ( number . number , number . number ) , ( number . number , number . number ) , ( number . number , number . number ) ]	0
Q_7	detect if a triangle flip when change a point	C_7_6	( number _ number , number _ number , number ) = ( number , number , number )	0
Q_7	detect if a triangle flip when change a point	C_7_7	( number _ number , number _ number , number ) = ( number , number , number )	0
Q_7	detect if a triangle flip when change a point	C_7_8	np . cross ( [ number , number , number ] , [ number , number , number ] )	0
Q_7	detect if a triangle flip when change a point	C_7_9	( y2 _ y1 ) * ( x2 _ x1 ) _ ( y3 _ y1 ) * ( x2 _ x1 )	0
Q_8	try to understand insertion sort algorithm	C_8_0	[ number , number , number , number , number ]	1
Q_8	try to understand insertion sort algorithm	C_8_1	var = mylist [ number ] mylist [ number ] = mylist [ number ] mylist [ number ] = var	0
Q_8	try to understand insertion sort algorithm	C_8_2	[ number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_3	while ? ? ? key = mylist [ i ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_8	try to understand insertion sort algorithm	C_8_4	[ number , number , number , number , number ] [ number , number , number , number , number ] [ number , number , number , number , number ] [ number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_5	var = mylist [ i ] while var < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = var i _ = number	0
Q_8	try to understand insertion sort algorithm	C_8_6	var = mylist [ i ] while i > number and var < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = var i _ = number	0
Q_8	try to understand insertion sort algorithm	C_8_7	[ number , number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_8	[ number , number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_9	[ number , number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_10	[ number , number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_11	[ number , number , number , number , number , number ] [ number , number , number , number , number , number ] [ number , number , number , number , number , number ] [ number , number , number , number , number , number ]	0
Q_8	try to understand insertion sort algorithm	C_8_12	for var in range ( len ( mylist ) ) i = var key = mylist [ i ] while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_8	try to understand insertion sort algorithm	C_8_13	for var in range ( number , len ( mylist ) ) i = var key = mylist [ i ] while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] mylist [ i _ number ] = key i _ = number	0
Q_8	try to understand insertion sort algorithm	C_8_14	for var in range ( number , len ( mylist ) ) key = mylist [ var ] i = var while i > number and key < mylist [ i _ number ] mylist [ i ] = mylist [ i _ number ] i _ = number mylist [ i ] = key	0
Q_9	how to read aloud python list comprehension	C_9_0	[ ( var , y ) for var in [ number , number , number ] for y in [ number , number , number ] if var = y ]	1
Q_9	how to read aloud python list comprehension	C_9_1	for var in [ number , number , number ] for y in [ number , number , number ] if var = y yield ( var , y )	0
Q_9	how to read aloud python list comprehension	C_9_2	[ var for var in a for var in var ]	0
Q_9	how to read aloud python list comprehension	C_9_3	for var in a for x in var yield x	0
Q_9	how to read aloud python list comprehension	C_9_4	var = [ [ number , number , number ] , [ number , number , number ] ]	0
Q_9	how to read aloud python list comprehension	C_9_5	[ number , number , number , number , number , number ]	0
Q_9	how to read aloud python list comprehension	C_9_6	[ [ var [ var ] for var in matrix ] for var in range ( number ) ]	0
Q_9	how to read aloud python list comprehension	C_9_7	for var in range ( number ) yield [ row [ var ] for row in matrix ]	0
Q_9	how to read aloud python list comprehension	C_9_8	for var in range ( number ) l = [ ] for row in matrix l . append ( row [ var ] ) yield l	0
Q_10	remove element that appear more often than once from numpy array	C_10_0	np . array ( list ( set ( map ( tuple , input ) ) ) )	1
Q_10	remove element that appear more often than once from numpy array	C_10_1	array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_2	from collections import counter np . array ( [ var for var , var in counter ( map ( tuple , input ) ) . iteritems ( ) if var = = number ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_3	array ( [ [ number , number ] , [ number , number ] ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_4	var = [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_10	remove element that appear more often than once from numpy array	C_10_5	var = [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] d = { } for var in var d . setdefault ( tuple ( var [ number ] ) , [ ] ) . append ( var [ number ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_6	{ ( number , number ) [ number , number , number ] , ( number , number ) [ number ] , ( number , number ) [ number ] }	0
Q_10	remove element that appear more often than once from numpy array	C_10_7	np . array ( [ var + tuple ( var ) for var , var in d . iteritems ( ) if len ( var ) = = number ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_8	array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_9	import numpy as np input = [ [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] , [ number , number , number , number , number , number ] ] d = { } for var in input d . setdefault ( tuple ( var [ number ] ) , [ ] ) . append ( var ) np . array ( [ v for v in d . itervalues ( ) if len ( v ) = = number ] )	0
Q_10	remove element that appear more often than once from numpy array	C_10_10	array ( [ [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] ] )	0
Q_11	how do a model relate to another model via foreignkey	C_11_0	telephone . objects . filter ( contact_nickname = string )	1
Q_11	how do a model relate to another model via foreignkey	C_11_1	what if i wanted to be able to edit jill and give her more than one number via different saves is this possible ?	0
Q_11	how do a model relate to another model via foreignkey	C_11_2	var = contact . objects . get ( nickname = string )	0
Q_11	how do a model relate to another model via foreignkey	C_11_3	var = telephone . objects . filter ( contact = jill )	0
Q_11	how do a model relate to another model via foreignkey	C_11_4	class telephone ( models . model ) number = models . phone_number_field ( ) class contact ( models . model )	0
Q_11	how do a model relate to another model via foreignkey	C_11_5	var = contact . objects . get ( nickname = string ) . phones . all ( )	0
Q_11	how do a model relate to another model via foreignkey	C_11_6	var = contact . objects . get ( nickname = string ) var . phones . add ( telephone . objects . create ( number = number ) ) var . save ( )	0
Q_11	how do a model relate to another model via foreignkey	C_11_7	var = telephone . objects . get ( number = number ) whose_is_it = var . contact_set . all ( )	0
Q_11	how do a model relate to another model via foreignkey	C_11_8	class pizza ( models . model ) topping = models . foreign_key ( string ) class topping ( models . model ) name = models . char_field ( max_length = number ) class assembled_pizza ( models . model ) topping = models . foreign_key ( string ) pizza = models . foreign_key ( string )	0
Q_11	how do a model relate to another model via foreignkey	C_11_9	class pizza ( models . model ) toppings = models . many_to_many ( string ) class topping ( models . model ) name = models . char_field ( max_length = number )	0
Q_11	how do a model relate to another model via foreignkey	C_11_10	var = pizza ( ) var . toppings . add ( topping . objects . create ( name = string ) ) var . toppings . add ( topping . objects . create ( name = string ) ) var . save ( )	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_0	a array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] ) np . where ( a > number ) ( array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) , array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ) )	1
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_1	def first_true1 ( a ) string string string di = { } for var in range ( len ( a ) ) idx = np . where ( a [ var ] > number ) try di [ var ] = idx [ number ] [ number ] except index_error di [ var ] = none return di	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_2	{ number number , number number , number number , number number , number number , number number , number none }	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_3	def first_true2 ( ) di = { } for var in range ( len ( a ) ) idx = np . argmax ( a [ var ] ) if idx > number di [ var ] = idx else di [ var ] = none return di	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_4	def first_true3 ( ) di = { } for var , var in zip ( * np . where ( a > number ) ) if var in di continue else di [ var ] = var return di	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_5	def first_true4 ( ) di = { } for var , var in enumerate ( np . argmax ( a , axis = number ) ) if var = = number and a [ var ] [ number ] = = number di [ var ] = none else di [ var ] = var return di	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_6	rate / sec usec / pass first_true1 first_true2 first_true3 first_true4 first_true1 number , number number . number _ _ number . number _ number . number _ number . number first_true2 number , number number . number number . number _ _ number . number _ number . number first_true3 number , number number . number number . number number . number _ _ number . number first_true4 number , number number . number number . number number . number number . number _	0
Q_12	find first non_zero value along axis of a sort two dimensional numpy array	C_12_7	rate / sec usec / pass first_true3 first_true1 first_true2 first_true4 first_true3 number number . number _ _ number . number _ number . number _ number . number first_true1 number number . number number number . number _ _ number . number _ number . number first_true2 number number . number number . number number . number _ _ number . number first_true4 number number . number number . number number . number number . number _	0
Q_13	lack understanding of multi_variable assignment python	C_13_0	[ var for var , var in params . items ( ) ]	1
Q_13	lack understanding of multi_variable assignment python	C_13_1	var = [ ] for var in params . items ( ) b = var [ number ] a = var [ number ] var . append ( a )	0
Q_13	lack understanding of multi_variable assignment python	C_13_2	[ var for var , var in params . items ( ) ]	0
Q_13	lack understanding of multi_variable assignment python	C_13_3	var = [ ] for var in params . items ( ) a = var [ number ] a = var [ number ]	0
Q_13	lack understanding of multi_variable assignment python	C_13_4	[ var for var , var in params . items ( ) ]	0
Q_13	lack understanding of multi_variable assignment python	C_13_5	var = [ ] for var in params . items ( ) a = var [ number ] b = var [ number ] var . append ( a )	0
Q_13	lack understanding of multi_variable assignment python	C_13_6	[ a for var , var in params . items ( ) ]	0
Q_13	lack understanding of multi_variable assignment python	C_13_7	var = [ ] for var in params . items ( ) b = var [ number ] b = var [ number ] var . append ( a )	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_0	var = dict ( ( var , var ) for var , var in d . iteritems ( ) if var > number )	1
Q_14	fast way to remove a lot of key from a dictionary	C_14_1	var = { var var for var , var in d . iteritems ( ) if var > number }	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_2	var = { var var for var , var in var . iteritems ( ) if var > number }	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_3	d . clear ( ) d . update ( { var var for var , var in d . iteritems ( ) if var > number } )	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_4	from timeit import timeit n = number n = string mod = string gc = string print string ( n , mod , gc ) setup = string string string ( n , mod , gc ) t = timeit ( string , setup = setup , number = n ) print string ( n , t ) t = timeit ( string string string , setup = setup , number = n ) print string ( n , t ) t = timeit ( string string string , setup = setup , number = n ) print string ( n , t )	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_5	n number * * number mod number garbage collection true number times method number ( dict comp ) number . number number times method number ( key deletion within for loop over d . items ( ) ) number . number number times method number ( key deletion after list comp ) number . number number	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_6	n number * * number mod number garbage collection false number times method number ( dict comp ) number . number number times method number ( key deletion within for loop over d . items ( ) ) number . number number times method number ( key deletion after list comp ) number . number number	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_7	n number * * number mod number garbage collection true number times method number ( dict comp ) number . number s number times method number ( key deletion within for loop over d . items ( ) ) number . number s number times method number ( key deletion after list comp ) number . number s	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_8	n number * * number mod number garbage collection false number times method number ( dict comp ) number . number s number times method number ( key deletion within for loop over d . items ( ) ) number . number s number times method number ( key deletion after list comp ) number . number s	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_9	n number * * number mod number garbage collection true number times method number ( dict comp ) number . number s number times method number ( key deletion within for loop over d . items ( ) ) number . number s number times method number ( key deletion after list comp ) number . number s	0
Q_14	fast way to remove a lot of key from a dictionary	C_14_10	n number * * number mod number garbage collection false number times method number ( dict comp ) number . number s number times method number ( key deletion within for loop over d . items ( ) ) number . number s number times method number ( key deletion after list comp ) number . number s	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_0	session . query ( b ) . filter ( b . a . a_property_special > number . number )	1
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_1	session . query ( b ) . join ( b . a ) . filter ( a . a_property_special > number . number )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_2	var = session . query ( a . a_property_special ) . where ( a . id = = b . a_id ) . correlate ( b ) . as_scalar ( ) session . query ( b ) . filter ( var > number . number )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_3	session . query ( b ) . filter ( b . a . has ( a . a_property_special > number . number ) )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_4	from sqlalchemy import exists session . query ( b ) . filter ( exists ( ) . where ( b . a_id = = a . id , a . a_property_special > number . number ) )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_5	session . query ( association . association_property_1 , func . abs ( a . a_property_special _ b . a . a_property_special ) ) . filter ( b . a . a_property_special > number . number )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_6	from sqlalchemy . orm import aliased a_alias = aliased ( a ) session . query ( association . association_property_1 , func . abs ( a . a_property_special _ a_alias . a_property_special ) ) . join ( association . a ) . join ( association . b ) . join ( a_alias , b . a ) . filter ( a_alias . a_property_special > number . number )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_7	select associations . association_property_1 as associations_association_property_1 , abs ( table_a . a_property_special _ table_a_1 . a_property_special ) as abs_1 from associations join table_a on table_a . id = associations . a_id join table_b on table_b . id = associations . b_id join table_a as table_a_1 on table_a_1 . id = table_b . a_id where table_a_1 . a_property_special > a_property_special_1	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_8	class association ( base ) _tablename_ = string a_id = column ( integer , foreign_key ( string ) , primary_key = true ) b_id = column ( integer , foreign_key ( string ) , primary_key = true ) association_property_1 = column ( float ) hybrid . hybrid_property def a_property_special ( self ) return self . a . a_property_special a_property_special . expression def a_property_special ( cls ) return select ( [ a . a_property_special ] ) . where ( a . id = = cls . a_id ) . as_scalar ( ) hybrid . hybrid_property def b_a_property_special ( self ) return self . b . a . a_property_special b_a_property_special . expression def b_a_property_special ( cls ) return select ( [ a . a_property_special ] ) . where ( a . id = = b . a_id ) . where ( b . id = = cls . b_id ) . as_scalar ( ) session . query ( association . association_property_1 , func . abs ( association . a_property_special _ association . b_a_property_special ) )	0
Q_15	in sql_alchemy how to access a reference property in a query when have multiple relationship	C_15_9	select associations . association_property_1 as associations_association_property_1 , abs ( ( select table_a . a_property_special from table_a where table_a . id = associations . a_id ) _ ( select table_a . a_property_special from table_a , table_b where table_a . id = table_b . a_id and table_b . id = associations . b_id ) ) as abs_1 from associations	0
Q_16	python array manipulation	C_16_0	var = collections . deque ( [ number , number , number , number , number , number , number , number ] ) for var in xrange ( number ) . var . rotate ( _ number ) . var deque ( [ number , number , number , number , number , number , number , number ] )	1
Q_16	python array manipulation	C_16_1	var = [ number , number , number , number , number , number , number , number ] for var in xrange ( number ) . var = var [ number ] + var [ number ] . var [ number , number , number , number , number , number , number , number ]	0
Q_16	python array manipulation	C_16_2	var = [ number , number , number , number , number , number , number , number ] for var in xrange ( number ) . var . append ( var . pop ( number ) ) . var [ number , number , number , number , number , number , number , number ]	0
Q_16	python array manipulation	C_16_3	timeit . timeit ( string , setup = string , number = number ) number . number timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_16	python array manipulation	C_16_4	timeit . timeit ( string , setup = string , number = number ) number . number timeit . timeit ( string , setup = string , number = number ) number . number number	0
Q_16	python array manipulation	C_16_5	timeit . timeit ( string , setup = string , number = number ) number . number timeit . timeit ( string , setup = string , number = number ) number . number number	0
Q_16	python array manipulation	C_16_6	timeit . timeit ( string , setup = string , number = number ) number . number timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_16	python array manipulation	C_16_7	timeit . timeit ( string , setup = string , number = number ) number . number timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_17	python string comparison point to the result	C_17_0	in [ number ] def check_genexp ( a , b ) . return next ( var for var , var in enumerate ( a ) if var = b [ var ] ) in [ number ] timeit check_genexp ( string * number + string , string * number + string ) number loops , best of number number . number number ms per loop in [ number ] from difflib import sequence_matcher in [ number ] def check_matcher ( a , b ) . return next ( sequence_matcher ( a = a , b = b ) . get_matching_blocks ( ) ) . in [ number ] timeit check_matcher ( string * number + string , string * number + string ) number loops , best of number number . number ms per loop	1
Q_17	python string comparison point to the result	C_17_1	def binary_check ( a , b ) len_a , len_b = len ( a ) , len ( b ) if len_a = = len_b return binary_check_helper ( a , b ) min_length , max_length = min ( len_a , len_b ) , max ( len_a , len_b ) res = binary_check_helper ( a [ min_length ] , b [ min_length ] ) return res if res > = number else min_length def binary_check_helper ( a , b ) if a = = b return _ number length = len ( a ) if length = = number return int ( a [ number ] = = b [ number ] ) else half_length = length / / number r = binary_check_helper ( a [ half_length ] , b [ half_length ] ) if r > = number return r r = binary_check ( a [ half_length ] , b [ half_length ] ) if r > = number return r + half_length return r	0
Q_17	python string comparison point to the result	C_17_2	in [ number ] timeit binary_check ( string * number + string , string * number + string ) number loops , best of number number . number s per loop	0
Q_17	python string comparison point to the result	C_17_3	t ( n ) = t ( n / / number ) + ( n ) = _ { i = number } ^ { logn } ( n / number ^ i ) = ( n ( number + number / number + number / number + . ) ) < = ( number n ) = ( n )	0
Q_17	python string comparison point to the result	C_17_4	in [ number ] timeit binary_check ( string * number * * number + string , string * number * * number + string ) number loops , best of number number . number ms per loop in [ number ] timeit check_genexp ( string * number * * number + string , string * number * * number + string ) number loops , best of number number ms per loop in [ number ] timeit binary_check ( number * string * number * * number + string , number * string * number * * number + string ) number loops , best of number number . number ms per loop in [ number ] timeit check_genexp ( number * string * number * * number + string , number * string * number * * number + string ) number loops , best of number number . number s per loop	0
Q_17	python string comparison point to the result	C_17_5	in [ number ] a = string + string * number * number * * number . b = string + string * number * number * * number . in [ number ] timeit binary_check ( a , b ) number loops , best of number number . number ms per loop in [ number ] timeit check_genexp ( a , b ) number loops , best of number number . number s per loop	0
Q_17	python string comparison point to the result	C_17_6	in [ number ] a = string * number * number * * number + string + string * number * number * * number . b = string * number * number * * number + string + string * number * number * * number in [ number ] timeit check_genexp ( a , b ) number loops , best of number number . number ms per loop in [ number ] timeit binary_check ( a , b ) number loops , best of number number . number ms per loop	0
Q_17	python string comparison point to the result	C_17_7	def binary_check2 ( a , b , cutoff = number ) len_a , len_b = len ( a ) , len ( b ) if min ( len_a , len_b ) > cutoff small_a , small_b = a [ cutoff ] , b [ cutoff ] if small_a = small_b return binary_check_helper ( a [ cutoff ] , b [ cutoff ] )	0
Q_18	print python list in group of tagint	C_18_0	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next print string . join ( string ( itn ( ) , itn ( ) , itn ( ) ) for var in xrange ( a ) ) + ( string ( itn ( ) , itn ( ) ) if b = = number else string itn ( ) if b = = number else string )	1
Q_18	print python list in group of tagint	C_18_1	sea mountain desert emma cathy kate ii uuuuuuuuuuuuuuuuuuu aaa round flat sharp blueberry banana apple red purple white hen tiger	0
Q_18	print python list in group of tagint	C_18_2	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] maxel = max ( len ( var ) for var in var ) a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next form = string ( maxel , maxel , maxel ) print string . join ( form ( itn ( ) , itn ( ) , itn ( ) ) for i in xrange ( a ) ) + ( string ( maxel , maxel ) ( itn ( ) , itn ( ) ) if b = = number else string ma itn ( ) if b = = number else string )	0
Q_18	print python list in group of tagint	C_18_3	sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp blueberry banana apple red purple white hen tiger	0
Q_18	print python list in group of tagint	C_18_4	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] maxel0 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) maxel1 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) maxel2 = max ( len ( var [ var ] ) for var in xrange ( number , len ( var ) , number ) ) a , b = divmod ( len ( var ) , number ) itn = iter ( var ) . next form = string ( maxel0 , maxel1 , maxel2 ) print string . join ( form ( itn ( ) , itn ( ) , itn ( ) ) for var in xrange ( a ) ) + ( string ( maxel0 , maxel1 ) ( itn ( ) , itn ( ) ) if b = = number else string maxel0 itn ( ) if b = = number else string )	0
Q_18	print python list in group of tagint	C_18_5	sea mountain desert emma cathy kate hh vvvvvvv aaa round flat sharp nut banana apple red purple white hen tiger	0
Q_18	print python list in group of tagint	C_18_6	from itertools import imap , islice li = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string string , string , string , string , string , string , string ] print string len ( li ) def cols_print ( li , nc ) maxel = tuple ( max ( imap ( len , islice ( li , var , none , nc ) ) ) for var in xrange ( nc ) ) nblines , tail = divmod ( len ( li ) , nc ) stakes = ( nc _ number ) * [ string ] + [ string ] form = string . join ( stakes ) maxel itn = iter ( li ) . next print string . join ( form tuple ( itn ( ) for g in xrange ( nc ) ) for i in xrange ( nblines ) ) if tail print string . join ( stakes [ nc _ tail ] ) maxel [ number tail ] tuple ( li [ _ tail ] ) + string else print for nc in xrange ( number , number ) cols_print ( li , nc ) print string	0
Q_18	print python list in group of tagint	C_18_7	var = tuple ( max ( imap ( len , islice ( li , st , none , nc ) ) ) + number	0
Q_18	print python list in group of tagint	C_18_8	from itertools import imap , islice li = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string string , string , string , string , string , string , string ] print string len ( li ) def cols_print ( li , nc ) maxel = tuple ( max ( imap ( len , islice ( li , var , none , nc ) ) ) + number for var in xrange ( nc ) ) nblines , tail = divmod ( len ( li ) , nc ) stakes = nc * [ string ] form = string . join ( stakes ) maxel itn = iter ( li ) . next print string . join ( form tuple ( itn ( ) for g in xrange ( nc ) ) for i in xrange ( nblines ) ) if tail print string . join ( stakes [ nc _ tail ] ) maxel [ number tail ] tuple ( li [ _ tail ] ) + string else print for nc in xrange ( number , number ) cols_print ( li , nc ) print string	0
Q_19	find the index of element great than x	C_19_0	[ j for ( i , j ) in zip ( a , x ) if i > = number ]	1
Q_19	find the index of element great than x	C_19_1	zip ( a , x ) [ ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) ]	0
Q_19	find the index of element great than x	C_19_2	[ expression ( element ) for * * element * * in * * list * * if condition ]	0
Q_19	find the index of element great than x	C_19_3	[ ( var , var ) for ( var , var ) in zip ( a , x ) ] [ ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) ]	0
Q_19	find the index of element great than x	C_19_4	[ ( i , j ) for ( i , j ) in zip ( a , x ) if i > = number ] [ ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) ]	0
Q_19	find the index of element great than x	C_19_5	[ var for var in itertools . compress ( d , map ( lambda x x > = number , a ) ) ]	0
Q_19	find the index of element great than x	C_19_6	var = [ number , number , number , number , number , number , number , number , number ] d = [ string , string , string , string , string , string , string , string , string ]	0
Q_19	find the index of element great than x	C_19_7	[ var for var in itertools . compress ( [ number , number , number , number , number ] , [ false , true , true , false , true ] ) ] [ number , number , number ]	0
Q_20	lambda and sum python	C_20_0	lambda x summation ( lambda x x , number , lambda x x + number , x )	1
Q_20	lambda and sum python	C_20_1	def inner_function ( x ) soma = number linf = number while linf < = x soma + = linf + number linf + = number return soma	0
Q_20	lambda and sum python	C_20_2	def inner_function ( x ) soma = number for var in range ( number , x + number ) soma + = var return soma	0
Q_20	lambda and sum python	C_20_3	var = lambda x sum ( range ( number , x + number ) )	0
Q_20	lambda and sum python	C_20_4	var = lambda x x * ( x + number ) / number	0
Q_20	lambda and sum python	C_20_5	def summation ( calc_termo , linf , prox , lsup ) soma = number while linf < = lsup soma = soma + calc_termo ( linf ) linf = prox ( linf ) return soma summation ( inner_function , number , lambda x x + number , number )	0
Q_20	lambda and sum python	C_20_6	def summation ( linf , prox , lsup ) soma = number while linf < = lsup soma = soma + linf * ( linf + number ) / number linf = prox ( linf ) return soma summation ( number , lambda x x + number , number )	0
Q_20	lambda and sum python	C_20_7	var = lambda sum ( var * ( var + number ) / number for var in range ( number ) )	0
Q_20	lambda and sum python	C_20_8	sum ( sum ( range ( var + number ) ) for var in range ( number ) )	0
Q_21	python headless browser for gae	C_21_0	webdrivers / _ geckodriver app . yaml dockerfile main . py requirements . txt	1
Q_21	python headless browser for gae	C_21_1	service my _ app _ engine _ service _ name runtime custom env flex entrypoint gunicorn _ b port main app _ timeout number	0
Q_21	python headless browser for gae	C_21_2	from gcr . io / google _ appengine / python run apt _ get update run apt _ get install _ y xvfb run apt _ get install _ y firefox label python_version = python run virtualenv _ no _ download / env _ p python env virtual_env / env env path / env / bin path add requirements . txt / app / run pip install _ r requirements . txt add . / app / cmd exec gunicorn _ b port main app _ timeout number	0
Q_21	python headless browser for gae	C_21_3	var = = number . number . number gunicorn = = number . number . number selenium = = number . number . number pyvirtualdisplay = = number . number . number	0
Q_21	python headless browser for gae	C_21_4	import os import traceback from flask import flask , jsonify , response from selenium import webdriver from pyvirtualdisplay import display app = flask ( _name_ )	0
Q_21	python headless browser for gae	C_21_5	"web_driver_exception message can "" t load the profile . possible firefox version mismatch . you must use gecko_driver instead for firefox number + . profile dir / tmp / tmp number p if you specified a log_file in the firefox_binary constructor , check it for details ."	0
Q_21	python headless browser for gae	C_21_6	desired_capabilities ( ) . firefox [ string ] = false	0
Q_21	python headless browser for gae	C_21_7	var = display ( visible = number , size = ( number , number ) )	0
Q_21	python headless browser for gae	C_21_8	docker build . _ t my _ docker _ image _ tag docker run _ p number number _ name = my _ docker _ container _ name my _ docker _ image _ tag	0
Q_21	python headless browser for gae	C_21_9	gcloud app deploy app . yaml _ version dev _ project my _ app _ engine _ project _ id	0
Q_22	find unique date in numpy datetime array	C_22_0	in [ number ] arr1 = np . array ( [ dt . datetime ( number , number , number ) , dt . datetime ( number , number , number ) , dt . datetime ( number , number , number ) ] ) in [ number ] arr2 = np . array ( [ number , number , number ] ) in [ number ] df = pd . data_frame ( { string arr1 , string arr2 } ) in [ number ] df out [ number ] date value number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number in [ number ] df . drop_duplicates ( string ) out [ number ] date value number number _ number number _ number number number number number number number number _ number number _ number number number number number number	1
Q_22	find unique date in numpy datetime array	C_22_1	in [ number ] now = dt . datetime . utcnow ( ) in [ number ] datetimes = [ now _ dt . timedelta ( hours = number ) * var for var in range ( number ) ] in [ number ] datetimes out [ number ] [ datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) , datetime . datetime ( number , number , number , number , number , number , number ) ]	0
Q_22	find unique date in numpy datetime array	C_22_2	in [ number ] df = pd . data_frame ( datetimes , columns = [ string ] ) in [ number ] df out [ number ] date number number _ number number _ number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number . number number number number _ number number _ number number number number number . number number	0
Q_22	find unique date in numpy datetime array	C_22_3	in [ number ] df = df . sort ( string )	0
Q_22	find unique date in numpy datetime array	C_22_4	in [ number ] df [ string ] = df [ string ] . apply ( lambda x x . day ) in [ number ] df out [ number ] date index number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number number . number number number number number _ number number _ number number number number number . number number number number number _ number number _ number number number number number . number number number	0
Q_22	find unique date in numpy datetime array	C_22_5	select first ( * ) from table group by table . index	0
Q_22	find unique date in numpy datetime array	C_22_6	in [ number ] df = df . groupby ( string ) . first ( ) in [ number ] df out [ number ] date index number number _ number number _ number number number number number . number number number number _ number number _ number number number number number number . number number number number _ number number _ number number number number number number . number number	0
Q_22	find unique date in numpy datetime array	C_22_7	in [ number ] df . index . values out [ number ] array ( [ number , number , number ] )	0
Q_22	find unique date in numpy datetime array	C_22_8	in [ number ] df [ string ] . values out [ number ] array ( [ string , string , string ] , dtype = string )	0
Q_23	reference individual dicts in the one line tree	C_23_0	def paths ( tree , path = ( ) ) for var , var in tree . items ( ) if var yield from paths ( var , path + ( var , ) ) else yield path + ( var , )	1
Q_23	reference individual dicts in the one line tree	C_23_1	def prefix_paths ( prefix_length , tree , path = ( ) ) for var , var in tree . items ( ) if var and len ( path ) + number < prefix_length yield from prefix_paths ( prefix_length , var , path + ( var , ) ) else yield path + ( var , )	0
Q_23	reference individual dicts in the one line tree	C_23_2	var = list ( prefix_paths ( number , taxonomy ) ) print ( var ) [ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ]	0
Q_23	reference individual dicts in the one line tree	C_23_3	var = itertools . chain . from_iterable keys = var ( prefix_paths ( number , taxonomy ) ) unique_keys = tuple ( set ( keys ) ) print ( unique_keys ) ( string , string , string , string , string , string , string )	0
Q_23	reference individual dicts in the one line tree	C_23_4	taxonomy [ string ] [ string ] [ string ]	0
Q_23	reference individual dicts in the one line tree	C_23_5	dicts ( taxonomy ) [ string ] [ string ] [ string ]	0
Q_23	reference individual dicts in the one line tree	C_23_6	dicts ( taxonomy [ string ] [ string ] [ string ] )	0
Q_23	reference individual dicts in the one line tree	C_23_7	def subtree ( tree , three_keys ) return tree [ three_keys [ number ] ] [ three_keys [ number ] ] [ three_keys [ number ] ]	0
Q_23	reference individual dicts in the one line tree	C_23_8	def subtree ( tree , keys ) while keys tree , keys = tree [ keys [ number ] ] , keys [ number ] return tree	0
Q_23	reference individual dicts in the one line tree	C_23_9	subtree ( taxonomy , ( string , string , string ) )	0
Q_23	reference individual dicts in the one line tree	C_23_10	{ string { string { string { string { } } } ,	0
Q_23	reference individual dicts in the one line tree	C_23_11	pprint . pprint ( subtree ( dicts ( taxonomy ) , ( string , string , string ) ) )	0
Q_23	reference individual dicts in the one line tree	C_23_12	{ string { string { string { string { } } } , string { string { string { } } , string { string { } } } } } }	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_0	in [ number ] df = data_frame ( randn ( number , number ) , columns = list ( string ) ) in [ number ] df [ string ] = string in [ number ] df [ string ] = string in [ number ] df . ix [ number , string ] = string in [ number ] mi = df . set_index ( [ string , string ] ) in [ number ] mi out [ number ] < class string > multi_index number entries , ( foo , bar ) to ( foo , bah ) data columns ( total number columns ) a number non _ null values b number non _ null values c number non _ null values dtypes float64 ( number )	1
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_1	in [ number ] store = pd . hdf_store ( string , mode = string ) in [ number ] store . append ( string , mi )	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_2	in [ number ] store . get_storer ( string ) . levels out [ number ] [ string , string ] in [ number ] store out [ number ] < class string > file path test . h5 / df frame_table ( typ _ > appendable_multi , nrows _ > number , ncols _ > number , indexers _ > [ index ] , dc _ > [ two , one ] )	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_3	in [ number ] store . select ( string , columns = [ string ] ) out [ number ] < class string > multi_index number entries , ( foo , bar ) to ( foo , bah ) empty data_frame	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_4	in [ number ] store . select ( string , columns = [ string ] ) out [ number ] < class string > multi_index number entries , ( foo , bar ) to ( foo , bah ) data columns ( total number columns ) a number non _ null values dtypes float64 ( number )	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_5	in [ number ] store . select_column ( string , string ) out [ number ] number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo . number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo number foo length number , dtype object	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_6	in [ number ] timeit store . select_column ( string , string ) number loops , best of number number . number ms per loop in [ number ] timeit store . select ( string , columns = [ string ] ) number loops , best of number number ms per loop	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_7	in [ number ] def f ( ) . level_1 = store . select_column ( string , string ) . level_2 = store . select_column ( string , string ) . return multi_index . from_arrays ( [ level_1 , level_2 ] ) . in [ number ] timeit f ( ) number loops , best of number number . number ms per loop	0
Q_24	panda hdf_store of multi_index data_frames how to efficiently get all index	C_24_8	in [ number ] store . select_column ( string , string ) . unique ( ) out [ number ] array ( [ string ] , dtype = object ) in [ number ] store . select_column ( string , string ) . unique ( ) out [ number ] array ( [ string , string ] , dtype = object )	0
Q_25	automatically load sql table by read data from text file	C_25_0	common_name , species , location , color black _ headed spider monkey , ateles fusciceps , ecuador , black central american squirrel monkey , saimiri oerstedii , costa rica , orange vervet , chlorocebus pygerythrus , south africa , white	1
Q_25	automatically load sql table by read data from text file	C_25_1	import csv import sqlite3 db = sqlite3 . connect ( string ) cursor = db . cursor ( ) cursor . execute ( string ) cursor . execute ( string string string ) with open ( string ) as f for var in csv . dict_reader ( f ) cursor . execute ( string string string , var ) cursor . execute ( string string string , var ) db . commit ( ) db . close ( )	0
Q_25	automatically load sql table by read data from text file	C_25_2	var = string string string c . execute ( var )	0
Q_25	automatically load sql table by read data from text file	C_25_3	var = string string string ( current_row [ number ] , current_row [ number ] , current_row [ number ] ) c . execute ( var )	0
Q_25	automatically load sql table by read data from text file	C_25_4	var = string string string c . execute ( var , ( current_row [ number ] , current_row [ number ] , current_row [ number ] ) )	0
Q_25	automatically load sql table by read data from text file	C_25_5	insert into ln values ( ? , ? , ? )	0
Q_25	automatically load sql table by read data from text file	C_25_6	insert into ln values ( number , number . number , number )	0
Q_25	automatically load sql table by read data from text file	C_25_7	insert into ln values ( number , number . number , number )	0
Q_26	find unique loop in the close graph	C_26_0	number _ > number _ > number _ > number	1
Q_26	find unique loop in the close graph	C_26_1	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_2	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_3	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_4	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_5	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_6	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_7	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_8	number _ > number _ > number _ > number	0
Q_26	find unique loop in the close graph	C_26_9	number _ > number _ > number _ > number	0
Q_27	python how to update the dictionary by mutate it format	C_27_0	{ country_name [ location , population , president ] }	1
Q_27	python how to update the dictionary by mutate it format	C_27_1	{ country_name { string location , string population , string president } }	0
Q_27	python how to update the dictionary by mutate it format	C_27_2	def mutate_dic ( dic , country_name , field , new_data ) dic [ country_name ] [ field ] = new_data	0
Q_27	python how to update the dictionary by mutate it format	C_27_3	dic [ string ] [ string ] = string mutate_dic ( dic , string , string , string )	0
Q_27	python how to update the dictionary by mutate it format	C_27_4	class country ( object ) def _init_ ( self , location , population , president = string ) self . location = location self . population = population self . president = president dic = { string country ( string , string ) } dic [ string ] . population = string	0
Q_27	python how to update the dictionary by mutate it format	C_27_5	name , location , population , president canada , north america , number m + , none france , europe , number . number m , hollande	0
Q_27	python how to update the dictionary by mutate it format	C_27_6	import csv with open ( string , string ) as f reader = csv . dict_reader ( f ) dic = { var [ string ] . lower ( ) var for var in reader } print dic	0
Q_27	python how to update the dictionary by mutate it format	C_27_7	{ string { string string , string string , string string , string string } , string { string string , string string , string string , string string } }	0
Q_27	python how to update the dictionary by mutate it format	C_27_8	var = { var { string var [ number ] , string var [ number ] , string var [ number ] } for var , var in var . items ( ) }	0
Q_27	python how to update the dictionary by mutate it format	C_27_9	var = { var country ( * var ) for var , var in var . items ( ) }	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_0	reduce ( lambda r , d r . update ( d ) or r , lst , { } )	1
Q_28	convert list of single key dictionary into a single dictionary	C_28_1	var = [ . { string string } , . { string string } , . { string string } . ] reduce ( lambda r , d r . update ( d ) or r , var , { } ) { string string , string string , string string }	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_2	from itertools import chain , imap from operator import methodcaller dict ( chain . from_iterable ( imap ( methodcaller ( string ) , lst ) ) )	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_3	from itertools import chain from operator import methodcaller dict ( chain . from_iterable ( map ( methodcaller ( string ) , lst ) ) )	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_4	from itertools import chain , imap from operator import methodcaller dict ( chain . from_iterable ( map ( methodcaller ( string ) , lst ) ) ) { string string , string string , string string }	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_5	{ k v for var in lst for k , v in var . iteritems ( ) }	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_6	{ k v for var in lst for k , v in var . iteritems ( ) } { string string , string string , string string }	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_7	import timeit def d_reduce ( lst ) . reduce ( lambda r , var r . update ( var ) or r , lst , { } ) . def d_chain ( lst ) . dict ( chain . from_iterable ( imap ( methodcaller ( string ) , lst ) ) ) . def d_comp ( lst ) . { k v for var in lst for k , v in var . iteritems ( ) } . timeit . timeit ( string , string ) number . number timeit . timeit ( string , string ) number . number timeit . timeit ( string , string ) number . number	0
Q_28	convert list of single key dictionary into a single dictionary	C_28_8	import string , random lst = [ { random . choice ( string . printable ) random . randrange ( number ) } for var in range ( number ) ] timeit . timeit ( string , string , number = number ) number . number timeit . timeit ( string , string , number = number ) number . number timeit . timeit ( string , string , number = number ) number . number	0
Q_29	organize list of list in python	C_29_0	var = [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ]	1
Q_29	organize list of list in python	C_29_1	for var in range ( len ( s ) ) . [ s [ var ] , map ( lambda t string . join ( t ) , zip ( * s [ var + number ] ) ) ] . [ [ string , string , string ] , [ string , string , string ] ] [ [ string , string , string ] , [ string , string , string ] ] [ [ string , string , string ] , [ string , string , string ] ] [ [ string , string , string ] , [ ] ]	0
Q_29	organize list of list in python	C_29_2	for var in range ( len ( s ) _ number ) . [ s [ var ] , map ( string . join , zip ( * s [ var + number ] ) ) ]	0
Q_29	organize list of list in python	C_29_3	var = [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_29	organize list of list in python	C_29_4	for var in range ( len ( l ) _ number ) . [ l [ var ] , map ( sum , zip ( * l [ var + number ] ) ) ] . [ [ number , number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] ] [ [ number , number , number ] , [ number , number , number ] ]	0
Q_29	organize list of list in python	C_29_5	from operator import add add ( number , number ) number add ( string , string )	0
Q_29	organize list of list in python	C_29_6	def my_add ( t ) . return reduce ( add , t ) . my_add ( ( string , string ) ) string my_add ( ( number , number ) ) number	0
Q_29	organize list of list in python	C_29_7	def do_my_work ( s ) for var in range ( len ( s ) _ number ) print [ s [ var ] , map ( my_add , zip ( * s [ var + number ] ) ) ]	0
Q_29	organize list of list in python	C_29_8	s [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] do_my_work ( s ) [ [ string , string , string ] , [ string , string , string ] ] [ [ string , string , string ] , [ string , string , string ] ] [ [ string , string , string ] , [ string , string , string ] ] l [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] do_my_work ( l )	0
Q_30	generate list until certain condition be meet use a single line	C_30_0	def frob ( x ) if str ( x ) = = str ( x ) [ _ number ] return x else return frob ( x + int ( str ( x ) [ _ number ] ) ) print frob ( number )	1
Q_30	generate list until certain condition be meet use a single line	C_30_1	def frob ( f , x ) if str ( x ) = = str ( x ) [ _ number ] return x else return f ( f , x + int ( str ( x ) [ _ number ] ) ) print frob ( frob , number )	0
Q_30	generate list until certain condition be meet use a single line	C_30_2	def frob ( f , x ) return x if str ( x ) = = str ( x ) [ _ number ] else f ( f , x + int ( str ( x ) [ _ number ] ) ) print frob ( frob , number )	0
Q_30	generate list until certain condition be meet use a single line	C_30_3	var = lambda f , x x if str ( x ) = = str ( x ) [ _ number ] else f ( f , x + int ( str ( x ) [ _ number ] ) ) print var ( var , number )	0
Q_30	generate list until certain condition be meet use a single line	C_30_4	var = ( lambda f lambda x f ( f , x ) ) ( lambda f , x x if str ( x ) = = str ( x ) [ _ number ] else f ( f , x + int ( str ( x ) [ _ number ] ) ) ) print var ( number )	0
Q_30	generate list until certain condition be meet use a single line	C_30_5	print ( lambda f lambda x f ( f , x ) ) ( lambda f , x x if str ( x ) = = str ( x ) [ _ number ] else f ( f , x + int ( str ( x ) [ _ number ] ) ) ) ( number )	0
Q_30	generate list until certain condition be meet use a single line	C_30_6	def troz ( x ) return frob ( x + int ( str ( x ) [ _ number ] ) )	0
Q_30	generate list until certain condition be meet use a single line	C_30_7	print ( lambda x ( lambda f lambda x f ( f , x ) ) ( lambda f , x x if str ( x ) = = str ( x ) [ _ number ] else f ( f , x + int ( str ( x ) [ _ number ] ) ) ) ( x + int ( str ( x ) [ _ number ] ) ) ) ( number )	0
Q_31	sum of even fibonacci number up to tagint million	C_31_0	f [ n + number ] = f [ n ] + f [ n _ number ]	1
Q_31	sum of even fibonacci number up to tagint million	C_31_1	f [ n _ number ] = f [ n + number ] _ f [ n ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_2	f [ n ] = f [ n + number ] _ f [ n + number ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_3	sum ( n = number to n ) f [ n ] = ( f [ number ] _ f [ number ] ) + ( f [ number ] _ f [ number ] ) + ( f [ number ] _ f [ number ] ) + . + ( f [ n + number ] _ f [ n + number ] ) = f [ n + number ] _ f [ number ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_4	f [ number , number , number number ] _ number	0
Q_31	sum of even fibonacci number up to tagint million	C_31_5	f [ n + number ] = number * f [ n + number ] _ f [ n ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_6	f [ n + number ] = number * f [ n ] + f [ n _ number ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_7	var = sum ( k = number to k ) f [ number * k ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_8	f [ number * k + number ] + s _ f [ number ] = number * s + ( _ f [ number * k ] + s + f [ number ] )	0
Q_31	sum of even fibonacci number up to tagint million	C_31_9	number * s = ( f [ number * k ] + f [ number * k ] ) _ ( f [ number ] + f [ number ] ) = number * f [ number * k + number ] _ number * f [ number ]	0
Q_31	sum of even fibonacci number up to tagint million	C_31_10	var = ( f [ number * k + number ] _ number ) / number	0
Q_31	sum of even fibonacci number up to tagint million	C_31_11	var = floor ( log ( sqrt ( number ) * max ) / log ( number . number * ( number + sqrt ( number ) ) ) )	0
Q_31	sum of even fibonacci number up to tagint million	C_31_12	var = ( f [ number ] _ number ) / number	0
Q_31	sum of even fibonacci number up to tagint million	C_31_13	( f [ number , number , number ] _ number ) / number	0
Q_32	view permission in django	C_32_0	[ x ] number . added string to default permission list	1
Q_32	view permission in django	C_32_1	[ x ] number . test the string permission is added to all models	0
Q_32	view permission in django	C_32_2	[ x ] number . add string to default model class .	0
Q_32	view permission in django	C_32_3	def get_add_permission ( self ) string string string warnings . warn ( string string , pending_deprecation_warning , stacklevel = number ) return string self . model_name	0
Q_32	view permission in django	C_32_4	[ x ] number . add string to default admin class	0
Q_32	view permission in django	C_32_5	def has_view_permission ( self , request , obj = none ) string string string opts = self . opts codename = get_permission_codename ( string , opts ) return self . has_change_permission ( request , obj ) or request . user . has_perm ( string ( opts . app_label , codename ) )	0
Q_32	view permission in django	C_32_6	def get_inline_instances ( self , request , obj = none ) . if not ( inline . has_add_permission ( request ) or inline . has_change_permission ( request , obj ) or inline . has_delete_permission ( request , obj ) or inline . has_view_permission ( request , obj ) )	0
Q_32	view permission in django	C_32_7	def render_change_form ( self , request , context , add = false , change = false , form_url = string , obj = none ) . context . update ( { . string self . has_view_permission ( request , obj ) ,	0
Q_32	view permission in django	C_32_8	[ x ] number . modify string permission to make form read only	0
Q_32	view permission in django	C_32_9	[ x ] number . update default template to list models if user has view permission	0
Q_32	view permission in django	C_32_10	class admin_site ( object ) never_cache def index ( self , request , extra_context = none ) .	0
Q_32	view permission in django	C_32_11	[ x ] number . confirm user can string but not string the model	0
Q_32	view permission in django	C_32_12	[ x ] number . remove string button if user is viewing an item	0
Q_32	view permission in django	C_32_13	string context [ string ] and not is_popup and change and save_as , string context [ string ] ,	0
Q_33	access cascade dictionary of unknown number	C_33_0	var = { string { string { string number } } } reduce ( dict . get , [ string , string , string ] , var ) number	1
Q_33	access cascade dictionary of unknown number	C_33_1	var = { string { string { string number } } }	0
Q_33	access cascade dictionary of unknown number	C_33_2	dct . get ( string ) { string { string number } } dct . get ( string ) . get ( string ) { string number } dct . get ( string ) . get ( string ) . get ( string ) number	0
Q_33	access cascade dictionary of unknown number	C_33_3	reduce ( dict . get , [ string , string , string ] , dct ) number	0
Q_33	access cascade dictionary of unknown number	C_33_4	def getdeep ( dct , deepkey ) . return reduce ( dict . get , deepkey , dct ) .	0
Q_33	access cascade dictionary of unknown number	C_33_5	getdeep ( dct , [ string , string ] ) { string number }	0
Q_33	access cascade dictionary of unknown number	C_33_6	getdeep ( dct , [ string , string , string ] ) number	0
Q_33	access cascade dictionary of unknown number	C_33_7	getdeep ( dct , ( string , string , string ) ) number	0
Q_33	access cascade dictionary of unknown number	C_33_8	var = ( string , string , string ) getdeep ( dct , var ) number	0
Q_33	access cascade dictionary of unknown number	C_33_9	reduce ( dict . get , deepkey [ _ number ] , dct ) { string number } reduce ( dict . get , deepkey [ _ number ] , dct ) [ deepkey [ _ number ] ] = number dct { string { string { string number } } }	0
Q_33	access cascade dictionary of unknown number	C_33_10	def setdeep ( dct , deepkey , val ) getdeep ( dct , deepkey [ _ number ] ) [ deepkey [ _ number ] ] = val	0
Q_34	graph n iteration of a function_ python	C_34_0	def logiter ( c , x0 , n ) y = [ ] x = x0 for var in range ( n ) x = c * x * ( number _ x ) y . append ( x ) return np . array ( y )	1
Q_34	graph n iteration of a function_ python	C_34_1	class logistics ( ) def _init_ ( self , c , x0 ) self . x = x0 self . c = c def next_iter ( self ) self . x = self . c * self . x * ( number _ self . x ) return self . x	0
Q_34	graph n iteration of a function_ python	C_34_2	def logiter ( c , x0 , n ) l = logistics ( c , x0 ) return np . array ( [ l . next_iter ( ) for var in range ( n ) ] )	0
Q_34	graph n iteration of a function_ python	C_34_3	def log_generator ( c , x0 ) x = x0 while true x = c * x * ( number _ x ) yield x def logiter ( c , x0 , n ) l = log_generator ( c , x0 ) return np . array ( [ l . next ( ) for var in range ( n ) ] )	0
Q_34	graph n iteration of a function_ python	C_34_4	def logiter ( c , x0 , n ) res = np . empty ( ( n , len ( x0 ) ) ) res [ number ] = c * x0 * ( number _ x0 ) for var in range ( number , n ) res [ var ] = c * res [ var _ number ] * ( number _ res [ var _ number ] ) return res	0
Q_34	graph n iteration of a function_ python	C_34_5	logiter ( number . number , linspace ( number , number , number ) , number )	0
Q_34	graph n iteration of a function_ python	C_34_6	var = logiter ( number . number , np . linspace ( number , number , number ) , number )	0
Q_34	graph n iteration of a function_ python	C_34_7	import matplotlib . pyplot as plt plt . plot ( data ) plt . show ( )	0
Q_34	graph n iteration of a function_ python	C_34_8	var = logiter ( number . number , np . linspace ( number . number , number . number , number ) , number )	0
Q_34	graph n iteration of a function_ python	C_34_9	var = np . array ( [ number , number , number ] ) color2 = np . array ( [ number , number , number ] ) for var , var in enumerate ( np . linspace ( number , number , data . shape [ number ] ) ) plt . plot ( data [ , var ] , string , color = ( number _ var ) * var + var * color2 )	0
Q_34	graph n iteration of a function_ python	C_34_10	var = logiter ( number . number , np . linspace ( number , number , number ) , number ) plt . imshow ( var . t , cmap = plt . cm . bwr , interpolation = string , origin = string , extent = [ number , number , number , number ] , vmin = number , vmax = number ) plt . axis ( string ) plt . colorbar ( )	0
Q_35	blit a rectangle at by coordinate	C_35_0	screen . blit ( img . image , ( number , number ) )	1
Q_35	blit a rectangle at by coordinate	C_35_1	img . rect . topleft = ( number , number ) screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_2	img . rect . x = number img . rect . y = number screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_3	img . rect . center = ( number , number ) screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_4	img . rect . center = screen . get_rect ( ) . center screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_5	img . rect . right = screen . get_rect ( ) . right screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_6	img . rect . bottomleft = screen . get_rect ( ) . bottomleft screen . blit ( img . image , img . rect )	0
Q_35	blit a rectangle at by coordinate	C_35_7	x , y top , left , bottom , right topleft , bottomleft , topright , bottomright midtop , midleft , midbottom , midright center , centerx , centery	0
Q_35	blit a rectangle at by coordinate	C_35_8	img . rect = img . image . get_rect ( center = screen . get_rect ( ) . center )	0
Q_36	tool to use for conditional density estimation in python	C_36_0	import pandas as pd df = pd . read_csv ( string )	1
Q_36	tool to use for conditional density estimation in python	C_36_1	import pandas as pd import numpy as np t = [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] df = pd . data_frame ( np . random . randn ( number , number ) , columns = list ( string ) ) df [ string ] = t	0
Q_36	tool to use for conditional density estimation in python	C_36_2	a c b number _ number . number number number . number number number number number . number number _ number . number number number _ number . number _ number . number number number _ number . number _ number . number number number number . number number . number number number number . number _ number . number number number number . number number . number number number number . number number . number number number number . number number number . number number number number . number _ number . number number number _ number . number _ number . number number number _ number . number number number . number number number _ number . number number . number number number number . number _ number . number number number number . number number . number number number _ number . number _ number . number number number number . number number . number number number number . number _ number . number number number number . number _ number . number number number number . number _ number . number number	0
Q_36	tool to use for conditional density estimation in python	C_36_3	var = df [ df [ string ] = = number ] print var	0
Q_36	tool to use for conditional density estimation in python	C_36_4	for var in df . groupby ( string ) print var	0
Q_36	tool to use for conditional density estimation in python	C_36_5	a c b number _ number . number _ number . number number number number . number _ number . number number number _ number . number number . number number	0
Q_36	tool to use for conditional density estimation in python	C_36_6	( number , a c b number number . number number . number number number number . number number . number number number number . number number number . number number number number . number _ number . number number number number . number number . number number number _ number . number _ number . number number number number . number number . number number ) ( number , a c b number _ number . number number number . number number number number number . number number _ number . number number number _ number . number _ number . number number number number . number _ number . number number number number . number number . number number number _ number . number _ number . number number number _ number . number number number . number number number number . number _ number . number number number number . number _ number . number number number number . number _ number . number number ) ( number , a c b number _ number . number _ number . number number number number . number _ number . number number number _ number . number number . number number )	0
Q_36	tool to use for conditional density estimation in python	C_36_7	import random import matplotlib . pyplot as plt xbins = range ( number , len ( l ) ) plt . hist ( df . b , bins = number , color = string ) plt . show ( )	0
Q_36	tool to use for conditional density estimation in python	C_36_8	import numpy as np import matplotlib . pyplot as plt a = df . a b = df . b c = df . c t = range ( number ) plt . plot ( t , a , string , b , string , c , string ) plt . legend ( ) plt . show ( )	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_0	x ^ number + y ^ number = r ^ number ( number < r < r )	1
Q_37	method to uniformly randomly populate a disk with point in python	C_37_1	cos ( a ) = x / r sin ( a ) = y / r sin ^ number ( a ) + cos ^ number ( a ) = number	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_2	d ( area , n , n _ number ) = area ( n ) _ area ( n _ number )	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_3	var = pi * ( dr * n ) ^ number _ pi * ( dr * ( n _ number ) )	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_4	d ( area , n , n _ number ) = [ pi * ( dr * n ) ^ number _ pi * ( dr * ( n _ number ) ) ^ number ] _ [ pi * ( dr * ( n _ number ) ) ^ number _ pi * ( dr * ( n _ number ) ) ^ number ] d ( area , n , n _ number ) = pi * [ ( dr * n ) ^ number _ number * ( dr * ( n _ number ) ) ^ number + ( dr * ( n _ number ) ) ^ number ]	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_5	import random import math r = number . n_rings = number . n_angles = number . dr = number . / n_rings da = number * math . pi / n_angles base_points_per_division = number increase_per_level = number . number points = [ ] ring = number while ring < n_rings angle = number while angle < n_angles for var in xrange ( int ( base_points_per_division ) ) ra = angle * da + da * math . random ( ) rr = r * dr + dr * random . random ( ) x = rr * math . cos ( ra ) y = rr * math . sin ( ra ) points . append ( ( x , y ) ) angle + = number base_points_per_division = base_points_per_division * increase_per_level ring + = number	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_6	var = number n_angles = number base_points = . number increase_per_level = number . number	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_7	var = . number number points = [ ] ring = number while ring < n_rings angle = number base_points_per_division = var * math . pi * ( dr * * number ) * ( number * ring + number ) / n_angles while angle < n_angles for var in xrange ( int ( base_points_per_division ) ) ra = angle * da + min ( da , da * random . random ( ) ) rr = ring * dr + dr * random . random ( ) x = rr * math . cos ( ra ) y = rr * math . sin ( ra ) points . append ( ( x , y ) ) angle + = number ring + = number	0
Q_37	method to uniformly randomly populate a disk with point in python	C_37_8	var = number . n_rings = number . n_angles = number . density = number / ( dr * da )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_0	var = ( number , number , number ) r_p = [ ( var , j , k ) for var in range ( number ) for j in range ( number ) for k in range ( number ) ]	1
Q_38	efficient way of compute dot product inside double sum in python3	C_38_1	for var in range ( number , n ) for k in range ( number , n ) s = number for t in range ( number ) s + = x [ t ] * ( r_p [ var ] [ t ] _ r_p [ k ] [ t ] ) sum_p + = cmath . exp ( _ number * s )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_2	x * ( p _ q ) = x1 * p1 _ x1 * q1 + x2 * p2 _ x2 * q2 _ .	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_3	var = ( number , number , number ) r_p = [ ( var [ number ] * var , var [ number ] * j , var [ number ] * k ) for var in range ( number ) for j in range ( number ) for k in range ( number ) ]	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_4	for var in range ( number , n ) for k in range ( number , n ) s = number for t in range ( number ) s + = r_p [ var ] [ t ] _ r_p [ k ] [ t ] sum_p + = cmath . exp ( _ number * s )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_5	for var in range ( number , n ) for k in range ( number , n ) sum_p + = cmath . exp ( _ number * ( sum ( r_p [ var ] ) _ sum ( r_p [ k ] ) ) )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_6	var = [ sum ( var ) for var in r_p ] sum_p = number n = len ( r_p ) start = time . clock ( ) for j in range ( number , n ) for k in range ( number , n ) sum_p + = cmath . exp ( _ number * ( var [ j ] _ var [ k ] ) )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_7	var = [ sum ( var ) for var in r_p ] e_denom = sum ( [ cmath . exp ( number * p ) for p in var ] ) sum_p = number n = len ( r_p ) start = time . clock ( ) for j in range ( number , n ) sum_p + = e_denom * cmath . exp ( _ number * var [ j ] ) print ( sum_p ) end = time . clock ( ) print ( end _ start )	0
Q_38	efficient way of compute dot product inside double sum in python3	C_38_8	var = e_denom * sum ( [ np . exp ( _ number * var ) for var in sums ] )	0
Q_39	solve for the position of all six root python	C_39_0	g ( x ) = ( x _ z [ number ] ) * ( x _ z [ number ] ) * . * ( x _ z [ k ] )	1
Q_39	solve for the position of all six root python	C_39_1	h ( x ) = f ( x ) / g ( x )	0
Q_39	solve for the position of all six root python	C_39_2	"h string / g _ fg "" / g ^ number"	0
Q_39	solve for the position of all six root python	C_39_3	var = x _ f ( x ) / ( f string ( x ) / g ( x ) )	0
Q_39	solve for the position of all six root python	C_39_4	"g "" ( x ) / g ( x ) = number / ( x _ z [ number ] ) + number / ( x _ z [ number ] ) + . + number / ( x _ z [ k ] )"	0
Q_39	solve for the position of all six root python	C_39_5	"g "" ( x ) / g ( x )"	0
Q_39	solve for the position of all six root python	C_39_6	number = exp ( _ eps * x ) * f ( x ) / g ( x )	0
Q_39	solve for the position of all six root python	C_39_7	import numpy as np import matplotlib . pyplot as plt def p ( x ) return number * x * * number _ number * x * * number + number * x * * number _ number * x * * number + number * x * * number _ number * x + number def d_pdx ( x ) return number * x * * number _ number * x * * number + number * x * * number _ number * x * * number + number * x _ number accuracy = number e _ number roots = [ ] for var in range ( number ) x = number . number xlast = float ( string ) x_points = np . linspace ( number . number , number . number , number ) y_points = p ( x_points ) for rt in roots y_points / = ( x_points _ rt ) y_points = np . array ( [ max ( _ number . number , min ( number . number , np . real ( y ) ) ) for y in y_points ] ) plt . plot ( x_points , y_points , x_points , number * y_points ) plt . show ( ) while np . abs ( x _ xlast ) > accuracy xlast = x corr = number e _ number for rt in roots corr + = number / ( xlast _ rt ) px = p ( xlast ) d_px = d_pdx ( xlast ) x = xlast _ px / ( d_px _ px * corr ) print ( x ) roots . append ( x )	0
Q_40	python set method attribute from within method	C_40_0	class bar ( object ) def foo ( self ) print self . foo . a self . foo . a = number foo . a = number	1
Q_40	python set method attribute from within method	C_40_1	self . foo . _dict_ [ string ] = number	0
Q_40	python set method attribute from within method	C_40_2	def foo ( self , a ) print a [ number ] a [ number ] = number foo . func_defaults = foo . func_defaults [ _ number ] + ( [ number ] , )	0
Q_40	python set method attribute from within method	C_40_3	class bar ( object ) def _init_ ( self ) self . foo = self . foo_method ( self ) class foo_method ( object ) def _init_ ( self , bar ) self . bar = bar self . a = number def _call_ ( self ) print self . a self . a = number	0
Q_40	python set method attribute from within method	C_40_4	class bar ( object ) def _init_ ( self ) self . a = number def foo ( self ) print self . a self . a = number	0
Q_40	python set method attribute from within method	C_40_5	class bar ( object ) def _init_ ( self ) self . _a = number	0
Q_40	python set method attribute from within method	C_40_6	class bar ( object ) a = number def foo ( self ) print self . a self . a = number	0
Q_40	python set method attribute from within method	C_40_7	import pyext def wrap_mod ( * args , * * kw ) def inner ( f ) return pyext . modify_function ( f , * args , * * kw ) return inner class bar ( object ) wrap_mod ( globals = { string [ number ] } ) def foo ( self ) print a [ number ] a [ number ] = number	0
Q_40	python set method attribute from within method	C_40_8	class bar ( object ) _a = number def foo ( self ) print self . _a self . _a = number	0
Q_40	python set method attribute from within method	C_40_9	import pyext def wrap_mod ( * args , * * kw ) def inner ( f ) return pyext . modify_function ( f , * args , * * kw ) return inner class bar ( object ) wrap_mod ( globals = { string [ number ] } ) def foo ( self ) print a [ number ] a [ number ] = number foo . a = foo . func_globals [ string ] b = bar ( ) b . foo ( )	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_0	var = [ string , string , string , string , string ] values = [ [ string , string , string , string , string ] , [ string , string , string , string , string ] ] c = { var list ( var ) for var , var in zip ( var , zip ( * values ) ) } c { string [ string , string ] , string [ string , string ] , string [ string , string ] , string [ string , string ] , string [ string , string ] } print ( * ( string . join ( [ item , string . join ( c . get ( item ) ) ] ) for item in sorted ( c , key = lambda var var . index ( var ) ) ) , sep = string ) id number , number name john , jane date number _ number number _ number , number _ number number _ number size number , number actions action1 , action2	1
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_1	var = [ number * var for var in range ( number ) if var number ]	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_2	var = [ ] for var in range ( number ) if var number	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_3	[ number , number , number , number , number ]	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_4	list ( zip ( [ string , string ] , [ string , string ] ) ) [ ( string , string ) , ( string , string ) ]	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_5	list ( zip ( [ [ string , string ] , [ string , string ] ] ) ) [ ( [ string , string ] , ) , ( [ string , string ] , ) ]	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_6	print ( * [ number , number , number ] ) number number number print ( number , number , number ) number number number	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_7	def func ( * args ) . return args . func ( string , string , [ ] ) ( string , string , [ ] )	0
Q_41	python build one dictionary from a list of key and a list of list of value	C_41_8	list ( map ( str , [ number , number , number ] ) ) [ string , string , string ] print ( * map ( str , [ number , number , number ] ) ) number number number	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_0	def search_student ( database = none , id = none , roll = false , email = false ) if id is none or id = = number print string return false for var in database if var . id = = id print string . format ( var . name ) if roll print string . format ( var . roll_no ) if email print ( string . format ( var . email ) ) break else return string student_database = collections . namedtuple ( string , string ) database = [ student_database ( number , string , number , string , string ) , student_database ( number , string , number , string , string ) ]	1
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_1	in [ number ] search_student ( database , number , email = true , roll = true ) student name mayukh sarkar stutent roll number student email mayukh2012 hotmail , com in [ number ] search_student ( database , number , roll = true ) student name mayukh sarkar stutent roll number in [ number ] search_student ( database , number , email = true ) student name mayukh sarkar student email mayukh2012 hotmail , com in [ number ] search_student ( database , number ) student name mayukh sarkar in [ number ] search_student ( database , number ) out [ number ] string	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_2	def search_student ( database = none , id = none , roll = false , email = false ) if id is none or id = = number print string return false get = database . get ( id ) if get is not none print string . format ( get . name ) if roll print string . format ( get . roll_no ) if email print ( string . format ( get . email ) ) else return string	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_3	var = collections . namedtuple ( string , string ) database = { number var ( number , string , number , string , string ) , number var ( number , string , number , string , string ) }	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_4	in [ number ] search_student ( database , number , email = true , roll = true ) student name mayukh sarkar student roll number student email mayukh2012 hotmail , com in [ number ] search_student ( database , number , roll = true ) student name mayukh sarkar student roll number in [ number ] search_student ( database , number , email = true ) student name mayukh sarkar student email mayukh2012 hotmail , com in [ number ] search_student ( database , number ) student name mayukh sarkar in [ number ] search_student ( database , number ) out [ number ] string	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_5	import collections def search_student ( database = none , id = none , * * kwargs ) if id is none or id = = number print string return false get = database . get ( id ) if get is not none print string . format ( get . name ) for var in kwargs print ( string . format ( var , getattr ( get , var ) ) ) else return string student_database = collections . namedtuple ( string , string ) database = { number student_database ( number , string , number , string , string ) , number student_database ( number , string , number , string , string ) } search_student ( database , number , roll_no = true , email = true )	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_6	try print ( string . format ( k , getattr ( get , k ) ) ) except attribute_error print ( string )	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_7	if get is not none print string . format ( get . name ) for var in kwargs if not hasattr ( get , var ) continue print ( string . format ( var , getattr ( get , var ) ) )	0
Q_42	how can i pass the optional parameter of a namedtuple in a function	C_42_8	if get is not none print string . format ( get . name ) for var in kwargs val = getattr ( get , var , false ) if val print ( string . format ( var , val ) ) else .	0
Q_43	column filter in py_spark	C_43_0	from pyspark . sql . functions import expr , from_unixtime , lit , unix_timestamp from pyspark . sql . types import timestamp_type parsed_df = df . select ( ( from_unixtime ( unix_timestamp (	1
Q_43	column filter in py_spark	C_43_1	from pyspark . sql . functions import current_timestamp , expr	0
Q_43	column filter in py_spark	C_43_2	from datetime import datetime , timedelta from pyspark . sql . types import boolean_type , timestamp_type from pyspark . sql . functions import udf , col def in_last_5_minutes ( now ) def _in_last_5_minutes ( then ) then_parsed = datetime . strptime ( then , string ) return then_parsed > now _ timedelta ( minutes = number ) return udf ( _in_last_5_minutes , boolean_type ( ) )	0
Q_43	column filter in py_spark	C_43_3	var = sql_context . create_data_frame ( [ ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) , ( number , string ) ] , ( string , string ) ) now = datetime ( number , number , number , number , number ) var . where ( in_last_5_minutes ( now ) ( col ( string ) ) ) . show ( )	0
Q_43	column filter in py_spark	C_43_4	+ _ + _ + id datetime + _ + _ + number number _ jul _ number number . number . number . number number _ jul _ number number . number . number . number number _ jul _ number number . number . number . + _ + _ +	0
Q_43	column filter in py_spark	C_43_5	def parse_dt ( ) def _parse ( dt ) return datetime . strptime ( dt , string ) return udf ( _parse , timestamp_type ( ) ) df_with_timestamp = df . with_column ( string , parse_dt ( ) ( df . datetime ) ) def in_last_5_minutes ( now ) def _in_last_5_minutes ( then ) return then > now _ timedelta ( minutes = number ) return udf ( _in_last_5_minutes , boolean_type ( ) ) df_with_timestamp . where ( in_last_5_minutes ( now ) ( col ( string ) ) )	0
Q_43	column filter in py_spark	C_43_6	+ _ + _ + _ + id datetime timestamp + _ + _ + _ + number number _ jul _ number number . number . number . number _ number number _ number number number . number number _ jul _ number number . number . number . number _ number number _ number number number . number number _ jul _ number number . number . number . number _ number number _ number number number . + _ + _ + _ +	0
Q_43	column filter in py_spark	C_43_7	var = string string dd _ mmm _ yy hh . mm . ss . ssssss a string string . format ( time . mktime ( ( now _ timedelta ( minutes = number ) ) . timetuple ( ) ) ) sql_context . sql ( var )	0
Q_43	column filter in py_spark	C_43_8	from pyspark . sql . functions import lit df_with_timestamp . where ( df_with_timestamp . timestamp > lit ( now _ timedelta ( minutes = number ) ) )	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_0	class base ( object ) def get_message ( self ) try return self . get_message_impl ( ) except exception as detail print ( string , detail ) return none def get_message_impl ( self ) raise exception ( string )	1
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_1	class foo ( base ) def get_message_impl ( self ) return string	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_2	class bar ( base ) def get_message_impl ( self ) raise exception ( string )	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_3	var = foo ( ) b = bar ( ) f_msg = var . get_message ( ) b_msg = b . get_message ( ) print ( string , f_msg ) print ( string , b_msg )	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_4	error bar . get_message_impl always fails f_msg hello world b_msg none	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_5	class base ( object ) class protected ( object ) def _init_ ( self , target ) self . target = target def get_message ( self ) try return self . target . get_message ( ) except exception as detail print ( string , detail ) return none def _init_ ( self ) self . protected = self . protected ( self ) def get_message ( self ) raise exception ( string )	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_6	class foo ( base ) def get_message ( self ) return string	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_7	class bar ( base ) def get_message ( self ) raise exception ( string )	0
Q_44	how can i wrap an empty function to be implement by a child class in a try_except block	C_44_8	var = foo ( ) b = bar ( ) f_msg = var . protected . get_message ( )	0
Q_45	argsort for a multidimensional ndarray	C_45_0	a [ np . arange ( np . shape ( a ) [ number ] ) [ , np . newaxis ] , np . argsort ( a ) ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	1
Q_45	argsort for a multidimensional ndarray	C_45_1	in [ number ] i = np . argsort ( a , axis = number ) in [ number ] i out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_45	argsort for a multidimensional ndarray	C_45_2	in [ number ] a [ number , i [ number , ] ] out [ number ] array ( [ number , number , number ] ) in [ number ] a [ number , i [ number , ] ] out [ number ] array ( [ number , number , number ] )	0
Q_45	argsort for a multidimensional ndarray	C_45_3	in [ number ] a [ [ [ number ] , [ number ] ] , i ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_45	argsort for a multidimensional ndarray	C_45_4	in [ number ] j = np . array ( [ [ number , number , number ] , [ number , number , number ] ] ) in [ number ] j out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] ) in [ number ] a [ j , i ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_45	argsort for a multidimensional ndarray	C_45_5	np . array ( [ [ number ] , [ number ] ] )	0
Q_45	argsort for a multidimensional ndarray	C_45_6	[ a [ number , number ] a [ number , number ] a [ number , number ] a [ number , number ] a [ number , number ] a [ number , number ] ]	0
Q_45	argsort for a multidimensional ndarray	C_45_7	def foo ( a ) i = np . argsort ( a , axis = number ) return ( np . arange ( a . shape [ number ] ) [ , none ] , i ) in [ number ] foo ( a ) out [ number ] ( array ( [ [ number ] , [ number ] ] ) , array ( [ [ number , number , number ] , [ number , number , number ] ] , dtype = int32 ) ) in [ number ] a [ foo ( a ) ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_0	self . texxt1 = self . text1 . to_plain_text ( )	1
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_1	def action ( self ) self . tex = self . texxt1 self . ij = self . texxt2 self . l = self . tex + self . ij qt_gui . q_label ( self . l , self )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_2	var = int ( self . texxt1 ) + int ( self . texxt2 )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_3	qt_gui . q_label ( self . l , self )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_4	self . result_lbl . set_text ( string . format ( total ) )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_5	self . texxt1 = self . text1 . to_plain_text ( )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_6	def action ( self ) val1 = int ( self . text1 . to_plain_text ( ) ) val2 = int ( self . text2 . to_plain_text ( ) ) self . result_lbl . set_text ( _from_utf8 ( string . format ( val1 + val2 ) ) )	0
Q_46	how to convert q_textedit be input to int in py_qt4 python	C_46_7	self . result_lbl = qt_gui . q_label ( form ) self . result_lbl . set_geometry ( qt_core . q_rect ( number , number , number , number ) ) self . result_lbl . set_object_name ( _from_utf8 ( string ) ) self . result_lbl . set_text ( _from_utf8 ( string ) )	0
Q_47	how to print list within a tuple in straight line	C_47_0	var = [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] print ( string . join ( [ string . format ( var ) for var in range ( number , len ( var [ number ] ) + number ) ] ) ) for w1 in var print ( string . join ( [ string . format ( var ) for var in w1 ] ) )	1
Q_47	how to print list within a tuple in straight line	C_47_1	row1 row2 row3 row4 row5 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_47	how to print list within a tuple in straight line	C_47_2	print ( string . join ( [ string . format ( var ) for var in range ( number , len ( numbers [ number ] ) + number ) ] ) ) for w1 in numbers print ( string . join ( [ string . format ( var ) for var in w1 ] ) )	0
Q_47	how to print list within a tuple in straight line	C_47_3	row1 row2 row3 row4 row5 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_47	how to print list within a tuple in straight line	C_47_4	print ( string . join ( [ string . format ( var ) for var in range ( number , len ( numbers ) + number ) ] ) ) for w1 in zip ( * numbers ) print ( string . join ( [ string . format ( var ) for var in w1 ] ) )	0
Q_47	how to print list within a tuple in straight line	C_47_5	row1 row2 row3 row4 row5 row6 row7 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_47	how to print list within a tuple in straight line	C_47_6	var = [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] mx = max ( len ( str ( i ) ) for var in var for i in var ) + number print ( string . join ( [ string . format ( i , mx = mx _ number ) for i in range ( number , len ( var ) + number ) ] ) ) for w1 in zip ( * var ) print ( string . join ( [ string . format ( i , mx = mx ) for i in w1 ] ) )	0
Q_47	how to print list within a tuple in straight line	C_47_7	row1 row2 row3 row4 row5 row6 row7 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_48	global variable do not change	C_48_0	var = { string move ( steps , operator . add , string ) , string move ( steps , operator . sub , string ) , string move ( steps , operator . add , string ) , string move ( steps , operator . sub , string ) }	1
Q_48	global variable do not change	C_48_1	{ string none , string none , string none , string none }	0
Q_48	global variable do not change	C_48_2	def move ( steps , op_func , z ) if z = = string global x x = op_func ( x , int ( steps ) ) print ( string . format ( x ) ) else global y y = op_func ( y , int ( steps ) ) print ( string . format ( y ) )	0
Q_48	global variable do not change	C_48_3	var = number x = number steps = number directions = { string move ( steps , operator . add , string ) , string move ( steps , operator . sub , string ) , . string move ( steps , operator . add , string ) , . string move ( steps , operator . sub , string ) } . x is now number x is now number var is now number var is now number	0
Q_48	global variable do not change	C_48_4	var = partial ( move , op_func = operator . add , z = string ) var ( number ) x is now number	0
Q_48	global variable do not change	C_48_5	var = { string partial ( move , op_func = operator . add , z = string ) , string partial ( move , op_func = operator . sub , z = string ) , string partial ( move , op_func = operator . add , z = string ) , string partial ( move , op_func = operator . sub , z = string ) }	0
Q_48	global variable do not change	C_48_6	partial ( f ( a , b , c ) , b , c ) _ > g ( a )	0
Q_48	global variable do not change	C_48_7	directions [ direction . replace ( string , string ) ]	0
Q_48	global variable do not change	C_48_8	var = directions [ direction . replace ( string , string ) ] var ( steps )	0
Q_49	linear regression analysis with string categorical feature	C_49_0	idx color number blue number green number green number red	1
Q_49	linear regression analysis with string categorical feature	C_49_1	idx blue green red number number number number number number number number number number number number number number number number	0
Q_49	linear regression analysis with string categorical feature	C_49_2	import pandas as pd data = pd . data_frame ( { string [ string , string , string , string ] } ) print ( pd . get_dummies ( data ) )	0
Q_49	linear regression analysis with string categorical feature	C_49_3	color_blue color_green color_red number number number number number number number number number number number number number number number number	0
Q_49	linear regression analysis with string categorical feature	C_49_4	var = pd . data_frame ( { string [ string , string , string , string ] } ) var [ string ] = var [ string ] . astype ( string ) var [ string ] = var [ string ] . cat . reorder_categories ( [ string , string , string ] , ordered = true ) var [ string ] = var [ string ] . cat . codes print ( var [ string ] )	0
Q_49	linear regression analysis with string categorical feature	C_49_5	number number number number number number number number name q , dtype int8	0
Q_49	linear regression analysis with string categorical feature	C_49_6	var = pd . data_frame ( { string [ string , string , string , string , string , string ] , string [ number , number , number , number , number , number ] , } ) mean_price = var . groupby ( string ) . mean ( ) data = pd . data_frame ( { string [ string , string , string , string , string , string ] } ) print ( data . merge ( mean_price , on = string , how = string ) )	0
Q_49	linear regression analysis with string categorical feature	C_49_7	city price number a number number b number number c number number a number number b number number a number	0
Q_50	python help read data from text file from the bottom	C_50_0	var = { } for var in f name , value = var . split ( string ) name = name . strip ( ) value = int ( value ) var . setdefault ( name , [ ] ) . append ( value )	1
Q_50	python help read data from text file from the bottom	C_50_1	{ string [ number , number ] , string [ number , number , number ] , string [ number , number ] , string [ number , number , number , number , number ] , string [ number ] }	0
Q_50	python help read data from text file from the bottom	C_50_2	var = data [ string ] [ _ number ] avg = sum ( var ) / len ( var ) avg number . number	0
Q_50	python help read data from text file from the bottom	C_50_3	var = { } for var , var in data . items ( ) last_scores = var [ _ number ] var [ var ] = sum ( last_scores ) / len ( last_scores )	0
Q_50	python help read data from text file from the bottom	C_50_4	{ string number . number , string number . number , string number . number , string number . number , string number . number }	0
Q_50	python help read data from text file from the bottom	C_50_5	for var , var in avg . items ( ) print ( var , var )	0
Q_50	python help read data from text file from the bottom	C_50_6	tanzil number . number chris number . number sarah number . number john number . number tom number . number	0
Q_50	python help read data from text file from the bottom	C_50_7	from operator import itemgetter for var , var in sorted ( avg . items ( ) , key = itemgetter ( number ) , reverse = true ) print ( var , var )	0
Q_50	python help read data from text file from the bottom	C_50_8	chris number . number tanzil number . number sarah number . number john number . number tom number . number	0
Q_50	python help read data from text file from the bottom	C_50_9	"var = input ( string ) . strip ( ) datafile = string with open ( datafile , string ) as f data = { } for var in f name , value = var . split ( string ) name = name . strip ( ) value = int ( value ) data . setdefault ( name , [ ] ) . append ( value ) avg = { } for name , scores in data . items ( ) last_scores = scores [ _ number ] avg [ name ] = sum ( last_scores ) / len ( last_scores ) print ( string , var , string s average score is "" , avg [ var ] )"	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_0	library ( dplyr ) df < _ data . frame ( input = c ( number , number , number , number , number , number , number ) , group = c ( number , number , number , number , number , number , number ) ) df < _ tbl_df ( df ) df	1
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_1	input group ( dbl ) ( dbl ) number number number number number number number number number number number number number number number number number number number number number	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_2	aux < _ df > group_by ( group ) > summarise ( n = n ( ) ) > arrange ( _ n ) aux	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_3	group n ( dbl ) ( int ) number number number number number number number number number number number number	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_4	ymax < _ df > filter ( group = = aux group [ number ] ) y2 < _ df > filter ( group = = aux group [ number ] ) y3 < _ df > filter ( group = = aux group [ number ] ) ymin < _ df > filter ( group = = aux group [ number ] )	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_5	ymax input group ( dbl ) ( dbl ) number number number number number number number number number y2 input group ( dbl ) ( dbl ) number number number number number number y3 input group ( dbl ) ( dbl ) number number number ymin input group ( dbl ) ( dbl ) number number number	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_6	ylist < _ lapply ( number nrow ( aux ) , function ( x ) { filter ( df , group = = aux group [ x ] ) } )	0
Q_51	sorting of dataframe base on condition and return all the group by assign to random vector dynamically	C_51_7	[ [ number ] ] source local data frame [ number x number ] input group ( dbl ) ( dbl ) number number number number number number number number number [ [ number ] ] source local data frame [ number x number ] input group ( dbl ) ( dbl ) number number number number number number [ [ number ] ] source local data frame [ number x number ] input group ( dbl ) ( dbl ) number number number [ [ number ] ] source local data frame [ number x number ] input group ( dbl ) ( dbl ) number number number	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_0	var = [ number , number , number ] b = [ number , number , number ] print merge ( var , b ) [ number , number , number , number , number , number ] var [ ] b [ ]	1
Q_52	how do an anonymous list work in a python list comprehension	C_52_1	max ( nums1 , nums2 ) . pop ( number )	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_2	var = [ number , number , number ] b = [ number , number , number ] merge1 ( var , b ) step1 nums1 [ number , number , number ] nums2 [ number , number , number ] the max list is [ number , number , number ] so it will pop number step2 nums1 [ number , number , number ] nums2 [ number , number ] the max list is [ number , number , number ] so it will pop number step3 nums1 [ number , number ] nums2 [ number , number ] the max list is [ number , number ] so it will pop number step4 nums1 [ number ] nums2 [ number , number ] the max list is [ number ] so it will pop number step5 nums1 [ ] nums2 [ number , number ] the max list is [ number , number ] so it will pop number step6 nums1 [ ] nums2 [ number ] the max list is [ number ] so it will pop number [ number , number , number , number , number , number ]	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_3	def merge1 ( nums1 , nums2 ) list_ = [ ] count = number for var in nums1 + nums2 print string count print string , nums1 print string , nums2 print string , max ( nums1 , nums2 ) print string , max ( nums1 , nums2 ) [ number ] list_ . append ( max ( nums1 , nums2 ) . pop ( number ) ) count + = number return list_	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_4	max ( nums1 , nums2 ) . pop ( number )	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_5	ans + = nums1 [ number ] nums1 = nums1 [ number ]	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_6	ans + = nums2 [ number ] nums2 = nums1 [ number ]	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_7	def merge1 ( nums1 , nums2 ) return [ max ( nums1 , nums2 ) . pop ( number ) for var in range ( len ( nums1 ) + len ( nums2 ) ]	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_8	var = [ number , number , number ] b = [ number , number , number ] print merge1 ( var , b ) [ number , number , number , number , number , number ]	0
Q_52	how do an anonymous list work in a python list comprehension	C_52_9	for var in range ( len ( nums1 ) + len ( nums2 )	0
Q_53	possible to add numpy array to python set	C_53_0	import numpy as np np . random . seed ( number ) list_of_np_1_d = np . random . randint ( number , number , size = ( number , number ) ) np_2_d = np . random . randint ( number , number , size = ( number , number ) )	1
Q_53	possible to add numpy array to python set	C_53_1	time fill_set = set ( ) for var in list_of_np_1_d vecs = var + np_2_d for v in vecs tup = tuple ( v ) fill_set . add ( tup ) res1 = np . array ( list ( fill_set ) )	0
Q_53	possible to add numpy array to python set	C_53_2	cpu times user number ms , sys number ms , total number ms wall time number ms	0
Q_53	possible to add numpy array to python set	C_53_3	time r = list_of_np_1_d [ , none , ] + np_2_d [ none , , ] stype = string ( r . itemsize * np_2_d . shape [ number ] ) fill_set2 = set ( r . ravel ( ) . view ( stype ) . tolist ( ) ) res2 = np . zeros ( len ( fill_set2 ) , dtype = stype ) res2 [ ] = list ( fill_set2 ) res2 = res2 . view ( r . dtype ) . reshape ( _ number , np_2_d . shape [ number ] )	0
Q_53	possible to add numpy array to python set	C_53_4	cpu times user number ms , sys number ms , total number ms wall time number . number ms	0
Q_53	possible to add numpy array to python set	C_53_5	np . all ( res1 [ np . lexsort ( res1 . t ) , ] = = res2 [ np . lexsort ( res2 . t ) , ] )	0
Q_53	possible to add numpy array to python set	C_53_6	time r = list_of_np_1_d [ , none , ] + np_2_d [ none , , ] r = r . reshape ( _ number , r . shape [ _ number ] ) r = r [ np . lexsort ( r . t ) ] idx = np . where ( np . all ( np . diff ( r , axis = number ) = = number , axis = number ) ) [ number ] + number res3 = np . delete ( r , idx , axis = number )	0
Q_53	possible to add numpy array to python set	C_53_7	cpu times user number ms , sys number ms , total number ms wall time number . number ms	0
Q_53	possible to add numpy array to python set	C_53_8	np . all ( res1 [ np . lexsort ( res1 . t ) , ] = = res3 )	0
Q_54	how to create consistent lambda function use a loop	C_54_0	import sys def foo ( ) result = [ ] for var in range ( number ) def bar ( ) return var result . append ( bar ) return result	1
Q_54	how to create consistent lambda function use a loop	C_54_1	_ string local variables { i number , result [ bar _ function _ number , bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_2	_ string local variables { } _ string local variables { i number , result [ bar _ function _ number , bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_3	_ string local variables { } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_4	_ string local variables { } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_5	def foo ( ) result = [ ] for var in range ( number ) def bar ( j = var ) return j result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_6	_ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_7	_ string local variables { j number } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_8	def foo ( ) result = [ ] for var in range ( number ) def bar ( var = var ) return var result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_9	_ string local variables { i number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_10	_ string local variables { i number } _ string local variables { i number , result [ bar _ function _ number ] , bar bar _ function _ number } _ global variables { foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_11	def make_bar ( j ) def bar ( ) return j return bar def foo ( ) result = [ ] for var in range ( number ) bar = make_bar ( var ) result . append ( bar ) return result	0
Q_54	how to create consistent lambda function use a loop	C_54_12	_ string local variables { } _ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { make_bar make_bar _ function , foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_13	_ string local variables { } _ string local variables { j number } _ string local variables { i number , result [ ] , bar bar _ function _ number } _ global variables { make_bar make_bar _ function , foo foo _ function , sys sys _ module , etc . }	0
Q_54	how to create consistent lambda function use a loop	C_54_14	var = [ ] for var in range ( number ) def make_f ( j ) def f ( x ) return j * x var . append ( make_f ( var ) )	0
Q_54	how to create consistent lambda function use a loop	C_54_15	var = [ ] for var in range ( number ) var . append ( ( lambda j lambda x j * x ) ( var ) )	0
Q_54	how to create consistent lambda function use a loop	C_54_16	var = [ ( lambda j lambda x j * x ) ( var ) for var in range ( number ) ]	0
Q_54	how to create consistent lambda function use a loop	C_54_17	var = [ lambda x , var = var var * x for var in range ( number ) ]	0
Q_55	inverse match with python	C_55_0	var = [ var for var in list1 if any ( var in var for var in list2 ) ]	1
Q_55	inverse match with python	C_55_1	[ var for var in list1 if any ( var in var for var in list2 ) ]	0
Q_55	inverse match with python	C_55_2	[ var for var in list2 if any ( var in var for var in list1 ) ]	0
Q_55	inverse match with python	C_55_3	[ var for var in list1 if any ( var in var for var in list2 ) ]	0
Q_55	inverse match with python	C_55_4	[ var for var in list1 for var in list2 if var in var ]	0
Q_55	inverse match with python	C_55_5	var = set ( list1 ) _ set ( matches )	0
Q_55	inverse match with python	C_55_6	var = [ var for var in list1 if not any ( var in var for var in list2 ) ]	0
Q_55	inverse match with python	C_55_7	var = [ var for var in list2 for var in list1 if var in var ]	0
Q_55	inverse match with python	C_55_8	var = [ var for var in list2 if not any ( var in var for var in list1 ) ]	0
Q_55	inverse match with python	C_55_9	var = set ( list2 ) _ set ( matches2 )	0
Q_56	create a dynamic array in python	C_56_0	def two_dim ( inval , width = number ) . out = [ ] . for var in range ( number , len ( inval ) _ number , width ) . out . append ( list ( inval [ var var + width ] ) ) . return out . print ( two_dim ( string ) ) [ [ string , string , string , string , string ] , [ string , string , string , string , string ] , [ string , string , string , string , string ] , [ string , string , string , string , string ] , [ string , string , string , string , string ] ]	1
Q_56	create a dynamic array in python	C_56_1	var = two_dim ( string ) for var in var . print string . join ( var ) . m a n n y s a t t y n a s t y s i l l y f u l l y	0
Q_56	create a dynamic array in python	C_56_2	def is_square ( l ) return math . floor ( math . sqrt ( l ) ) * * number = = l def two_dim_square ( inval ) if not is_square ( len ( inval ) ) raise exception ( string ) width = math . sqrt ( len ( inval ) )	0
Q_56	create a dynamic array in python	C_56_3	def two_dim ( inval , width = number ) out = [ ] for var in range ( number , len ( inval ) _ number , width ) out . append ( list ( inval [ var var + width ] ) ) return out def print_array ( label , inval , joiner = string ) print label for sub in inval print joiner . join ( sub ) print print_array ( string , two_dim ( string , number ) ) print_array ( string , two_dim ( string , number ) ) print_array ( string , two_dim ( string , number ) ) print_array ( string , two_dim ( string , number ) )	0
Q_56	create a dynamic array in python	C_56_4	number by x m a n n y s a t t y n a s t y s i l l y f u l l number by x m a n n y s a t t y n a s t y s i l l y f u l l number by x m a n n y s a t t y n a s t y s i l l y f u l l y number by x m a n n y s a t t y n a s t y s i l l y f u l l	0
Q_56	create a dynamic array in python	C_56_5	def two_dim ( inval , width = number , fill = string ) out = [ ]	0
Q_56	create a dynamic array in python	C_56_6	print_array ( string , two_dim ( string , number , string ) )	0
Q_56	create a dynamic array in python	C_56_7	number by x m a n n y s a t t y n a s t y s i l l y f u l l y * *	0
Q_57	issue with fabric setting	C_57_0	_ h vagrant number . number . number . number number	1
Q_57	issue with fabric setting	C_57_1	env . user = string env . host = string env . port = string	0
Q_57	issue with fabric setting	C_57_2	"from fabric . api import run , sudo , task , env from fabric . context_managers import settings as _settings def settings ( * args , * * kwargs ) string string s setting ( ) is broken checks to see if there is a string in the host_string and if there is , it will then append it to the host_string since that will be how it changes users . otherwise if the host_string is not being used , it will use the default string functionality string string user string string host_string string { } { } string user string string regular run string whoami string regular sudo string whoami string sudo with user arg string whoami string www _ data string www _ data string run inside settings string whoami "" )"	0
Q_57	issue with fabric setting	C_57_3	with settings ( host_string = string + env . host_string . split ( string ) [ number ] )	0
Q_57	issue with fabric setting	C_57_4	fab . _ user = vagrant _ host = number . number . number . number _ port = number	0
Q_57	issue with fabric setting	C_57_5	fab _ f test . py _ user = vagrant _ host = number . number . number . number _ port = number test	0
Q_57	issue with fabric setting	C_57_6	fab _ f test . py _ h vagrant number . number . number . number number test	0
Q_57	issue with fabric setting	C_57_7	from fabric . api import run , sudo , task , env from fabric . context_managers import settings task def test ( ) print ( string ) run ( string ) print ( string ) sudo ( string ) print ( string ) sudo ( string , user = string ) with settings ( host_string = string + env . host_string . split ( string ) [ number ] ) print ( string ) run ( string )	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_0	import numpy as np from scipy import interpolate x = [ _ number , _ number , number ] y = [ _ number , number , _ number ] f = interpolate . interp1d ( x , y ) h = interpolate . approximate_taylor_polynomial ( f , _ number , number , number ) h poly1d ( [ _ number . number , number . number , _ number . number ] ) h . deriv ( ) poly1d ( [ _ number . number , number . number ] )	1
Q_58	differentiate a polynomial interpolate set of data point	C_58_1	var = np . poly1d ( [ number , number , number ] ) var ( [ _ number , _ number , _ number , _ number , _ number , number , number , number , number , number , number ] ) array ( [ number , number , number , number , number , number , number , number , number , number , number ] ) x = [ _ number , _ number , _ number , _ number , _ number , number , number , number , number , number , number ] y = [ number , number , number , number , number , number , number , number , number , number , number ] var = interpolate . interp1d ( x , y ) h = interpolate . approximate_taylor_polynomial ( var , number , number , number ) h ( x ) [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] var ( x ) [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ]	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_2	var = interpolate . approximate_taylor_polynomial ( f , number , number , number ) [ number . number , number . number , number . number , number . number number , number . number number , number . , number . number number , number . number number , number . number , number . number , number . ] ) var = interpolate . approximate_taylor_polynomial ( f , number , number , number ) [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] )	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_3	"f "" = lim d _ > number [ ( f ( x + d ) _ f ( x ) ) / d ]"	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_4	"f "" = f ( x + d ) _ f ( x ) / d ( there are other approx of the derivative as well )"	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_5	number th order h f ( a ) number st order h f ( a ) + f string ( a ) ( x _ a ) + f string ( a ) / number * ( x _ a ) ^ number . .	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_6	number st deriv number nd deriv h f ( a ) + [ ( f ( a + d ) _ f ( a ) ) / d ] ( x _ a ) + [ ( f ( a + d ) _ number f ( a ) + f ( a _ d ) ) / d ^ number ) ] * ( x _ a ) ^ number .	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_7	h number th + number st + number nd + number rd + . + nth + p	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_8	np . poly1d ( [ number , number , number ] )	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_9	f ( x ) = x * * number + number	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_10	number . number + number . number x _ number . number x * * number	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_11	f ( x ) = x * * number + number	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_12	[ _ number , _ number , . number , number ]	0
Q_58	differentiate a polynomial interpolate set of data point	C_58_13	var = number . number e _ number number + number . number e _ number x _ number . number e _ number number x ^ number _ number . number e _ number x ^ number + number . number e _ number number x ^ number + number . number number e _ number x ^ number + . till number th order would be reached	0
Q_59	python json iteration into a post request	C_59_0	for var in data for text , time in data . iteritems ( )	1
Q_59	python json iteration into a post request	C_59_1	for var in data for text in data [ var ] print text [ string ]	0
Q_59	python json iteration into a post request	C_59_2	var = [ { string text , string string , string string } ] r = requests . post ( string , data = var , headers = headers )	0
Q_59	python json iteration into a post request	C_59_3	var = { string text , string string , string string }	0
Q_59	python json iteration into a post request	C_59_4	import json body = { string text , string string , string string } r = requests . post ( string , data = json . dumps ( body ) , headers = headers )	0
Q_59	python json iteration into a post request	C_59_5	var = { string text , string string , string string } r = requests . post ( string , json = var , headers = headers )	0
Q_59	python json iteration into a post request	C_59_6	{ string [ { string string , string string } , string string , string string } ] , string [ string string , string string } , ] }	0
Q_59	python json iteration into a post request	C_59_7	import json import requests with open ( string ) as data_file data = json . load ( data_file ) headers = { string string } for var in data . values ( ) for dict_element in var text = dict_element [ string ] print text body = { string text , string string , string string } r = requests . post ( string , json = body , headers = headers ) print ( r . content )	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_0	in [ number ] def func ( x ) . return x * * number .	1
Q_60	python make a list that include function but have as_yet undefined argument	C_60_1	in [ number ] [ func ( x * i ) , func ( x * i * * number ) ] . name_error name string is not defined	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_2	in [ number ] [ lambda x , i func ( x * i ) , lambda x , i func ( x * i * * number ) ] out [ number ] [ < function _main_ . < lambda , < function _main_ . < lambda ] in [ number ] flist = _	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_3	in [ number ] x = np . arange ( number ) in [ number ] i = number in [ number ] [ var ( x , i ) for var in flist ] out [ number ] [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_4	in [ number ] [ [ var ( x , i ) for var in flist ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_5	in [ number ] np . array ( _ ) out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] ] ] )	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_6	in [ number ] def func1 ( x , i , var = number ) . return func ( x * i * * var ) in [ number ] [ [ func1 ( x , i , var ) for var in [ number , number ] ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_7	in [ number ] from functools import partial in [ number ] flist = [ partial ( func1 , p = number ) , partial ( func1 , p = number ) ] in [ number ] [ [ var ( x , i ) for var in flist ] for i in range ( number ) ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_8	in [ number ] def func1 ( x , i = number , p = number ) return func ( x * i * * p ) in [ number ] flist = [ partial ( func1 , p = number ) , partial ( func1 , p = number ) ] in [ number ] fflist = [ [ partial ( var , i = i ) for var in flist ] for i in range ( number ) ] in [ number ] fflist out [ number ] [ [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] , [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] , [ functools . partial ( < function func1 at number > , i = number , p = number ) , functools . partial ( < function func1 at number > , i = number , p = number ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_9	in [ number ] [ [ var ( x ) for var in ff ] for ff in fflist ] out [ number ] [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_10	var = [ [ partial ( func1 , var = var , var = var ) for var in [ number , number ] ] for var in range ( number ) ]	0
Q_60	python make a list that include function but have as_yet undefined argument	C_60_11	in [ number ] z = [ [ partial ( var , x ) for var in ff ] for ff in fflist ] in [ number ] z out [ number ] [ [ functools . partial ( < function func1 at number > , array ( [ number , number , number ] ) , i = number , p = number ) , functools . partial ( < function func1 at number > , array ( [ number , number , number ] ) , i = number , p = number ) ] , . ] ] in [ number ] [ [ var ( ) for var in ff ] for ff in z ]	0
Q_61	how can i relatively scale something between two point	C_61_0	/ / an array of keys . the ? represents the applicable number value var keys = [ { time number , / / the state of an object at time number pos { x ? , y ? } , / / position scale ? , rotation ? , colour [ ? , ? , ? ] , / / rgb colour , just for the hell of it / / and whatever else you may want to animate } , { time number , / / the state of the object at time number pos { x ? , y ? } , scale ? , rotation ? , colour [ ? , ? , ? ] , / / and whatever else you may want to animate } ]	1
Q_61	how can i relatively scale something between two point	C_61_1	var current_time = number var time_dif = current_time _ keys [ number ] . time / / difference from start time to current / / to get the normalised time divid by the differance var norm_time = time_dif / ( keys [ number ] . time _ keys [ number ] . time ) / / divide by the differance in time between keys	0
Q_61	how can i relatively scale something between two point	C_61_2	var scale_dif = keys [ number ] . scale _ keys [ number ] . scale / / get diff in scale var scale_change = scale_dif * norm_time / / multiply by the normalised time var current_scale = keys [ number ] . scale + scale_change / / add to the starting scale	0
Q_61	how can i relatively scale something between two point	C_61_3	function tween_keys ( time , key1 , key2 ) { var nt = ( time _ key1 . time ) / ( key2 . time _ key1 . time ) / / get normalised time / / because you can not divide by zero we need a little check . javascript return infinity if we div by zero but we want the value number nt = nt < infinity ? nt number / / zero if there was a divide by zero var ck = { } / / ck for current key . the key represents the state at time ck . scale = key1 . scale + ( key2 . scale _ key1 . scale ) * nt ck . rotation = key1 . rotation + ( key2 . rotation _ key1 . rotation ) * nt ck . pos . x = key1 . pos . x + ( key2 . pos . x _ key1 . pos . x ) * nt ck . pos . y = key1 . pos . y + ( key2 . pos . y _ key1 . pos . y ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt ck . colour [ number ] = key1 . colour [ number ] + ( key2 . colour [ number ] _ key1 . colour [ number ] ) * nt return ck / / return the newly create state }	0
Q_61	how can i relatively scale something between two point	C_61_4	var p1 = { x ? , y ? } / / ? represent some number value var p2 = { x ? , y ? } / / ? represent some number value	0
Q_61	how can i relatively scale something between two point	C_61_5	var c = { x ? , y ? } / / ? represent some number value	0
Q_61	how can i relatively scale something between two point	C_61_6	var dist = math . sqrt ( math . pow ( p2 . x _ p1 . x , number ) + math . pow ( p2 . y _ p1 . y , number ) ) / / for the twisted world of ie users and var dist = math . hypot ( p2 . x _ p1 . x , p2 . y _ p1 . y ) / / for all good browsers	0
Q_61	how can i relatively scale something between two point	C_61_7	var norm_dist = math . hypot ( c . x _ p1 . x , c . y _ p1 . y ) / math . hypot ( p2 . x _ p1 . x , p2 . y _ p1 . y ) / / because you can not divide by zero we need a little check . javascript returns infinity if we div by zero but we want the value number norm_dist = norm_dist < infinity ? norm_dist number / / zero if there was a divide by zero	0
Q_61	how can i relatively scale something between two point	C_61_8	var current_scale = ( keys [ number ] . scale _ keys [ number ] . scale ) * norm_dist + keys [ number ] . scale	0
Q_61	how can i relatively scale something between two point	C_61_9	/ / get the unit distance on the line p1 , p2 of point c representing / / the distance along the line that is closest to c function unit_dist_of_point ( p1 , p2 , c ) { var v1 = { } / / working vectors var v2 = { } v1 . x = p2 . x _ p1 . x / / vector between p1 , p2 v1 . y = p2 . y _ p1 . y v2 . x = c . x _ p1 . x / / vector to c from p1 v2 . y = c . y _ p1 . y / / a little math magic . divide the dot product of the vectors v2 , v1 / / by the square of line length return ( v2 . x * v1 . x + v2 . y * v1 . y ) / ( v1 . y * v1 . y + v1 . x * v1 . x ) }	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_0	in [ number ] x = np . arange ( number )	1
Q_62	discriminate basic and advance slicing of numpy array	C_62_1	in [ number ] x [ ( number , number , number ) , ] out [ number ] array ( [ number , number , number ] ) in [ number ] x [ [ number , number , number ] ] out [ number ] array ( [ number , number , number ] )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_2	in [ number ] x [ ( number , number , number ) ] . index_error too many indices for array	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_3	in [ number ] x [ number , number , number ] index_error too many indices for array	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_4	x . _getitem_ ( ( number , number , number ) )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_5	x [ ( number , number , number ) ]	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_6	in [ number ] ( ( number , number , number ) ) out [ number ] ( number , number , number ) in [ number ] ( ( number , number , number ) , ) out [ number ] ( ( number , number , number ) , )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_7	x [ [ number , number , slice ( none ) ] ]	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_8	in [ number ] x = np . arange ( number ) . reshape ( number , number , number )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_9	in [ number ] x [ ( number , number , number ) ] out [ number ] number in [ number ] x [ number , number , number ] out [ number ] number	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_10	in [ number ] x [ number , number , ] out [ number ] array ( [ number , number , number , number ] )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_11	in [ number ] x [ ( number , number , ) ] . syntax_error invalid syntax	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_12	in [ number ] x [ ( number , number , slice ( none ) ) ] out [ number ] array ( [ number , number , number , number ] ) in [ number ] x [ [ number , number , slice ( none ) ] ] out [ number ] array ( [ number , number , number , number ] )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_13	in [ number ] x [ np . r_ [ number , number , number number ] ] out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_62	discriminate basic and advance slicing of numpy array	C_62_14	in [ number ] np . r_ [ number , number , number number ] out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_63	python get top n key with value as dictionary	C_63_0	dict ( sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] , reverse = true ) [ number ] ) { string { string number , string number } , string { string number , string number } }	1
Q_63	python get top n key with value as dictionary	C_63_1	sorted ( data . items ( ) ) [ ( string , { string number , string number } ) , ( string , { string number , string number } ) , ( string , { string number , string number } ) ]	0
Q_63	python get top n key with value as dictionary	C_63_2	sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] ) [ ( string , { string number , string number } ) , ( string , { string number , string number } ) , ( string , { string number , string number } ) ]	0
Q_63	python get top n key with value as dictionary	C_63_3	sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] , reverse = true ) [ ( string , { string number , string number } ) , ( string , { string number , string number } ) , ( string , { string number , string number } ) ]	0
Q_63	python get top n key with value as dictionary	C_63_4	dict ( sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] , reverse = true ) [ number ] ) { string { string number , string number } , string { string number , string number } }	0
Q_63	python get top n key with value as dictionary	C_63_5	from collections import ordered_dict ordered_dict ( sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] , reverse = true ) [ number ] ) ordered_dict ( [ ( string , { string number , string number } ) , ( string , { string number , string number } ) ] )	0
Q_63	python get top n key with value as dictionary	C_63_6	from collections import ordered_dict def get_top_players ( data , n = number , order = false ) string string string top = sorted ( data . items ( ) , key = lambda x x [ number ] [ string ] , reverse = true ) [ n ] if order return ordered_dict ( top ) return dict ( top )	0
Q_63	python get top n key with value as dictionary	C_63_7	get_top_players ( data ) { string { string number , string number } , string { string number , string number } }	0
Q_63	python get top n key with value as dictionary	C_63_8	get_top_players ( data , n = number ) { string { string number , string number } , string { string number , string number } , string { string number , string number } }	0
Q_63	python get top n key with value as dictionary	C_63_9	get_top_players ( data , order = true ) ordered_dict ( [ ( string , { string number , string number } ) , ( string , { string number , string number } ) ] )	0
Q_64	fast query in format data	C_64_0	in [ number ] txt = b string string a1 string b1 string c1 string a1 string b1 string c4 string a2 string string c1 string a2 string b1 string c2 string a3 string string c2 string a1 string b2 string c4 string string	1
Q_64	fast query in format data	C_64_1	var = np . genfromtxt ( txt . splitlines ( ) , names = true , delimiter = string , dtype = none ) array ( [ ( b string a1 string , b string b1 string , b string c1 string , number . number , number . number , number . number ) , . dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_64	fast query in format data	C_64_2	def foo ( astr ) return eval ( astr ) in [ number ] a = np . genfromtxt ( txt . splitlines ( ) , names = true , delimiter = string , dtype = string , converters = { number foo , number foo , number foo } ) in [ number ] a out [ number ] array ( [ ( string , string , string , number . number , number . number , number . number ) , ( string , string , string , number . number , number . number , number . number ) , ( string , string , string , number . number , number . number , number . number ) , ( string , string , string , number . number , number . number , number . number ) , ( string , string , string , number . number , number . number , number . number ) , ( string , string , string , number . number , number . number , number . number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_64	fast query in format data	C_64_3	in [ number ] ( a [ string ] = = string ) ( a [ string ] = = string ) out [ number ] array ( [ false , false , false , true , false , false ] , dtype = bool ) in [ number ] ( number < a [ string ] ) ( a [ string ] < number ) out [ number ] array ( [ true , false , true , true , true , false ] , dtype = bool )	0
Q_64	fast query in format data	C_64_4	in [ number ] dt = np . dtype ( [ ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] ) in [ number ] a1 = a . view ( dt ) in [ number ] a1 out [ number ] array ( [ ( [ string , string , string ] , [ number . number , number . number , number . number ] ) , ( [ string , string , string ] , [ number . number , number . number , number . number ] ) , ( [ string , string , string ] , [ number . number , number . number , number . number ] ) , ( [ string , string , string ] , [ number . number , number . number , number . number ] ) , ( [ string , string , string ] , [ number . number , number . number , number . number ] ) , ( [ string , string , string ] , [ number . number , number . number , number . number ] ) ] , dtype = [ ( string , string , ( number , ) ) , ( string , string , ( number , ) ) ] )	0
Q_64	fast query in format data	C_64_5	var = np . genfromtxt ( txt . splitlines ( ) , skip_header = number , delimiter = string , dtype = string , converters = { number foo , number foo , number foo } )	0
Q_64	fast query in format data	C_64_6	in [ number ] ( a1 [ string ] [ , number ] = = string ) ( a1 [ string ] [ , number ] = = string ) ( ( a1 [ string ] < number ) . any ( axis = number ) ) out [ number ] array ( [ false , false , false , false , false , true ] , dtype = bool ) in [ number ] ( a1 [ string ] [ , [ number , number ] ] = = [ string , string ] ) . all ( axis = number ) out [ number ] array ( [ false , false , false , false , false , true ] , dtype = bool )	0
Q_64	fast query in format data	C_64_7	var = a1 [ string ] [ , number ]	0
Q_64	fast query in format data	C_64_8	data [ np . where ( data [ string ] = = string ) ]	0
Q_64	fast query in format data	C_64_9	cursor . execute ( string , ( string , ) ) cursor . fetchone ( )	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_0	in [ number ] col1 out [ number ] [ number , number , number , number , number , number , number ] in [ number ] col2 out [ number ] [ number . number , number . number , number . number , number . number , number . number , number . number , number . number ] in [ number ] col3 out [ number ] [ number , number , number , number , number , number , number ]	1
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_1	in [ number ] data out [ number ] [ ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) ]	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_2	in [ number ] import itertools in [ number ] groups = itertools . groupby ( data , key = lambda x x [ number ] )	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_3	for a , b , in groups print ( a , list ( b ) )	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_4	number [ ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) ] number [ ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) ]	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_5	in [ number ] groups = itertools . groupby ( data , key = lambda x x [ number ] ) in [ number ] groups2 = [ sorted ( list ( var ) , reverse = true ) for var , var in groups ] in [ number ] groups2 out [ number ] [ [ ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) ] , [ ( number , number . number , number ) , ( number , number . number , number ) , ( number , number . number , number ) ] ]	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_6	for var in range ( len ( groups2 ) ) groups2 [ var ] = [ ( x , var , z ) for var , ( x , y , z ) in enumerate ( groups2 [ var ] , number ) ] for g in groups2 for item in g print ( item )	0
Q_65	sort nest dictionary and replace dictioary value with order number	C_65_7	( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number ) ( number , number , number )	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_0	[ number , number , number , number , number , number , number , number , number ]	1
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_1	[ number , number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_2	[ number , number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_3	[ number , number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_4	[ number , number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_5	[ number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_6	[ number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_7	[ number , number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_8	[ number , number , number , number , number , number , number , number ]	0
Q_66	how to insert new value into max heap and apply max_delete to heap	C_66_9	[ number , number , number , number , number , number , number , number ] / / swapped with number [ number , number , number , number , number , number , number , number ] / / swapped with number again	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_0	var = [ string , string ] pairs = [ zip ( var , var . split ( ) ) for var , var in ( sub . split ( none , number ) for sub in var ]	1
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_1	[ [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ]	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_2	var = [ string , string ] out = [ ] for var , var in ( sub . split ( none , number ) for sub in var ) out . append ( zip ( var , var ) )	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_3	var = [ [ ( string , var ) if int ( var ) < number else ( var , var ) for var , var in zip ( a , b . split ( ) ) ] for a , b in ( sub . split ( none , number ) for sub in l ) ] print ( var )	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_4	[ [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ]	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_5	var = [ ] for var , var in ( sub . split ( none , number ) for sub in l ) var . append ( [ ( string , i ) if int ( i ) < number else ( c , i ) for c , i in zip ( var , var . split ( ) ) ] ) print ( var )	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_6	[ ( string , var ) if int ( var ) < number else ( var , var ) for var , var in zip ( a , b . split ( ) ) ]	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_7	in [ number ] l = [ string , string ] in [ number ] pairs = [ [ ( string , var ) if int ( var ) < number else ( var , var ) for var , var in zip ( a , b . split ( ) ) ] for a , b in . ( sub . split ( none , number ) for sub in l ) ] in [ number ] pairs out [ number ] [ [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] , [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] ] in [ number ] unzipped = [ [ string . join ( a ) , string . join ( b ) ] for a , b in ( zip ( * tup ) for tup in pairs ) ] in [ number ] unzipped out [ number ] [ [ string , string ] , [ string , string ] ]	0
Q_67	how to create tuples from a single list with alpha_numeric chacters	C_67_8	in [ number ] [ string . join ( [ string . join ( var ) , string . join ( var ) ] ) for var , var in ( zip ( * tup ) for tup in pairs ) ] out [ number ] [ string , string ]	0
Q_68	complicate python regex	C_68_0	( ( ? < [ ^ _ ] ) ins d + ) _ ( [ a _ z_a _ z ] + [ number _ number ] * ) { ( [ ^ { } ] * ) } r . ( [ _ ( ) ? + d ] + ) ? ( ? _ ( [ _ ( ) ? + d ] + ) ) ?	1
Q_68	complicate python regex	C_68_1	( ( ? < [ ^ _ ] ) ins d + ) _	0
Q_68	complicate python regex	C_68_2	( [ a _ z_a _ z ] + [ number _ number ] * )	0
Q_68	complicate python regex	C_68_3	{ ( [ ^ { } ] * ) }	0
Q_68	complicate python regex	C_68_4	( [ _ ( ) ? + d ] + ) ?	0
Q_68	complicate python regex	C_68_5	( ? _ ( [ _ ( ) ? + d ] + ) ) ?	0
Q_68	complicate python regex	C_68_6	import re regex = r string test = [ string , string , string , string , string ] res = [ ] for var in test for match in re . finditer ( regex , var ) tmp = [ ] for group_num in range ( number , len ( match . groups ( ) ) ) if match . group ( group_num + number ) tmp . append ( match . group ( group_num + number ) ) res . append ( tmp ) print ( res )	0
Q_68	complicate python regex	C_68_7	[ [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string ] , [ string , string , string , string ] , [ string , string , string ] , [ string , string , string ] ]	0
Q_69	update panda cell base on column value and other column	C_69_0	var = [ string , string , string , string ] things = [ list ( var ) for var in var ]	1
Q_69	update panda cell base on column value and other column	C_69_1	from sklearn . feature_extraction . text import count_vectorizer import pandas as pd cv = count_vectorizer ( tokenizer = lambda doc doc , lowercase = false )	0
Q_69	update panda cell base on column value and other column	C_69_2	var = cv . fit_transform ( things ) names = [ string + var for var in cv . get_feature_names ( ) ]	0
Q_69	update panda cell base on column value and other column	C_69_3	var = pd . data_frame ( data = matrix . toarray ( ) , columns = names , index = raw )	0
Q_69	update panda cell base on column value and other column	C_69_4	count_a count_b count_c count_d abc number number number number aaa number number number number ba number number number number dd number number number number	0
Q_69	update panda cell base on column value and other column	C_69_5	var = pd . data_frame ( data = cv . fit_transform ( things ) . toarray ( ) , columns = [ string + var for var in cv . get_feature_names ( ) ] , index = raw )	0
Q_69	update panda cell base on column value and other column	C_69_6	pd . concat ( [ s , s . apply ( lambda x pd . series ( x ) . value_counts ( ) ) . fillna ( number ) ] , axis = number )	0
Q_69	update panda cell base on column value and other column	C_69_7	number loops , best of number number . number ms per loop	0
Q_69	update panda cell base on column value and other column	C_69_8	pd . data_frame ( data = cv . fit_transform ( things ) . toarray ( ) , columns = [ string + var for var in cv . get_feature_names ( ) ] , index = raw )	0
Q_69	update panda cell base on column value and other column	C_69_9	number loops , best of number number . number number ms per loop	0
Q_70	panda panel data update	C_70_0	t . update ( t . loc [ [ n1_loop ] , [ n2_loop ] , [ n3_loop ] ] . add ( number ) )	1
Q_70	panda panel data update	C_70_1	var = pd . data_frame ( np . zeros ( ( number , number ) ) , list ( string ) , list ( string ) , int ) var . loc [ string string , list ( string ) ] + = number var	0
Q_70	panda panel data update	C_70_2	var = pd . panel ( np . zeros ( ( number , number , number ) ) , list ( string ) , list ( string ) , list ( string ) , int ) var . loc [ string string , list ( string ) , [ string ] ] + = number var	0
Q_70	panda panel data update	C_70_3	not_implemented_error cannot set using an indexer with a panel yet	0
Q_70	panda panel data update	C_70_4	var = pd . panel ( np . zeros ( ( number , number , number ) ) , list ( string ) , list ( string ) , list ( string ) , int ) var . loc [ string string , list ( string ) , [ string ] ] < class string > dimensions number ( items ) x number ( major_axis ) x number ( minor_axis ) items axis b to d major_axis axis a to e minor_axis axis x to x	0
Q_70	panda panel data update	C_70_5	pn . update ( pn . loc [ string string , list ( string ) , [ string ] ] . add ( number ) )	0
Q_70	panda panel data update	C_70_6	pn . to_frame ( ) . astype ( int )	0
Q_70	panda panel data update	C_70_7	pn . loc [ , , string ] . astype ( int ) . t	0
Q_70	panda panel data update	C_70_8	t . update ( t . loc [ [ n1_loop ] , [ n2_loop ] , [ n3_loop ] ] . add ( number ) )	0
Q_71	priority queue with tuples and dicts	C_71_0	{ string number } < { string number } _ > number { string number } < { string number } type_error unorderable types dict ( ) < dict ( )	1
Q_71	priority queue with tuples and dicts	C_71_1	( number , { string number } ) < ( number , { string number } ) true	0
Q_71	priority queue with tuples and dicts	C_71_2	( number , number ) < ( number , number ) true ( number , number ) < ( number , number )	0
Q_71	priority queue with tuples and dicts	C_71_3	( number , { string number } ) < ( number , { string number } ) true	0
Q_71	priority queue with tuples and dicts	C_71_4	( number , { string number } ) < ( number , { string number } ) _ > number ( number , { string number } ) < ( number , { string number } ) type_error unorderable types dict ( ) < dict ( )	0
Q_71	priority queue with tuples and dicts	C_71_5	class priority_entry ( object ) def _init_ ( self , priority , data ) self . data = data self . priority = priority def _lt_ ( self , other ) return self . priority < other . priority	0
Q_71	priority queue with tuples and dicts	C_71_6	priority_entry ( number , { string number } ) < priority_entry ( number , { string number } ) false priority_entry ( number , { string number } ) < priority_entry ( number , { string number } ) true	0
Q_71	priority queue with tuples and dicts	C_71_7	var = { string number , string number , string false , string number , string number , string number } something = priority_entry ( number , { string number , string number , string number , string var , string number , string number , string number } ) something_else = priority_entry ( number , { string number , string number , string number , string var , string number , string number , string number } ) test = priority_queue ( ) test . put ( something ) test . put ( something_else )	0
Q_72	panda convert column to list	C_72_0	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) )	1
Q_72	panda convert column to list	C_72_1	member_id number [ number , number , number , number , number ] number [ number , number ] name val , dtype object	0
Q_72	panda convert column to list	C_72_2	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) ) . tolist ( )	0
Q_72	panda convert column to list	C_72_3	[ [ number , number , number , number , number ] , [ number , number ] ]	0
Q_72	panda convert column to list	C_72_4	df . groupby ( string ) [ string ] . apply ( lambda x list ( x ) ) . to_dict ( )	0
Q_72	panda convert column to list	C_72_5	{ number [ number , number ] , number [ number , number , number , number , number ] }	0
Q_72	panda convert column to list	C_72_6	df . groupby ( string ) [ string ] . apply ( lambda x sum ( x ) )	0
Q_72	panda convert column to list	C_72_7	member_id number number number number name val , dtype int64	0
Q_72	panda convert column to list	C_72_8	def sum_number_between_zero ( values ) valsum = [ number ] for var in values if var = = number if valsum [ _ number ] = number valsum . append ( number ) valsum . append ( number ) valsum [ _ number ] + = var return valsum	0
Q_72	panda convert column to list	C_72_9	sum_number_between_zero ( df [ string ] . tolist ( ) )	0
Q_72	panda convert column to list	C_72_10	[ number l , number , number l , number l ]	0
Q_72	panda convert column to list	C_72_11	df . groupby ( string ) [ string ] . apply ( lambda x sum_number_between_zero ( ( x ) )	0
Q_72	panda convert column to list	C_72_12	member_id number [ number , number , number , number ] number [ number ] name val , dtype object	0
Q_72	panda convert column to list	C_72_13	sum_number_between_zero ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_72	panda convert column to list	C_72_14	[ number , number , number , number , number , number , number , number , number ]	0
Q_73	understand numpy multi_dimensional array indexing	C_73_0	in [ number ] import numpy as np y = np . arange ( number ) . reshape ( number , number )	1
Q_73	understand numpy multi_dimensional array indexing	C_73_1	in [ number ] y [ np . array ( [ number , number , number ] ) , number number ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_2	in [ number ] y [ number , number number ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_3	np . array ( [ number , number , number ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_4	in [ number ] y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number , number ] ] ) ] _ index_error traceback ( most recent call last ) < ipython _ input _ number _ bf9ee1361144 > in < module > ( ) _ > number y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number , number ] ] ) ] index_error shape mismatch indexing arrays could not be broadcast together with shapes ( number , ) ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_5	in [ number ] np . array ( [ number , number , number ] ) . shape out [ number ] ( number , ) in [ number ] np . array ( [ [ number , number ] ] ) . shape out [ number ] ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_6	np . array ( [ number , number , number ] ) ( number d array ) number np . array ( [ [ number , number ] ] ) ( number d array ) number x number result ( number d array ) number x f	0
Q_73	understand numpy multi_dimensional array indexing	C_73_7	in [ number ] y [ np . array ( [ number , number , number ] ) , np . array ( [ [ number ] , [ number ] ] ) ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_8	in [ number ] np . array ( [ number , number , number ] ) . shape out [ number ] ( number , ) in [ number ] np . array ( [ [ number ] , [ number ] ] ) . shape out [ number ] ( number , number )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_9	np . array ( [ number , number , number ] ) ( number d array ) number np . array ( [ [ number ] , [ number ] ] ) ( number d array ) number x number result ( number d array ) number x number	0
Q_73	understand numpy multi_dimensional array indexing	C_73_10	in [ number ] y [ np . array ( [ [ number ] , [ number ] , [ number ] ] ) , np . array ( [ number , number ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_11	np . array ( [ [ number ] , [ number ] , [ number ] ] ) ( number d array ) number x number np . array ( [ number , number ] ) ( number d array ) number result ( number d array ) number x number	0
Q_73	understand numpy multi_dimensional array indexing	C_73_12	np . array ( [ number , number ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_13	in [ number ] y [ np . array ( [ [ number ] , [ number ] , [ number ] ] ) , np . array ( [ [ number , number ] ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_73	understand numpy multi_dimensional array indexing	C_73_14	np . array ( [ [ number ] , [ number ] , [ number ] ] ) ( number d array ) number x number np . array ( [ [ number , number ] ] ) ( number d array ) number x number result ( number d array ) number x number	0
Q_74	add column to data frame conditionally in pyspark	C_74_0	from pyspark . sql import types as t from pyspark . sql . functions import lit from pyspark . sql import data_frame	1
Q_74	add column to data frame conditionally in pyspark	C_74_1	var = sc . parallelize ( [ ( string , number , [ number , number , number ] ) ] ) . to_df ( [ string , string , string ] )	0
Q_74	add column to data frame conditionally in pyspark	C_74_2	def add_if_not_present ( df data_frame , name str , dtype t . data_type ) _ > data_frame return ( df if name in df . columns else df . with_column ( name , lit ( none ) . cast ( dtype ) ) )	0
Q_74	add column to data frame conditionally in pyspark	C_74_3	add_if_not_present ( df , string , t . integer_type ( ) )	0
Q_74	add column to data frame conditionally in pyspark	C_74_4	data_frame [ x string , y bigint , z array < bigint > , foo int ]	0
Q_74	add column to data frame conditionally in pyspark	C_74_5	add_if_not_present ( df , string , t . integer_type ( ) )	0
Q_74	add column to data frame conditionally in pyspark	C_74_6	data_frame [ x string , y bigint , z array < bigint > ]	0
Q_74	add column to data frame conditionally in pyspark	C_74_7	add_if_not_present ( df , string , t . struct_type ( [ t . struct_field ( string , t . integer_type ( ) ) , t . struct_field ( string , t . integer_type ( ) ) ] ) )	0
Q_74	add column to data frame conditionally in pyspark	C_74_8	data_frame [ x string , y bigint , z array < bigint > , foobar struct < foo int , bar int > ]	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_0	def f ( x ) def fac ( n ) return fac ( n _ number ) * n if n > number else number print string , x , string , fac ( x )	1
Q_75	get a python function of function_type for a nest function with recursion	C_75_1	var = nested ( f , string ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in nested file string , line number , in < genexpr > key_error string	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_2	var = nested ( f , string , fac = none )	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_3	nested_fac ( number ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in fac type_error string object is not callable	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_4	var = nested ( f , string , fac = none ) var = nested ( f , string , fac = var ) var = nested ( f , string , fac = var ) var = nested ( f , string , fac = var )	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_5	nested_fac ( number ) number nested_fac ( number ) number nested_fac ( number ) number nested_fac ( number ) traceback ( most recent call last ) file string , line number , in < module > file string , line number , in fac file string , line number , in fac file string , line number , in fac file string , line number , in fac type_error string object is not callable	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_6	def q ( * args , * * kwargs ) return nested_fac ( * args , * * kwargs ) nested_fac = nested ( f , string , fac = q )	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_7	var = nested ( f , string , fac = lambda * args , * * kwargs var ( * args , * * kwargs ) )	0
Q_75	get a python function of function_type for a nest function with recursion	C_75_8	var = nested ( f , string , fac = lambda n var ( n ) )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_0	in [ number ] out = np . zeros ( ( number , number ) , int ) in [ number ] src = np . arange ( number ) . reshape ( number , number ) in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , . [ number , number , number , number , number , number , number , number , number , number ] ] )	1
Q_76	place the mydata_array into the random location of big_array of zero	C_76_1	in [ number ] out [ number , number ] = src in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , . [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_2	in [ number ] out [ number number , number number ] = src in [ number ] out [ number number , number number ] = src in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_3	array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , . [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_4	def foo1 ( src , idx , nm ) out = np . zeros ( nm , dtype = src . dtype ) n , m = src . shape for var , var in idx out [ var var + n , var var + m ] = src return out idx = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] ) in [ number ] out1 = foo1 ( src , idx , ( number , number ) ) in [ number ] out1 out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_5	in [ number ] i = np . array ( [ number , number , number , number , number , number ] ) in [ number ] j = np . array ( [ number , number , number , number , number , number ] ) in [ number ] out [ i , j ] = src . flat in [ number ] out out [ number ] array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , . [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_6	def foo2 ( src , idx , nm ) out = np . zeros ( nm , dtype = src . dtype ) n , m = src . shape ni = len ( idx ) ij = [ np . mgrid [ var var + n , var var + m ] for var , var in idx ] ij = np . concatenate ( ij , axis = number ) . reshape ( number , _ number ) out [ ij [ number , ] , ij [ number , ] ] = np . tile ( src , ( ni , number ) ) . flat return out	0
Q_76	place the mydata_array into the random location of big_array of zero	C_76_7	def foo3 ( src , idx , nm ) out = np . zeros ( nm , dtype = src . dtype ) n , m = src . shape ni = len ( idx ) i = np . repeat ( ( idx [ , [ number ] ] + np . arange ( number ) ) . flatten ( ) , number ) j = np . repeat ( ( idx [ , [ number ] ] + np . arange ( number ) ) , number , axis = number ) . flatten ( ) out [ i , j ] = np . tile ( src , ( ni , number ) ) . flat return out	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_0	in [ number ] import pandas as pd . . ids = pd . data_frame ( . index = [ string , string ] , . data = [ [ string , string , string , string , string , string , string , string ] , . [ string , string , string , string , string , string , string , string ] ] , . ) . t . ids out [ number ] lx id isin number a number b y number z number b number x number a x number b y number a x	1
Q_77	array consolidate sparse array into one which be more densely populate	C_77_1	in [ number ] ids [ string ] = ( ids [ string ] = string ) ( ids [ string ] = string ) . ids . sort_values ( string , ascending = false , inplace = true ) . ids out [ number ] lx id isin full number b y true number a x true number b y true number a x true number a false number z false number b false number x false	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_2	var = ids [ string ] isin = ids [ string ] var = var [ var = string ] . drop_duplicates ( ) isin = isin [ isin = string ] . drop_duplicates ( )	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_3	in [ number ] pd . data_frame ( lx ) . join ( isin , how = string ) . fillna ( string ) out [ number ] lx id isin number b y number z number a x	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_4	in [ number ] pd . data_frame ( [ lx , isin ] ) . t . fillna ( string ) out [ number ] lx id isin number b y number z number a x	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_5	in [ number ] import pandas as pd . _ = pd . np . nan . ids = pd . data_frame ( . index = [ string , string ] , . data = [ [ string , _ , string , _ , string , _ , string , string , string ] , . [ _ , _ , string , string , _ , string , string , string , string ] ] , . ) . t . ids out [ number ] lx id isin number a na_n number na_n na_n number b y number na_n z number b na_n number na_n x number a x number b y number a x	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_6	in [ number ] ids [ string ] = ids . count ( axis = number ) . ids . sort_values ( string , ascending = false , inplace = true ) out [ number ] lx id isin order number b y number number a x number number b y number number a x number number a na_n number number na_n z number number b na_n number number na_n x number number na_n na_n number	0
Q_77	array consolidate sparse array into one which be more densely populate	C_77_7	in [ number ] lx = ids [ string ] . dropna ( ) . drop_duplicates ( ) . isin = ids [ string ] . dropna ( ) . drop_duplicates ( ) . pd . data_frame ( lx ) . join ( isin , how = string ) out [ number ] lx id isin number b y number na_n z number a x	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_0	import re from bs4 import beautiful_soup s = string string line string somelink string line string somelink string line string somelink string role _ line string somelink string string soup = beautiful_soup ( s , string )	1
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_1	soup . find_all ( attrs = { string string } )	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_2	soup . find_all ( string = re . compile ( r string ) )	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_3	soup . find_all ( attrs = { string string } , string = re . compile ( r string ) )	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_4	set ( [ var . parent for var in soup . find_all ( string = re . compile ( r string ) ) ] ) set ( soup . find_all ( attrs = { string string } ) )	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_5	{ < p class = string > actors < a href = string > actor number < / a > < / p > , < p class = string > actors < a href = string > actor number < / a > < / p > }	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_6	[ var . find_parents ( string , class_ = string ) for var in soup . find_all ( string = re . compile ( r string ) ) ]	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_7	[ [ < p class = string > actors < a href = string > actor number < / a > < / p > ] , [ < p class = string > actors < a href = string > actor number < / a > < / p > ] , [ ] ]	0
Q_78	python beautiful_soup _ ca not match a tag contain specific text	C_78_8	for var in [ node . parent for node in soup . find_all ( text = re . compile ( r string ) ) ] if not string in var . attrs [ string ] continue print ( var )	0
Q_79	ellipsoid equation contain numerous point	C_79_0	var = sum ( p [ i ] ) / n / / average i = { number , number , number , number , . , n _ number } / / of all points	1
Q_79	ellipsoid equation contain numerous point	C_79_1	xmin , ymin , zmin , xmax , ymax , zmax	0
Q_79	ellipsoid equation contain numerous point	C_79_2	var = p [ j ] p [ j ] _ p0 > = p [ i ] _ p0 / / max i = { number , number , number , number , . , n _ number } / / of all points	0
Q_79	ellipsoid equation contain numerous point	C_79_3	var = p [ j ] p [ j ] _ p0 > = p [ i ] _ p0 / / max dot ( pa _ p0 , p [ j ] _ p0 ) = = number / / but inly if inside plane i = { number , number , number , number , . , n _ number } / / from all points	0
Q_79	ellipsoid equation contain numerous point	C_79_4	dot ( pa _ p0 , p [ j ] _ p0 ) < = number e _ number	0
Q_79	ellipsoid equation contain numerous point	C_79_5	( pa _ p0 ) and ( pb _ p0 )	0
Q_79	ellipsoid equation contain numerous point	C_79_6	var = p [ j ] p [ j ] _ p0 > = p [ i ] _ p0 / / max dot ( pa _ p0 , p [ j ] _ p0 ) = = number / / but inly if inside plane dot ( pb _ p0 , p [ j ] _ p0 ) = = number / / and perpendicular also to b semi _ axis i = { number , number , number , number , . , n _ number } / / from all points	0
Q_79	ellipsoid equation contain numerous point	C_79_7	( pa _ p0 ) , ( pb _ p0 ) , ( pc _ p0 )	0
Q_79	ellipsoid equation contain numerous point	C_79_8	var = pa _ p0 b = pb _ p0 c = pc _ p0 p ( u , v ) = p0 + var * cos ( u ) * cos ( v ) + b * cos ( u ) * sin ( v ) + c * sin ( u ) u = < _ number . number * pi , + number . number * pi > v = < number . number , number . number * pi >	0
Q_80	json api data extraction	C_80_0	def lookup ( json , * path ) if not path return json first = path [ number ] rest = path [ number ] try sub_json = json [ first ] except ( type_error , lookup_error ) as e raise value_error ( string ( first , json ) ) return lookup ( sub_json , * rest )	1
Q_80	json api data extraction	C_80_1	def alter ( source , org , allele , file_row ) value = lookup ( source , string , number , org , string , number , allele ) try to_append = value . split ( string ) file_row . append ( to_append [ number ] / sum ( to_append ) ) except file_row . append ( string ) return file_row	0
Q_80	json api data extraction	C_80_2	var = { string [ { string string , string { string [ ] , string [ { string [ { string number , string string , string string } ] } ] } } ] }	0
Q_80	json api data extraction	C_80_3	alter ( data , string , string , string )	0
Q_80	json api data extraction	C_80_4	traceback ( most recent call last ) file string , line number , in < module > file string , line number , in alter file string , line number , in lookup file string , line number , in lookup file string , line number , in lookup file string , line number , in lookup file string , line number , in lookup file string , line number , in lookup value_error failed to look up string in { string [ { string string , string string , string number } ] }	0
Q_80	json api data extraction	C_80_5	lookup ( source , string , number , org , string , number , allele )	0
Q_80	json api data extraction	C_80_6	lookup ( source , string , number , org , string , number , string , allele )	0
Q_80	json api data extraction	C_80_7	value_error failed to look up string in [ { string string , string string , string number } ]	0
Q_80	json api data extraction	C_80_8	lookup ( source , string , number , org , string , number , string , number , allele )	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_0	convert scan . jpg _ normalize _ threshold number _ median number x9 _ negate result . png	1
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_1	convert scan . jpg _ normalize _ threshold number _ median number x9 _ negate _ morphology close disk number result . png	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_2	convert scan . jpg _ threshold number _ median number x9 _ negate _ morphology close disk number _ define connected _ components verbose = number _ connected _ components number _ auto _ level result . png	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_3	objects ( id bounding _ box centroid area mean _ color ) number number x297 + number + number number . number , number . number number srgb ( number , number , number ) number number x188 + number + number number . number , number . number number srgb ( number , number , number ) number number x194 + number + number number . number , number . number number srgb ( number , number , number ) number number x47 + number + number number . number , number . number number srgb ( number , number , number ) number number x16 + number + number number . number , number . number number srgb ( number , number , number )	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_4	convert scan . jpg _ fill string _ draw string result1 . png	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_5	convert scan . jpg _ fill string _ draw string result2 . png	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_6	convert scan . jpg _ crop number x188 + number + number doc1 . png	0
Q_81	get two image from image which have two image paste in a single document_ python c	C_81_7	convert scan . jpg _ crop number x194 + number + number doc2 . png	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_0	in [ number ] np . array ( [ [ ] , [ ] , [ ] ] ) out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 )	1
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_1	in [ number ] b = np . array ( [ [ ] , [ number ] , [ ] ] ) in [ number ] b out [ number ] array ( [ [ ] , [ number ] , [ ] ] , dtype = object )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_2	in [ number ] c = np . array ( ( number , number ) , object ) in [ number ] c out [ number ] array ( [ number , number ] , dtype = object )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_3	in [ number ] np . empty ( ( number , number ) ) out [ number ] array ( [ [ number . ] , [ number . ] , [ number . ] ] )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_4	in [ number ] np . empty ( ( number , number ) ) out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_5	in [ number ] np . empty ( ( number , number ) , object ) out [ number ] array ( [ [ none ] , [ none ] , [ none ] , [ none ] , [ none ] , [ none ] ] , dtype = object )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_6	in [ number ] d = np . empty ( ( number , ) , object ) in [ number ] d out [ number ] array ( [ none , none , none ] , dtype = object ) in [ number ] d . fill ( [ ] ) in [ number ] d out [ number ] array ( [ [ ] , [ ] , [ ] ] , dtype = object )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_7	in [ number ] d [ . ] = [ [ ] , [ number , number , number ] , [ number ] ] in [ number ] d out [ number ] array ( [ [ ] , [ number , number , number ] , [ number ] ] , dtype = object ) in [ number ] d [ number ] . append ( [ number , number ] ) in [ number ] d out [ number ] array ( [ [ [ number , number ] ] , [ number , number , number ] , [ number ] ] , dtype = object )	0
Q_82	"how do i make a grid of empty list in numpy that "" accept append"	C_82_8	in [ number ] d = np . empty ( ( number , ) , object ) in [ number ] d [ . ] = [ [ ] for var in range ( number ) ] in [ number ] d out [ number ] array ( [ [ ] , [ ] , [ ] ] , dtype = object ) in [ number ] d out [ number ] array ( [ [ ] , [ number ] , [ ] ] , dtype = object )	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_0	df . groupby ( ( df [ string ] = = string ) . cumsum ( ) ) . agg ( { string string , string lambda x x . count ( ) _ number } ) . replace ( number , np . nan ) . dropna ( )	1
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_1	area action action number river number . number number beach number . number number item number . number	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_2	df [ string ] = ( df [ string ] = = string ) . cumsum ( ) print ( df ) action area group number see river number number hold item number number hold item number number see beach number number hold item number number see item number number see item number number hold item number	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_3	var = df . groupby ( string ) . agg ( { string string , string lambda x . x . count ( ) _ number } ) print ( var ) area action action number river number number beach number number item number number item number	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_4	df1 . replace ( number , np . nan ) . dropna ( )	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_5	area action action number river number . number number beach number . number number item number . number	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_6	df [ string ] = ( df . action = = string ) . cumsum ( ) df [ string ] = df . groupby ( string ) [ string ] . transform ( lambda x x . iloc [ number ] ) df . groupby ( string ) . agg ( { string string , string lambda x ( x = = string ) . sum ( ) } ) . reset_index ( drop = true )	0
Q_83	panda be there a way to count how many time a certain value row occur after another set of value row	C_83_7	area action number beach number number item number number river number	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_0	def make_zeros_vectorized ( a , dtype = float ) a = np . asarray ( a ) . astype ( int ) idx = a + np . r_ [ number , ( a [ number ] = = a [ _ number ] ) . cumsum ( ) ] out = np . zeros ( idx [ _ number ] + number , dtype = dtype ) out [ idx ] = a return out	1
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_1	in [ number ] a out [ number ] [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] in [ number ] make_zeros_vectorized ( a ) out [ number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) in [ number ] a out [ number ] [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] in [ number ] make_zeros_vectorized ( a ) out [ number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] )	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_2	in [ number ] a = [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_3	in [ number ] a = np . asarray ( a ) . astype ( int ) in [ number ] a out [ number ] array ( [ number , number , number , number , number , number , number , number , number ] )	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_4	in [ number ] a [ number ] = = a [ _ number ] out [ number ] array ( [ false , false , true , false , true , true , false , false ] , dtype = bool ) in [ number ] ( a [ number ] = = a [ _ number ] ) . cumsum ( ) out [ number ] array ( [ number , number , number , number , number , number , number , number ] )	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_5	in [ number ] np . r_ [ number , ( a [ number ] = = a [ _ number ] ) . cumsum ( ) ] out [ number ] array ( [ number , number , number , number , number , number , number , number , number ] )	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_6	in [ number ] a + np . r_ [ number , ( a [ number ] = = a [ _ number ] ) . cumsum ( ) ] out [ number ] array ( [ number , number , number , number , number , number , number , number , number ] )	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_7	def get_zeros_mask ( a ) a = np . asarray ( a ) . astype ( int ) idx = a + np . r_ [ number , ( a [ number ] = = a [ _ number ] ) . cumsum ( ) ] mask = np . ones ( idx [ _ number ] + number , dtype = bool ) mask [ idx ] = number return mask	0
Q_84	how can one pad zero in_between non_consecutive float element of a sort list that contain duplicate	C_84_8	in [ number ] a out [ number ] [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] in [ number ] make_zeros_vectorized ( a ) out [ number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) in [ number ] get_zeros_mask ( a ) out [ number ] array ( [ true , true , true , true , false , true , false , true , false , false , true , false , false , false , true , true , true , false , true , false ] , dtype = bool ) in [ number ] np . flatnonzero ( get_zeros_mask ( a ) ) out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number ] )	0
Q_85	how to group data by positive or negative number in panda	C_85_0	var = df . macd . groupby ( df . flag ) for var , var in var print ( var )	1
Q_85	how to group data by positive or negative number in panda	C_85_1	import pandas as pd import numpy as np df = pd . data_frame ( ) df [ string ] = [ _ number , _ number , number , number , _ number , _ number , number , number , number ] df [ string ] = df . where ( df [ string ] > number ) . apply ( np . cumsum ) df [ string ] = df . where ( df [ string ] < number ) . apply ( np . cumsum )	0
Q_85	how to group data by positive or negative number in panda	C_85_2	a positives negatives number _ number na_n _ number . number number _ number na_n _ number . number number number number . number na_n number number number . number na_n number _ number na_n _ number . number number _ number na_n _ number . number number number number . number na_n number number number . number na_n number number number . number na_n	0
Q_85	how to group data by positive or negative number in panda	C_85_3	df [ string ] = df . a . apply ( lambda x true if x > number else false )	0
Q_85	how to group data by positive or negative number in panda	C_85_4	a positives negatives flag compare number _ number na_n _ number . number false false number number number . number na_n true false number _ number na_n _ number . number false false number number number . number na_n true false	0
Q_85	how to group data by positive or negative number in panda	C_85_5	def signed_agg ( pd_col ) val = number sgn = none col_iter = pd_col . iteritems ( ) try while true x = col_iter . next ( ) [ number ] if not sgn sgn = np . sign ( x ) if not np . sign ( x ) = = sgn yield val val = x sgn = np . sign ( x ) else val + = x tmp , sgn = ( sgn , np . nan ) yield sgn sgn = tmp except stop_iteration yield val	0
Q_85	how to group data by positive or negative number in panda	C_85_6	pd . data_frame ( signed_agg ( df [ string ] ) , columns = [ string ] )	0
Q_85	how to group data by positive or negative number in panda	C_85_7	signed_agg number na_n number na_n number _ number . number number na_n number number . number number na_n number _ number . number number na_n number na_n number number . number	0
Q_86	fill data_frame miss data	C_86_0	var = pd . data_frame ( { string [ string , string , string ] , string [ string , string , string ] , string [ number , number , number ] } ) . set_index ( [ string , string ] )	1
Q_86	fill data_frame miss data	C_86_1	in [ number ] df = df . unstack ( number ) in [ number ] df out [ number ] place id number number number number time number number number number . number na_n number number number number na_n number . number number number number number . number na_n	0
Q_86	fill data_frame miss data	C_86_2	in [ number ] df . index = pd . to_datetime ( df . index ) in [ number ] df out [ number ] place id number number number number time number _ number number _ number number number number number number . number na_n number _ number number _ number number number number number number na_n number . number number _ number number _ number number number number number number . number na_n	0
Q_86	fill data_frame miss data	C_86_3	in [ number ] times = pd . date_range ( string , string , freq = string ) in [ number ] times out [ number ] datetime_index ( [ string , string , string , string , string , string , string , string , string , string , . string , string , string , string , string , string , string , string , string , string ] , dtype = string , length = number , freq = string )	0
Q_86	fill data_frame miss data	C_86_4	in [ number ] df = df . reindex ( times ) in [ number ] df out [ number ] place id number number number number number _ number number _ number number number number number number . number na_n number _ number number _ number number number number number number na_n number . number number _ number number _ number number number number number na_n na_n number _ number number _ number number number number number number . number na_n number _ number number _ number number number number number na_n na_n .	0
Q_86	fill data_frame miss data	C_86_5	in [ number ] df = df . ffill ( ) in [ number ] df out [ number ] place id number number number number number _ number number _ number number number number number number . number na_n number _ number number _ number number number number number number number . number number . number number _ number number _ number number number number number number . number number . number number _ number number _ number number number number number number . number number . number number _ number number _ number number number number number number . number number . number number _ number number _ number number number number number number . number number . number number _ number number _ number number number number number number . number number . number .	0
Q_86	fill data_frame miss data	C_86_6	in [ number ] df . index = df . index . strftime ( string ) in [ number ] df out [ number ] place id number number number number number number number number . number na_n number number number number number . number number . number number number number number . number number . number number number number number . number number . number number number number number . number number . number number number number number . number number . number .	0
Q_86	fill data_frame miss data	C_86_7	df . index = df . index . set_names ( string )	0
Q_86	fill data_frame miss data	C_86_8	in [ number ] df . stack ( number ) . swaplevel ( number , number ) out [ number ] place id time number number number number number number . number number number number number number . number number number number number number number number . number number number number number number number . number number number number number number number . number number number number number number number . number .	0
Q_87	python numpy sum function with axis behavior	C_87_0	axis none or int or tuple of ints , optional . if axis is a tuple of ints , a sum is performed on all of the axes specified in the tuple instead of a single axis or all the axes as before .	1
Q_87	python numpy sum function with axis behavior	C_87_1	in [ number ] arr = np . arange ( number ) . reshape ( number , number , number ) in [ number ] arr . sum ( axis = ( number , number ) ) out [ number ] array ( [ number , number ] ) in [ number ] arr . sum ( axis = number ) . sum ( axis = number ) out [ number ] array ( [ number , number ] )	0
Q_87	python numpy sum function with axis behavior	C_87_2	in [ number ] rs = np . zeros ( ( xlen , ylen ) , int ) . rs1 = np . zeros ( ( xlen , ylen ) , int ) . .	0
Q_87	python numpy sum function with axis behavior	C_87_3	in [ number ] x . sum ( ( number , number , number ) ) out [ number ] array ( [ number , number , number , number , number ] ) in [ number ] y . sum ( ( number , number , number ) ) out [ number ] array ( [ number , number , number , number , number , number , number , number ] ) in [ number ] x . sum ( ( number , number , number ) ) [ , none ] + y . sum ( ( number , number , number ) ) out [ number ] array ( [ [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number ] ] )	0
Q_87	python numpy sum function with axis behavior	C_87_4	np . sum ( x [ i ] + y [ j ] )	0
Q_87	python numpy sum function with axis behavior	C_87_5	np . sum ( x [ i ] ) + np . sum ( y [ j ] )	0
Q_87	python numpy sum function with axis behavior	C_87_6	x . sum ( axis = ( number , number , number ) ) [ i ]	0
Q_87	python numpy sum function with axis behavior	C_87_7	in [ number ] x [ number ] . sum ( ) out [ number ] number in [ number ] x . sum ( ( number , number , number ) ) [ number ] out [ number ] number in [ number ] x . sum ( number ) . sum ( number ) . sum ( number ) [ number ] out [ number ] number	0
Q_87	python numpy sum function with axis behavior	C_87_8	in [ number ] rs1 [ i , ] out [ number ] array ( [ number , number , number , number , number , number , number , number ] )	0
Q_88	panda column of list to separate column	C_88_0	pd . get_dummies ( pd . data_frame ( df [ string ] . tolist ( ) ) . stack ( ) ) . sum ( level = number ) out [ number ] a b c number number number number number number number number number number number number	1
Q_88	panda column of list to separate column	C_88_1	pd . data_frame ( df [ string ] . tolist ( ) ) out [ number ] number number number number a b c number b c none number a none none	0
Q_88	panda column of list to separate column	C_88_2	pd . data_frame ( df [ string ] . tolist ( ) ) . stack ( ) out [ number ] number number a number b number c number number b number c number number a dtype object	0
Q_88	panda column of list to separate column	C_88_3	pd . get_dummies ( pd . data_frame ( df [ string ] . tolist ( ) ) . stack ( ) ) out [ number ] a b c number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_88	panda column of list to separate column	C_88_4	var = pd . data_frame ( { string ( list ( string ) , list ( string ) , list ( string ) ) } )	0
Q_88	panda column of list to separate column	C_88_5	number loops , best of number number . number ms per loop	0
Q_88	panda column of list to separate column	C_88_6	number loops , best of number number . number ms per loop	0
Q_88	panda column of list to separate column	C_88_7	var = pd . concat ( number * [ var ] ) . reset_index ( drop = true )	0
Q_88	panda column of list to separate column	C_88_8	number loop , best of number number ms per loop	0
Q_88	panda column of list to separate column	C_88_9	number loops , best of number number . number ms per loop	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_0	var = math . tan ( np . pi * fc / fs ) k1 = np . sqrt ( number ) * var a0 = k1 / ( math . sqrt ( number ) + k1 ) a1 = a0 b1 = _ ( number _ number * a0 )	1
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_1	b [ number . number number . number ] a [ number . _ number . number ]	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_2	var = number . number a1 = number . number b0 = number b1 = _ number . number	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_3	var = a0 = number . number b1 = _ ( number _ number * a0 ) = _ { number _ number * ( number . number ) } = _ ( number . number )	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_4	var = number . number k2 = number . number number	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_5	var = k2 / ( number + k1 + k2 ) = number . number number / ( number + number . number + number . number number ) = number . number number	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_6	var = k1 / ( number + k1 + x )	0
Q_89	convert tagint nd order butterworth to tagint st order _ part ii _	C_89_7	var = k1 / ( number + k1 + number . number ) = k1 / ( number . number + k1 )	0
Q_90	date intersection and space availability	C_90_0	with bs as ( select space_id as _sid , unnest ( array [ start_date , coalesce ( end_date , date string ) ] ) as _d , unnest ( array [ spaces , _ spaces ] ) as _sp from booking where end_date is null or end_date > = string ) , cs as ( select _sid _ the inner sum collapses starting and ending bookings on the same _ date to a single spaces value , the outer is the running sum . this _ avoids the problem where the order of bookings starting or ending _ on the same date is unspecified and would produce possibly falsely _ high values for spaces , if all starting bookings just so happen to _ come first . , sum ( sum ( _sp ) ) over ( partition by _sid order by _d ) as _usp from bs group by _sid , _d ) select * from space where not exists ( select from cs where cs . _sid = space . id and space . available_spaces _ cs . _usp < number )	1
Q_90	date intersection and space availability	C_90_1	from sqlalchemy import or_ from sqlalchemy . dialects . postgresql import array bs = session . query ( booking . space_id , func . unnest ( array ( [ booking . start_date , func . coalesce ( booking . end_date , func . date ( string ) ) ] ) ) . label ( string ) , func . unnest ( array ( [ booking . spaces , _ booking . spaces ] ) ) . label ( string ) ) . filter ( or_ ( booking . end_date = = none , booking . end_date > = string ) ) . cte ( ) cs = session . query ( bs . c . space_id , func . sum ( func . sum ( bs . c . spaces ) ) . over ( partition_by = bs . c . space_id , order_by = bs . c . date ) . label ( string ) ) . group_by ( bs . c . space_id , bs . c . date ) . cte ( ) query = session . query ( space ) . filter ( session . query ( cs ) . filter ( cs . c . space_id = = space . id , space . available_spaces _ cs . c . spaces < number ) . exists ( ) )	0
Q_90	date intersection and space availability	C_90_2	select * from booking where daterange ( start_date , end_date , string ) daterange ( string , null , string )	0
Q_90	date intersection and space availability	C_90_3	_ number . . . . _ number . . . . . _ number . . . . . . . _ number . . . . number number number number	0
Q_90	date intersection and space availability	C_90_4	with bs as ( select * from booking where daterange ( start_date , end_date , string ) daterange ( string , null , string ) ) select distinct b1 . space_id , sum ( b2 . spaces ) as sum from bs b1 join bs b2 on b1 . start_date < daterange ( b2 . start_date , b2 . end_date , string ) and b1 . space_id = b2 . space_id group by b1 . id , b1 . space_id	0
Q_90	date intersection and space availability	C_90_5	space_id sum _ + _ number number ( number row )	0
Q_90	date intersection and space availability	C_90_6	with bs as ( select * from booking where daterange ( start_date , end_date , string ) daterange ( string , null , string ) ) , cs as ( select distinct b1 . space_id , sum ( b2 . spaces ) as sum from bs b1 join bs b2 on b1 . start_date < daterange ( b2 . start_date , b2 . end_date , string ) and b1 . space_id = b2 . space_id _ could also use distinct sum ( ) over ( partition by b1 . id ) instead group by b1 . id , b1 . space_id ) select * from space where not exists ( select number from cs where cs . space_id = space . id _ check if there is not enough space and space . available_spaces _ cs . sum < number )	0
Q_90	date intersection and space availability	C_90_7	from functools import partial from sqlalchemy . dialects . postgresql import daterange	0
Q_91	python _ data structure of csr_matrix	C_91_0	in [ number ] documents = ( string , string , string , string )	1
Q_91	python _ data structure of csr_matrix	C_91_1	in [ number ] alist = [ var . lower ( ) . split ( ) for var in documents ]	0
Q_91	python _ data structure of csr_matrix	C_91_2	in [ number ] aset = set ( ) in [ number ] [ aset . update ( var ) for var in alist ] out [ number ] [ none , none , none , none ] in [ number ] unq = sorted ( list ( aset ) ) in [ number ] unq out [ number ] [ string , string , string , string , string , string , string , string , string , string , string ]	0
Q_91	python _ data structure of csr_matrix	C_91_3	in [ number ] rows , cols , data = [ ] , [ ] , [ ] in [ number ] for var , var in enumerate ( alist ) . for c in var . rows . append ( var ) . cols . append ( unq . index ( c ) ) . data . append ( number ) .	0
Q_91	python _ data structure of csr_matrix	C_91_4	in [ number ] m = sparse . csr_matrix ( ( data , ( rows , cols ) ) ) in [ number ] m out [ number ] < number x11 sparse matrix of type string numpy . int32 string with number stored elements in compressed sparse row format > in [ number ] print ( m ) ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number ( number , number ) number . ( number , number ) number ( number , number ) number in [ number ] m . a	0
Q_91	python _ data structure of csr_matrix	C_91_5	in [ number ] from sklearn import feature_extraction in [ number ] tf = feature_extraction . text . tfidf_vectorizer ( ) in [ number ] tf_m = tf . fit_transform ( documents ) in [ number ] tf_m out [ number ] < number x11 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] print ( tf_m ) ( number , number ) number . number ( number , number ) number . number ( number , number ) number . number . ( number , number ) number . number ( number , number ) number . number in [ number ] tf_m . a out [ number ] array ( [ [ number . number , number . , number . , number . , number . number , number . , number . , number . number , number . , number . number , number . ] , . [ number . , number . number , number . number , number . , number . , number . number , number . number , number . , number . number , number . number , number . number ] ] )	0
Q_91	python _ data structure of csr_matrix	C_91_6	in [ number ] tf_m . indices out [ number ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] , dtype = int32 ) in [ number ] tf_m . data out [ number ] array ( [ number . number , number . number , number . number , number . number , number . number , . number . number ] ) in [ number ] tf_m . indptr out [ number ] array ( [ number , number , number , number , number ] , dtype = int32 )	0
Q_91	python _ data structure of csr_matrix	C_91_7	in [ number ] np . array ( unq ) [ m [ number , ] . indices ] out [ number ] array ( [ string , string , string , string ] , dtype = string ) in [ number ] np . array ( unq ) [ m [ number , ] . indices ] out [ number ] array ( [ string , string , string , string , string , string , string ] , dtype = string )	0
Q_92	with python select repeat element longer than n	C_92_0	var = df . a . values unq , c = np . unique ( var , return_counts = number ) df_out = df [ np . in1d ( var , unq [ c > = number ] ) ]	1
Q_92	with python select repeat element longer than n	C_92_1	df [ df . a . isin ( np . flatnonzero ( np . bincount ( df . a ) > = number ) ) ]	0
Q_92	with python select repeat element longer than n	C_92_2	def filter_df ( df , n = number ) a = df . a . values mask = np . concatenate ( ( [ true ] , a [ number ] = a [ _ number ] , [ true ] ) ) idx = np . flatnonzero ( mask ) count = idx [ number ] _ idx [ _ number ] valid_mask = count > = n good_idx = idx [ _ number ] [ valid_mask ] out_arr = np . repeat ( a [ good_idx ] , count [ valid_mask ] ) out_df = pd . data_frame ( out_arr ) return out_df	0
Q_92	with python select repeat element longer than n	C_92_3	timeit ( stmt , setp , number = number )	0
Q_92	with python select repeat element longer than n	C_92_4	var = [ number , number , number , number , number , number , number , number , number , number ] timings = np . zeros ( ( len ( var ) , number ) ) for var , var in enumerate ( var ) diffs = np . random . randint ( number , size = var ) d = pd . data_frame ( dict ( a = np . arange ( var ) . repeat ( diffs ) ) ) res = timeit _ oq div3 ( d ) timings [ var , number ] = res . best res = timeit _ oq pir1_5 ( d ) timings [ var , number ] = res . best timings_df = pd . data_frame ( timings , columns = ( ( string , string ) ) ) timings_df . index = var timings_df . index . name = string	0
Q_92	with python select repeat element longer than n	C_92_5	def pir1_5 ( d ) v = d . a . values t = np . flatnonzero ( v [ number ] = v [ _ number ] ) s = np . empty ( t . size + number , int ) s [ number ] = _ number s [ _ number ] = v . size _ number s [ number _ number ] = t r = np . diff ( s ) return pd . data_frame ( v [ ( r > number ) . repeat ( r ) ] ) def div3 ( df , n = number ) a = df . a . values mask = np . concatenate ( ( [ true ] , a [ number ] = a [ _ number ] , [ true ] ) ) idx = np . flatnonzero ( mask ) count = idx [ number ] _ idx [ _ number ] valid_mask = count > = n good_idx = idx [ _ number ] [ valid_mask ] out_arr = np . repeat ( a [ good_idx ] , count [ valid_mask ] ) return pd . data_frame ( out_arr )	0
Q_92	with python select repeat element longer than n	C_92_6	in [ number ] timings_df out [ number ] div3 ( sec ) pir1_5 ( sec ) datasizes number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number number . number number number number . number number . number number number . number number . number	0
Q_92	with python select repeat element longer than n	C_92_7	in [ number ] timings_df . iloc [ , number ] / timings_df . iloc [ , number ] out [ number ] datasizes number number . number number number . number number number number . number number number number . number number number . number number number . number number number . number number number . number number number . number number number . number	0
Q_93	how to build a keyword historgam in mongo_db	C_93_0	db . wordstuff . insert_many ( [ { string string } , { string string } , { string string } , { string string } , { string string } ] )	1
Q_93	how to build a keyword historgam in mongo_db	C_93_1	db . wordstuff . aggregate ( [ { string { string number , string { string { string { string [ string , string ] } , string { string [ string , [ string , string , string , string ] ] } } } } } , { string string } , { string { string string , string { string number } } } , { string { string null , string { string { string string , string string } } } } , { string { string { string { string { string [ string , string , string , string ] , string string , string { string { string { string [ { string [ string , string ] } , _ number ] } , string { string [ string , { string [ string , string ] } ] } , string { string string , string number } } } } } } } } ] )	0
Q_93	how to build a keyword historgam in mongo_db	C_93_2	db . wordstuff . aggregate ( [ { string { string number , string { string { string { string [ string , string ] } , string { string [ string , [ string , string , string , string ] ] } } } } } , { string string } , { string { string string , string { string number } } } , ] )	0
Q_93	how to build a keyword historgam in mongo_db	C_93_3	{ string string , string number . number } { string string , string number . number } { string string , string number . number }	0
Q_93	how to build a keyword historgam in mongo_db	C_93_4	var words = db . wordstuff . aggregate ( [ { string { string number , string { string { string { string [ string , string ] } , string { string [ string , [ string , string , string , string ] ] } } } } } , { string string } , { string { string string , string { string number } } } , ] ) . to_array ( ) var result = [ string , string , string , string ] . map ( w = > ( words . map ( wd = > wd . _id ) . index_of ( w ) = = _ number ) ? words [ words . map ( wd = > wd . _id ) . index_of ( w ) ] { _id w , count number } ) . reduce ( ( acc , curr ) = > object . assign ( acc , { [ curr . _id ] curr . count } ) , { } )	0
Q_93	how to build a keyword historgam in mongo_db	C_93_5	var = [ string , string , string , string ] words = list ( db . wordstuff . aggregate ( [ { string { string number , string { string { string { string [ string , string ] } , string { string [ string , var ] } } } } } , { string string } , { string { string string , string { string number } } } , ] ) ) result = reduce ( lambda x , y dict ( x . items ( ) + { y [ string ] y [ string ] } . items ( ) ) , map ( lambda w words [ map ( lambda wd wd [ string ] , words ) . index ( w ) ] if w in map ( lambda wd wd [ string ] , words ) else { string w , string number } , var ) , { } )	0
Q_93	how to build a keyword historgam in mongo_db	C_93_6	{ string number . number , string number . number , string number . number , string number . number }	0
Q_93	how to build a keyword historgam in mongo_db	C_93_7	db . wordstuff . map_reduce ( function ( ) { this . data . split ( string ) . filter ( w = > words . index_of ( w ) = = _ number ) . for_each ( w = > emit ( null , { [ w ] number } ) ) } , function ( key , values ) { return [ ] . concat . apply ( [ ] , values . map ( v = > object . keys ( v ) . map ( k = > ( { k k , v v [ k ] } ) ) ) ) . reduce ( ( acc , curr ) = > object . assign ( acc , { [ curr . k ] ( acc . has_own_property ( curr . k ) ) ? acc [ curr . k ] + curr . v curr . v } ) , { } ) } , { string { string number } , string { string [ string , string , string , string ] } , string function ( key , value ) { return words . map ( w = > ( value . has_own_property ( w ) ) ? { [ w ] value [ w ] } { [ w ] number } ) . reduce ( ( acc , curr ) = > object . assign ( acc , curr ) , { } ) } } )	0
Q_94	remove double quote from first element of the list	C_94_0	var = list ( eval ( var [ number ] ) )	1
Q_94	remove double quote from first element of the list	C_94_1	[ number , number , number , [ string , string , string , string ] ]	0
Q_94	remove double quote from first element of the list	C_94_2	var = list ( eval ( var [ number ] ) ) var [ number ] = string	0
Q_94	remove double quote from first element of the list	C_94_3	[ string , number , number , [ string , string , string , string ] ]	0
Q_94	remove double quote from first element of the list	C_94_4	var = list ( eval ( string string , string string + string + string . join ( var [ number ] . split ( string ) [ number ] ) ) )	0
Q_94	remove double quote from first element of the list	C_94_5	[ string , number , number , [ string , string , string , string ] ]	0
Q_94	remove double quote from first element of the list	C_94_6	var = a [ number ] . split ( string ) a = list ( eval ( string string string + string . join ( var [ number ] ) ) )	0
Q_94	remove double quote from first element of the list	C_94_7	[ string , number , number , [ string , string , string , string ] ]	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_0	var = np . linspace ( start = _ number , stop = number , num = number ) sin = np . sin ( var * * number ) df = pd . data_frame ( { string sin , string sin > . number } , var = var )	1
Q_95	plot multidimensional binary data as horizontal bar	C_95_1	number number number number number number number number number number number number number number number	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_2	number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number / / the original values number number number number number number number number number number number number number number number	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_3	number number number number number number number number number number number number number number number	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_4	var = df . filtered ( df . filtered . shift ( ) . fillna ( false ) ^ df . filtered . shift ( _ number ) . fillna ( false ) )	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_5	var = flags * flags . index number number number number number number number number number number number number number number number	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_6	var = var [ var = number ] [ number , number , number , number ]	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_7	var = flag_values . values . reshape ( ( _ number , number ) ) [ [ number , number ] , [ number , number ] ]	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_8	value_pairs [ , number ] = value_pairs [ , number ] _ value_pairs [ , number ]	0
Q_95	plot multidimensional binary data as horizontal bar	C_95_9	var = df . sin . plot ( ) / / the second parameter is the height of the bar , and its thickness . var . broken_barh ( value_pairs , ( number . number , number . number number , ) , facecolors = string )	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_0	number number number number number number number number number number number number number number number	1
Q_96	how to improve the efficiency of a sobel edge detector	C_96_1	_ number number number _ number number number _ number number number	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_2	[ _ number , _ number , _ number ]	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_3	[ number ] [ number ] * [ _ number , number , number ] [ number ]	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_4	number number number number number _ number number _ number _ number	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_5	number number number number number number number number number _ number number number number number number number number number	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_6	var = img [ , number ] _ img [ , _ number ]	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_7	var = result_h [ _ number ] + result_h [ number ] + number * result_h [ number _ number ]	0
Q_96	how to improve the efficiency of a sobel edge detector	C_96_8	import numpy as np def sobel_x_orig ( img ) x_kernel = np . array ( [ [ _ number , number , number ] , [ _ number , number , number ] , [ _ number , number , number ] ] ) sobelled = np . zeros ( ( img . shape [ number ] _ number , img . shape [ number ] _ number ) ) for var in range ( number , img . shape [ number ] _ number ) for x in range ( number , img . shape [ number ] _ number ) sobelled [ var _ number , x _ number ] = np . sum ( np . multiply ( img [ var _ number var + number , x _ number x + number ] , x_kernel ) ) return sobelled def sobel_x_new ( img ) result_h = img [ , number ] _ img [ , _ number ] result_v = result_h [ _ number ] + result_h [ number ] + number * result_h [ number _ number ] return result_v img = np . random . rand ( number , number ) sobel_new = sobel_x_new ( img ) sobel_orig = sobel_x_orig ( img ) assert ( np . abs ( sobel_new _ sobel_orig ) < number e _ number ) . all ( )	0
Q_97	summation over index from symarray	C_97_0	var = sym . symarray ( string , ( number , number , number , number ) )	1
Q_97	summation over index from symarray	C_97_1	c [ i , j , k , l ]	0
Q_97	summation over index from symarray	C_97_2	var = sym . tensor . array ( var )	0
Q_97	summation over index from symarray	C_97_3	import sympy as sym q = sym . matrix_symbol ( string , number , number ) c = sym . symarray ( string , ( number , number , number , number ) ) i , j , k , l = sym . symbols ( string ) c = sym . tensor . array ( c ) print ( sym . summation ( q [ i , j ] * c [ i , j , k , l ] , ( i , number , number ) , ( j , number , number ) , ( k , number , number ) , ( l , number , number ) ) )	0
Q_97	summation over index from symarray	C_97_4	c_0_0_0_0 * q [ number , number ] + c_0_0_0_1 * q [ number , number ] + c_0_0_1_0 * q [ number , number ] + c_0_0_1_1 * q [ number , number ] + c_0_1_0_0 * q [ number , number ] + c_0_1_0_1 * q [ number , number ] + c_0_1_1_0 * q [ number , number ] + c_0_1_1_1 * q [ number , number ] + c_1_0_0_0 * q [ number , number ] + c_1_0_0_1 * q [ number , number ] + c_1_0_1_0 * q [ number , number ] + c_1_0_1_1 * q [ number , number ] + c_1_1_0_0 * q [ number , number ] + c_1_1_0_1 * q [ number , number ] + c_1_1_1_0 * q [ number , number ] + c_1_1_1_1 * q [ number , number ]	0
Q_97	summation over index from symarray	C_97_5	sym . summation ( . , ( i , number , number ) )	0
Q_97	summation over index from symarray	C_97_6	var = sym . symarray ( string , ( number , number , number , number ) )	0
Q_97	summation over index from symarray	C_97_7	value_error index [ number , number , number , number ] out of border	0
Q_97	summation over index from symarray	C_97_8	sym . summation ( . , ( i , number , number ) )	0
Q_98	nltk stanford segmentor how to set classpath	C_98_0	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number java _ mx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ preload tokenize , ssplit , pos , lemma , parse , depparse _ status_port number _ port number _ timeout number	1
Q_98	nltk stanford segmentor how to set classpath	C_98_1	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( ) , core_nlpner_tagger ( ) stpos . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ] stner . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_98	nltk stanford segmentor how to set classpath	C_98_2	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ chinese _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ chinese . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ chinese . properties _ preload tokenize , ssplit , pos , lemma , ner , parse _ status_port number _ port number _ timeout number	0
Q_98	nltk stanford segmentor how to set classpath	C_98_3	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ german _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ german . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ german . properties _ preload tokenize , ssplit , pos , ner , parse _ status_port number _ port number _ timeout number	0
Q_98	nltk stanford segmentor how to set classpath	C_98_4	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( string ) , core_nlpner_tagger ( string ) stpos . tag ( string . split ( ) ) [ ( string , string ) , ( string , string ) , ( string , string ) ] stner . tag ( string . split ( ) ) [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ]	0
Q_98	nltk stanford segmentor how to set classpath	C_98_5	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ spanish _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ spanish . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ spanish . properties _ preload tokenize , ssplit , pos , ner , parse _ status_port number _ port number _ timeout number	0
Q_98	nltk stanford segmentor how to set classpath	C_98_6	from nltk . tag . stanford import core_nlppos_tagger , core_nlpner_tagger stpos , stner = core_nlppos_tagger ( string ) , core_nlpner_tagger ( string ) stner . tag ( u string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ] stpos . tag ( u string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_98	nltk stanford segmentor how to set classpath	C_98_7	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ french _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ french . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ french . properties _ preload tokenize , ssplit , pos , parse _ status_port number _ port number _ timeout number	0
Q_98	nltk stanford segmentor how to set classpath	C_98_8	from nltk . tag . stanford import core_nlppos_tagger stpos = core_nlppos_tagger ( string ) stpos . tag ( string . split ( ) ) [ ( u string , u string ) , ( u string , u string ) , ( u string , u string ) ]	0
Q_98	nltk stanford segmentor how to set classpath	C_98_9	wget http / / nlp . stanford . edu / software / stanford _ corenlp _ full _ number _ number _ number . zip unzip stanford _ corenlp _ full _ number _ number _ number . zip cd stanford _ corenlp _ full _ number _ number _ number wget http / / nlp . stanford . edu / software / stanford _ arabic _ corenlp _ number _ number _ number _ models . jar wget https / / raw . githubusercontent . com / stanfordnlp / core_nlp / master / src / edu / stanford / nlp / pipeline / stanford_core_nlp _ arabic . properties java _ xmx4g _ cp string edu . stanford . nlp . pipeline . stanford_core_nlp_server _ server_properties stanford_core_nlp _ french . properties _ preload tokenize , ssplit , pos , parse _ status_port number _ port number _ timeout number	0
Q_98	nltk stanford segmentor how to set classpath	C_98_10	from nltk . tag . stanford import core_nlppos_tagger from nltk . tokenize . stanford import core_nlp_tokenizer sttok = core_nlp_tokenizer ( string ) stpos = core_nlppos_tagger ( string ) text = u string stpos . tag ( sttok . tokenize ( text ) ) [ ( string , string ) , ( string , string ) ]	0
Q_99	build a large numpy array from itertools product	C_99_0	list ( product ( range ( number , number ) , repeats = number ) )	1
Q_99	build a large numpy array from itertools product	C_99_1	in [ number ] len ( list ( product ( range ( number , number ) , repeat = number ) ) ) . memory_error	0
Q_99	build a large numpy array from itertools product	C_99_2	"in [ number ] a = np . ones ( ( number * * number , number ) , int ) _ value_error traceback ( most recent call last ) < ipython _ input _ number _ e833a9e859e0 > in < module > ( ) _ > number a = np . ones ( ( number * * number , number ) , int ) / usr / local / lib / python3 . number / dist _ packages / numpy / core / numeric . py in ones ( shape , dtype , order ) number number string string unsafe "" ) number return a value_error maximum allowed dimension exceeded"	0
Q_99	build a large numpy array from itertools product	C_99_3	in [ number ] number * number * number * * number out [ number ] number , number , number , number	0
Q_99	build a large numpy array from itertools product	C_99_4	in [ number ] sp = sorted_product ( range ( number , number ) , number ) in [ number ] counter = counter ( sp ) in [ number ] counter out [ number ] counter ( { ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number , ( number , number ) number } )	0
Q_99	build a large numpy array from itertools product	C_99_5	in [ number ] n = number a = np . mgrid [ [ slice ( number , number ) ] * n ] . reshape ( n , _ number ) . t in [ number ] a . shape out [ number ] ( number , number ) in [ number ] b = np . array ( list ( product ( range ( number , number ) , repeat = number ) ) ) in [ number ] b . shape out [ number ] ( number , number ) in [ number ] a [ number ] out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] ) in [ number ] b [ number ] out [ number ] array ( [ [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number ] ] ) in [ number ] np . allclose ( a , b )	0
Q_99	build a large numpy array from itertools product	C_99_6	in [ number ] timeit b = np . array ( list ( product ( range ( number , number ) , repeat = number ) ) ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each ) in [ number ] timeit a = np . mgrid [ [ slice ( number , number ) ] * n ] . reshape ( n , _ number ) . t number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_99	build a large numpy array from itertools product	C_99_7	value_error array is too big arr . size * arr . dtype . itemsize is larger than the maximum possible size .	0
Q_100	python matplotlib for loop plot with function and label	C_100_0	var = [ [ number * x ] , [ number * x ] , [ number * x ] ]	1
Q_100	python matplotlib for loop plot with function and label	C_100_1	var = [ number * x , number * x , number * x ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_2	var = np . linspace ( number , number , number )	0
Q_100	python matplotlib for loop plot with function and label	C_100_3	var = [ number , number . number , number . number , number . number , . , number . number , number . number , number ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_4	number * x = [ number , number . number , number . number number , number . number , . , number . number , number . number , number ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_5	var = [ number * x , number * x , number * x ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_6	var = [ [ number , number . number , number . number , number . number , number . number , number . number , number ] , [ number , number . number , number . number number , number . number , number . number , number . number , number ] , [ number , number . number , number . number , number . number , number . number , number . number , number ] ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_7	var = [ [ number * x ] , [ number * x ] , [ number * x ] ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_8	var = [ [ [ number , number . number , number . number , number . number , number . number , number . number , number ] ] , [ [ number , number . number , number . number number , number . number , number . number , number . number , number ] ] , [ [ number , number . number , number . number , number . number , number . number , number . number , number ] ] ]	0
Q_100	python matplotlib for loop plot with function and label	C_100_9	[ [ number , number . number , number . number , number . number , number . number , number . number , number ] ]	0
Q_101	how to rotate an array of data	C_101_0	list ( map ( list , ( zip ( * x [ _ number ] ) ) ) ) [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	1
Q_101	how to rotate an array of data	C_101_1	[ list ( var ) for var in zip ( * x [ _ number ] ) ] [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ]	0
Q_101	how to rotate an array of data	C_101_2	np . rot90 ( x , _ number ) array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_101	how to rotate an array of data	C_101_3	x . t [ , _ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_101	how to rotate an array of data	C_101_4	var = np . random . randn ( number , number ) . tolist ( )	0
Q_101	how to rotate an array of data	C_101_5	timeit list ( map ( list , ( zip ( * x [ _ number ] ) ) ) ) number loops , best of number number ms per loop	0
Q_101	how to rotate an array of data	C_101_6	timeit [ list ( var ) for var in zip ( * x [ _ number ] ) ] number loops , best of number number ms per loop	0
Q_101	how to rotate an array of data	C_101_7	timeit list ( zip ( * x [ _ number ] ) ) number loops , best of number number . number ms per loop	0
Q_101	how to rotate an array of data	C_101_8	timeit np . rot90 ( x , _ number ) number loops , best of number number . number ms per loop	0
Q_101	how to rotate an array of data	C_101_9	timeit np . fliplr ( np . transpose ( x ) ) number loops , best of number number . number ms per loop	0
Q_101	how to rotate an array of data	C_101_10	timeit np . transpose ( x ) [ _ number ] number loops , best of number number . number ms per loop	0
Q_101	how to rotate an array of data	C_101_11	var = np . array ( var ) timeit np . rot90 ( var , _ number ) number loops , best of number number . number s per loop	0
Q_101	how to rotate an array of data	C_101_12	timeit x . t [ , _ number ] number loops , best of number number ns per loop	0
Q_102	convert dictionary to panda in python	C_102_0	pd . get_dummies ( df . stack ( ) ) . sum ( level = number )	1
Q_102	convert dictionary to panda in python	C_102_1	df . stack ( ) . reset_index ( level = number ) . set_index ( number , append = true ) [ string ] . unstack ( ) . notnull ( ) . mul ( number )	0
Q_102	convert dictionary to panda in python	C_102_2	number number number number number number . number . number . number number number number number number number . number . number . number number number number number number number . number . number . number number number number number number	0
Q_102	convert dictionary to panda in python	C_102_3	var = df . stack ( ) . reset_index ( name = string ) pd . crosstab ( var . level_0 , var . values )	0
Q_102	convert dictionary to panda in python	C_102_4	values number number number number number level_0 number . number . number . number number number number number number number . number . number . number number number number number number number . number . number . number number number number number number	0
Q_102	convert dictionary to panda in python	C_102_5	df . stack ( ) . reset_index ( name = string ) . pivot ( index = string , columns = string ) [ string ] . notnull ( ) . astype ( int )	0
Q_102	convert dictionary to panda in python	C_102_6	values number number number number number level_0 number . number . number . number number number number number number number . number . number . number number number number number number number . number . number . number number number number number number	0
Q_102	convert dictionary to panda in python	C_102_7	pd . get_dummies ( df . stack ( ) ) . sum ( level = number )	0
Q_102	convert dictionary to panda in python	C_102_8	number number number number number number . number . number . number number number number number number number . number . number . number number number number number number number . number . number . number number number number number number	0
Q_103	detect outer most_edge of image and plot base on it	C_103_0	import cv2 import numpy as np rgb_img = cv2 . imread ( string ) height , width = gray_img . shape gray_img = cv2 . cvt_color ( rgb_img , cv2 . color_bgr2_gray )	1
Q_103	detect outer most_edge of image and plot base on it	C_103_1	var = np . zeros ( ( number , width , number ) ) var [ , ] = [ number , number , number ] rgb_img = np . row_stack ( ( var , rgb_img ) )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_2	var = number _ var var [ var > number ] = number var [ var < = number ] = number black_padding = np . zeros ( ( number , width ) ) var = np . row_stack ( ( black_padding , var ) )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_3	var = np . ones ( ( number , number ) , np . uint8 ) closing = cv2 . morphology_ex ( gray_img , cv2 . morph_close , var )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_4	var = cv2 . canny ( closing , number , number )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_5	var = number max_line_gap = number lines = cv2 . hough_lines_p ( edges , number , np . pi / number , number , none , number , number ) all_lines = lines [ number ] for x1 , y1 , x2 , y2 in lines [ number ] cv2 . line ( rgb_img , ( x1 , y1 ) , ( x2 , y2 ) , ( number , number , number ) , number )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_6	var = sorted ( all_lines , key = lambda k ( _ k [ number ] , _ k [ number ] ) ) for x1 , y1 , x2 , y2 in var [ number number ] cv2 . line ( rgb_img , ( x1 , y1 ) , ( x2 , y2 ) , ( number , number , number ) , number )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_7	var = sorted ( all_lines , key = lambda k ( _ k [ number ] ) ) for x1 , y1 , x2 , y2 in var [ number ] cv2 . line ( rgb_img , ( x1 , y1 ) , ( x2 , y2 ) , ( number , number , number ) , number )	0
Q_103	detect outer most_edge of image and plot base on it	C_103_8	var = all_lines_x_sorted [ number number ] + all_lines_y_sorted [ number ]	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_0	in [ number ] arr = np . zeros ( ( number , number ) ) . arr [ number , number ] = number . arr [ number , number ] = number . in [ number ] arr out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	1
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_1	in [ number ] arr1 = np . zeros ( ( arr . shape [ number ] + number , arr . shape [ number ] + number ) , arr . dtype ) in [ number ] arr1 [ number _ number , number _ number ] = arr	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_2	in [ number ] n = np . zeros_like ( arr1 ) in [ number ] z = arr1 in [ number ] n [ number , number ] + = z [ _ number , _ number ] . n [ number , _ number ] + = z [ _ number , number ] . n [ _ number , number ] + = z [ number , _ number ] . n [ _ number , _ number ] + = z [ number , number ] . n [ _ number , ] + = z [ number , ] . n [ number , ] + = z [ _ number , ] . n [ , _ number ] + = z [ , number ] . n [ , number ] + = z [ , _ number ] in [ number ] n + = z in [ number ] n out [ number ] array ( [ [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . , number . , number . ] ] ) in [ number ] n [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_3	in [ number ] idx = np . argwhere ( arr1 ) in [ number ] idx out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_4	in [ number ] n1 = np . zeros_like ( arr1 ) in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . n1 [ slc ] + = arr1 [ tuple ( var ) ] . in [ number ] n1 [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_5	in [ number ] n1 = np . zeros_like ( arr1 ) in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . np . add . at ( n1 , slc , arr1 [ tuple ( var ) ] )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_6	in [ number ] for var in idx . slc = ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) . ii = np . ix_ ( np . r_ [ slc [ number ] ] , np . r_ [ slc [ number ] ] ) . np . add . at ( n1 , ii , arr1 [ tuple ( var ) ] ) . print ( ii ) . . ( array ( [ [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number , number , number ] ] ) ) ( array ( [ [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number , number , number ] ] ) )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_7	[ number , number , number , number , number , number ]	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_8	in [ number ] slc = [ np . mgrid [ ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) ] for var in idx ] in [ number ] slc = tuple ( np . hstack ( slc ) ) in [ number ] n2 = np . zeros_like ( arr1 ) in [ number ] np . add . at ( n2 , slc , number ) in [ number ] n2 [ number _ number , number _ number ] out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_9	in [ number ] slc1 = np . mgrid [ slice ( _ number , number ) , slice ( _ number , number ) ] in [ number ] slc1 out [ number ] array ( [ [ [ _ number , _ number , _ number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ _ number , number , number ] , [ _ number , number , number ] , [ _ number , number , number ] ] ] ) in [ number ] idx out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_10	in [ number ] slc = [ np . mgrid [ ( slice ( var [ number ] _ number , var [ number ] + number ) , slice ( var [ number ] _ number , var [ number ] + number ) ) ] for var in idx ] in [ number ] slc = np . hstack ( slc )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_11	in [ number ] slc2 = idx . t [ , , none , none ] + slc1 [ , none , , ] in [ number ] np . concatenate ( list ( slc2 . transpose ( number , number , number , number ) ) , number ) out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_12	in [ number ] pts = arr1 [ tuple ( idx . t ) ] in [ number ] pts out [ number ] array ( [ number . , number . ] ) in [ number ] pts1 = pts . repeat ( number ) [ , none ] . repeat ( number , axis = number ) in [ number ] pts1 out [ number ] array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] ) in [ number ] np . add . at ( n2 , tuple ( out [ number ] ) , pts1 )	0
Q_104	fast way to add a number to all cell adjacent a row column index in a n_dim sparse numpy array	C_104_13	var = pts . repeat ( number ) [ , none ]	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_0	in [ number ] a = [ number , number , number ] in [ number ] b = np . zeros ( number , dtype = bool ) in [ number ] b [ a ] = true in [ number ] b out [ number ] array ( [ false , true , false , false , false , true , true , false , false , false ] , dtype = bool )	1
Q_105	how to create a boolean array from an array of index in numpy	C_105_1	in [ number ] [ true if var in a else false for var in range ( number ) ] out [ number ] [ false , true , false , false , false , true , true , false , false , false ]	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_2	in [ number ] [ [ true if var in a1 else false for var in range ( number ) ] for a1 in a ] out [ number ] [ [ false , true , false , true , false ] , [ false , false , true , false , true ] ]	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_3	in [ number ] a = [ [ number , number ] , [ number , number ] ] in [ number ] b = np . zeros ( ( len ( a ) , number ) , bool ) in [ number ] b [ [ [ number ] , [ number ] ] , a ] out [ number ] array ( [ [ false , false ] , [ false , false ] ] , dtype = bool ) in [ number ] b [ [ [ number ] , [ number ] ] , a ] = true in [ number ] b out [ number ] array ( [ [ false , true , false , true , false ] , [ false , false , true , false , true ] ] , dtype = bool )	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_4	in [ number ] a = [ [ number , number , number ] , [ number , number ] , [ number ] ] in [ number ] [ [ true if var in a1 else false for var in range ( number ) ] for a1 in a ] out [ number ] [ [ false , true , true , true , false ] , [ false , false , true , false , true ] , [ false , true , false , false , false ] ]	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_5	in [ number ] a0 = np . repeat ( np . arange ( number ) , [ len ( var ) for var in a ] ) in [ number ] a0 out [ number ] array ( [ number , number , number , number , number , number ] ) in [ number ] a1 = np . hstack ( a ) in [ number ] a1 out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_6	in [ number ] np . ravel_multi_index ( ( a0 , a1 ) , ( number , number ) ) out [ number ] array ( [ number , number , number , number , number , number ] , dtype = int32 )	0
Q_105	how to create a boolean array from an array of index in numpy	C_105_7	in [ number ] b = np . zeros ( ( number , number ) , bool ) in [ number ] b . flat [ out [ number ] ] = true in [ number ] b out [ number ] array ( [ [ false , true , true , true , false ] , [ false , false , true , false , true ] , [ false , true , false , false , false ] ] , dtype = bool )	0
Q_106	interpolate polynomial over a finite field	C_106_0	[ ] , [ number ] , [ number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ]	1
Q_106	interpolate polynomial over a finite field	C_106_1	class poly_ring ( ) def _init_ ( self , field ) self . k = field def add ( self , p , q ) s = [ self . k . add ( var , var ) for var , var in itertools . zip_longest ( p [ _ number ] , q [ _ number ] , fillvalue = [ ] ) ] return s [ _ number ] def sub ( self , p , q ) s = [ self . k . sub ( var , var ) for var , var in itertools . zip_longest ( p [ _ number ] , q [ _ number ] , fillvalue = [ ] ) ] return s [ _ number ] def mul ( self , p , q ) if len ( p ) < len ( q ) p , q = q , p s = [ [ ] ] for j , c in enumerate ( q ) s = self . add ( s , [ self . k . mul ( b , c ) for b in p ] + [ [ ] ] * ( len ( q ) _ j _ number ) ) return s	0
Q_106	interpolate polynomial over a finite field	C_106_2	[ [ number ] , k . sub ( [ ] , x_k ) ]	0
Q_106	interpolate polynomial over a finite field	C_106_3	def interp_poly ( x , y , k ) r = poly_ring ( k ) poly = [ [ ] ] for var , var in enumerate ( y ) xe = x [ var ] + x [ var + number ] numer = reduce ( lambda p , q r . mul ( p , q ) , ( [ [ number ] , k . sub ( [ ] , x ) ] for x in xe ) ) denom = reduce ( lambda x , var k . mul ( x , var ) , ( k . sub ( x [ var ] , x ) for x in xe ) ) poly = r . add ( poly , r . mul ( numer , [ k . mul ( var , k . inv ( denom ) ) ] ) ) return poly	0
Q_106	interpolate polynomial over a finite field	C_106_4	var = gf ( number , number ) x = [ [ ] , [ number ] , [ number , number , number ] ]	0
Q_106	interpolate polynomial over a finite field	C_106_5	[ [ number ] , [ number , number , number ] , [ number , number ] ]	0
Q_106	interpolate polynomial over a finite field	C_106_6	def readable ( poly , a , x ) return poly ( sum ( ( sum ( ( var * a * * var for var , var in enumerate ( coef [ _ number ] ) ) , s . zero ) * x * * k for k , coef in enumerate ( poly [ _ number ] ) ) , s . zero ) , x )	0
Q_106	interpolate polynomial over a finite field	C_106_7	var , var = symbols ( string ) print ( readable ( intpoly , var , var ) )	0
Q_106	interpolate polynomial over a finite field	C_106_8	poly ( x * * number + ( a * * number + a + number ) * x + a , x , domain = string )	0
Q_106	interpolate polynomial over a finite field	C_106_9	var = gf ( number , string ) a = var . gen ( ) r = polynomial_ring ( var , string ) points = [ ( number , a ) , ( number , a ^ number ) , ( a ^ number + number , a ^ number ) ] r . lagrange_polynomial ( points )	0
Q_106	interpolate polynomial over a finite field	C_106_10	x ^ number + ( a ^ number + a + number ) * x + a	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_0	in [ number ] np . array ( [ _ ] , dtype = special_type ) out [ number ] array ( [ ( array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , dtype = uint8 ) , number , string , number , number , list ( [ number , number , number , number , number , number , number , number , number , number , number , number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_1	in [ number ] f = h5py . file ( string , string ) in [ number ] db = f . create_dataset ( string , ( number , ) , dtype = special_type ) in [ number ] db [ ] segmentation fault ( core dumped )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_2	in [ number ] f = h5py . file ( string ) in [ number ] db1 = f . create_dataset ( string , ( number , ) , dtype = dt1 ) in [ number ] db2 = f . create_dataset ( string , ( number , ) , dtype = dt2 ) in [ number ] db1 [ ] out [ number ] array ( [ ( string , ) , ( string , ) , ( string , ) , ( string , ) , ( string , ) ] , dtype = [ ( string , string ) ] ) in [ number ] db2 [ ] out [ number ] array ( [ ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_3	in [ number ] db1 [ number ] = ( string , ) in [ number ] db1 [ number ] = ( string , ) in [ number ] db1 [ ] out [ number ] array ( [ ( string , ) , ( string , ) , ( string , ) , ( string , ) , ( string , ) ] , dtype = [ ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_4	in [ number ] db2 [ number ] = ( string , number ) in [ number ] db2 [ number ] = ( string , number ) in [ number ] db2 [ ] out [ number ] array ( [ ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) , ( string , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_5	in [ number ] dt3 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , h5py . special_dtype ( vlen = str ) ) ] ) in [ number ] db3 = f . create_dataset ( string , ( number , ) , dtype = dt3 ) in [ number ] db3 [ ] out [ number ] array ( [ ( string , string ) , ( string , string ) , ( string , string ) ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] db3 [ number ] = ( string , string ) in [ number ] db3 [ number ] = ( string , string ) in [ number ] db3 [ ] out [ number ] array ( [ ( string , string ) , ( string , string ) , ( string , string ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_6	in [ number ] dt4 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] ) in [ number ] dt4 out [ number ] dtype ( [ ( string , string ) , ( string , string ) ] ) in [ number ] db4 = f . create_dataset ( string , ( number , ) , dtype = dt4 ) in [ number ] db4 [ number ] = ( string , np . arange ( number ) ) in [ number ] db4 [ number ] = ( string , np . arange ( number ) ) in [ number ] db4 [ ] out [ number ] array ( [ ( string , array ( [ number , number , number , number , number ] ) ) , ( string , array ( [ number , number , number ] ) ) , ( string , array ( [ ] , dtype = int32 ) ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_7	in [ number ] db4 [ number ] = ( string , [ number , number , number , number ] ) _ attribute_error string object has no attribute string	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_8	in [ number ] db4 [ number ] = ( string , np . ones ( ( number , number ) , int ) ) in [ number ] db4 [ ] out [ number ] array ( [ ( string , array ( [ number , number , number , number , number ] ) ) , ( string , array ( [ number , number , number ] ) ) , ( string , array ( [ number , number ] ) ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_9	in [ number ] dt1 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = str ) ) , ( string , int ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] )	0
Q_107	store tuple contain multidimensional numpy array and tagint _d list to hdf5	C_107_10	in [ number ] dt1 = np . dtype ( [ ( string , h5py . special_dtype ( vlen = np . uint8 ) ) , ( string , int ) , ( string , h5py . special_dtype ( vlen = np . int ) ) ] )	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_0	data number number number number number number number number number number number number number number number number number number number number number	1
Q_108	subtract from each cell in panda dataframe base on value	C_108_1	var = data . loc [ , number ] . between ( number , number , inclusive = true )	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_2	var = data . loc [ , number ] . ge ( number ) data . loc [ , number ] . le ( number )	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_3	var = data . loc [ , number ] . gt ( number )	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_4	data . loc [ m1 , number ] _ = number data . loc [ m2 , number ] _ = number	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_5	data number number number number number number number number number number number number number number number number number number number number number	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_6	var = data . ge ( number ) data . le ( number ) m2 = data . gt ( number ) data . loc [ var ] _ = number data . loc [ m2 ] _ = number	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_7	var = data . loc [ , number ] data . loc [ , number ] = np . where ( m1 , var _ number , np . where ( m2 , var _ number , var ) )	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_8	data number number number number number number number number number number number number number number number number number number number number number	0
Q_108	subtract from each cell in panda dataframe base on value	C_108_9	data [ ] = np . where ( m1 , data _ number , np . where ( m2 , data _ number , data ) )	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_0	import pandas as pd df = pd . data_frame ( { string [ number , number , number , number , number , number , number , number , number , number ] , string [ string , string , string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string , string , string ] } ) df [ string ] = pd . to_datetime ( df [ string ] ) df = df . set_index ( string ) df = df . asfreq ( string ) df = df . reset_index ( ) df [ string ] = ( pd . isnull ( df [ string ] ) . astype ( int ) . diff ( ) = number ) . cumsum ( ) result = df . groupby ( string ) [ string ] . agg ( [ string , string , string ] ) types = pd . categorical ( [ string , string ] ) result [ string ] = types [ result . index number ]	1
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_1	first last count type group number number _ number number _ number number number number number number _ number number _ number number number number number number number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number missed number number _ number number _ number number number number number number number _ number number _ number number number number number number number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number missed number number _ number number _ number number number number number number number _ number number _ number number number number number number received number number _ number number _ number number number number number number _ number number _ number number number number number number missed number number _ number number _ number number number number number number _ number number _ number number number number number number received	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_2	var = var . set_index ( string ) var = var . asfreq ( string ) var = var . reset_index ( )	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_3	df [ string ] = ( pd . isnull ( df [ string ] ) . astype ( int ) . diff ( ) = number ) . cumsum ( )	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_4	var = df . groupby ( string ) [ string ] . agg ( [ string , string , string ] )	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_5	var = pd . categorical ( [ string , string ] ) result [ string ] = var [ result . index number ]	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_6	import pandas as pd df = pd . data_frame ( { string [ number , number , number , number , number , number , number , number , number , number ] , string [ string , string , string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string , string , string ] } ) df [ string ] = pd . to_datetime ( df [ string ] ) df = df . sort_values ( by = string ) df = df . set_index ( string ) freqmap = { number string , number string } df = df . groupby ( string , group_keys = false ) . apply ( lambda grp grp . asfreq ( freqmap [ grp [ string ] [ number ] ] ) ) df = df . reset_index ( level = string ) df [ string ] = ( pd . isnull ( df [ string ] ) . astype ( int ) . diff ( ) = number ) . cumsum ( ) grouped = df . groupby ( string ) result = grouped [ string ] . agg ( [ string , string , string ] ) result [ string ] = grouped [ string ] . agg ( string ) types = pd . categorical ( [ string , string ] ) result [ string ] = types [ result . index number ]	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_7	first last count id type group number number _ number number _ number number number number number number _ number number _ number number number number number number number number . number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number na_n missed number number _ number number _ number number number number number number number _ number number _ number number number number number number number number . number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number na_n missed number number _ number number _ number number number number number number number _ number number _ number number number number number number number number . number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number na_n missed number number _ number number _ number number number number number number _ number number _ number number number number number number number . number received number number _ number number _ number number number number number number _ number number _ number number number number number number na_n missed number number _ number number _ number number number number number number _ number number _ number number number number number number number . number received number number _ number number _ number number number number number number _ number number _ number number number number number number na_n missed number number _ number number _ number number number number number number _ number number _ number number number number number number number . number received	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_8	result [ string ] = result [ string ] . ffill ( )	0
Q_109	python panda _ get attribute associate with consecutive datetime	C_109_9	first last count id type group number number _ number number _ number number number number number number _ number number _ number number number number number number number number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number number missed number number _ number number _ number number number number number number number _ number number _ number number number number number number number number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number number missed number number _ number number _ number number number number number number number _ number number _ number number number number number number number number received number number _ number number _ number number number number number number number _ number number _ number number number number number number number number missed number number _ number number _ number number number number number number _ number number _ number number number number number number number received number number _ number number _ number number number number number number _ number number _ number number number number number number number missed number number _ number number _ number number number number number number _ number number _ number number number number number number number received number number _ number number _ number number number number number number _ number number _ number number number number number number number missed number number _ number number _ number number number number number number _ number number _ number number number number number number number received	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_0	var = number kernel = np . ones ( ( var , var ) )	1
Q_110	sum of the cell around a single cell in a matrix with python	C_110_1	array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] , [ number . , number . , number . ] ] )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_2	var = signal . convolve ( matrix , kernel , method = string ) . astype ( int )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_3	array ( [ [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_4	var = result [ ( size _ number ) / / number _ ( size _ number ) / / number , ( size _ number ) / / number _ ( size _ number ) / / number ]	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_5	array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_6	from itertools import product def convolution ( matrix , size ) if size number = number value_error ( string ) h , w = ( len ( matrix ) , max ( len ( var ) for var in matrix ) , )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_7	np . where ( matrix = number , result_trimmed , number )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_8	array ( [ [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number ] ] )	0
Q_110	sum of the cell around a single cell in a matrix with python	C_110_9	. for var , var in product ( range ( w ) , range ( h ) ) if matrix [ var ] [ var ] = = number continue .	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_0	import numpy as np import pandas as pd import string df = pd . data_frame ( data = { string np . random . randint ( number , number , number ) , string np . random . randint ( number , number , number ) , string np . random . choice ( list ( string . ascii_letters ) , number ) } , columns = [ string , string , string ] )	1
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_1	annual year county_name number number number s number number number e number number number e number number number c number number number y	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_2	df [ df [ string ] = = number ]	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_3	df [ df [ string ] = = number ] . groupby ( string )	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_4	df [ df [ string ] = = number ] . groupby ( string ) [ string ]	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_5	df [ df [ string ] = = number ] . groupby ( string ) [ string ] . sum ( )	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_6	df [ df [ string ] = = number ] . groupby ( string ) [ string ] . sum ( ) . sort_values ( ascending = false )	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_7	df [ df [ string ] = = number ] . groupby ( string ) [ string ] . sum ( ) . sort_values ( ascending = false ) . head ( number )	0
Q_111	how to use panda to pull out the county with the large amount of water use in a give year	C_111_8	county_name q number y number r number f number a number a number s number i number t number u number	0
Q_112	convert numpy of string to numpy character python	C_112_0	var = np . array ( list ( string ) ) var array ( [ string , string , string , string ] , dtype = string )	1
Q_112	convert numpy of string to numpy character python	C_112_1	var = alphabet . view ( np . int32 ) var array ( [ number , number , number , number ] , dtype = int32 )	0
Q_112	convert numpy of string to numpy character python	C_112_2	var = np . zeros ( ( alph_as_num . max ( ) + number ) , dtype = string ) var [ alph_as_num ] = [ b string [ var var + number ] for var in range ( number ) ]	0
Q_112	convert numpy of string to numpy character python	C_112_3	var = np . zeros ( ( alph_as_num . max ( ) + number ) , dtype = np . uint8 ) var [ alph_as_num ] = number < < np . arange ( number )	0
Q_112	convert numpy of string to numpy character python	C_112_4	var = np . zeros ( ( alph_as_num . max ( ) + number , number ) , dtype = np . uint8 ) var [ alph_as_num [ _ number ] ] = np . identity ( number )	0
Q_112	convert numpy of string to numpy character python	C_112_5	seq array ( [ string ] , dtype = string )	0
Q_112	convert numpy of string to numpy character python	C_112_6	lookup_1 [ seq . view ( np . int32 ) ] . view ( string ) array ( [ b string ] , dtype = string )	0
Q_112	convert numpy of string to numpy character python	C_112_7	lookup_2 [ seq . view ( np . int32 ) ] array ( [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] , dtype = uint8 )	0
Q_112	convert numpy of string to numpy character python	C_112_8	seq array ( [ [ string ] , [ string ] ] , dtype = string ) lookup_3 [ seq . view ( np . int32 ) ] . reshape ( len ( seq ) , _ number ) array ( [ [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] , [ number , number , number , number , number , number , number , number , number , number , number , number , number , number , number , number ] ] , dtype = uint8 )	0
Q_113	flatten an array of tuples of array	C_113_0	in [ number ] dt = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] in [ number ] arr = np . zeros ( number , dt ) in [ number ] arr out [ number ] array ( [ ( number . , number , number , number ) , ( number . , number , number , number ) , ( number . , number , number , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	1
Q_113	flatten an array of tuples of array	C_113_1	in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr out [ number ] array ( [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_113	flatten an array of tuples of array	C_113_2	in [ number ] arr . tolist ( ) out [ number ] [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) ]	0
Q_113	flatten an array of tuples of array	C_113_3	np . array ( arr . tolist ( ) )	0
Q_113	flatten an array of tuples of array	C_113_4	in [ number ] np . array ( _ ) value_error setting an array element with a sequence .	0
Q_113	flatten an array of tuples of array	C_113_5	in [ number ] np . array ( arr . tolist ( ) , object ) out [ number ] array ( [ [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] , [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] , [ number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ] ] , dtype = object )	0
Q_113	flatten an array of tuples of array	C_113_6	in [ number ] arr [ string ] . astype ( float ) out [ number ] array ( [ number . number number , number . number number , number . number number ] ) in [ number ] arr [ string ] [ ] = _ in [ number ] arr out [ number ] array ( [ ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) , ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) , ( number . number , number . number number , array ( [ number . number , number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_113	flatten an array of tuples of array	C_113_7	in [ number ] arr [ string ] out [ number ] array ( [ array ( [ number . number , number . number ] ) , array ( [ number . number , number . number ] ) , array ( [ number . number , number . number ] ) ] , dtype = object ) in [ number ] np . stack ( arr [ string ] )	0
Q_113	flatten an array of tuples of array	C_113_8	in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number ] ) , np . array ( [ number . number , number . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number , . number ] ) , np . array ( [ number . number , number . number , . number ] ) , number ) in [ number ] arr [ number ] = ( number . number , np . array ( [ . number number , . number ] ) , np . array ( [ number . number ] ) , number ) in [ number ] arr out [ number ] array ( [ ( number . number , array ( [ number . number number ] ) , array ( [ number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number , number . number ] ) , array ( [ number . number , number . number , number . number ] ) , number ) , ( number . number , array ( [ number . number number , number . number ] ) , array ( [ number . number ] ) , number ) ] , dtype = [ ( string , string ) , ( string , string ) , ( string , string ) , ( string , string ) ] )	0
Q_113	flatten an array of tuples of array	C_113_9	in [ number ] def foo ( item ) . try . return item [ number ] . except . return item .	0
Q_113	flatten an array of tuples of array	C_113_10	in [ number ] [ [ foo ( var ) for var in a ] for a in arr ] out [ number ] [ [ number . number , number . number number , number . number , number ] , [ number . number , number . number number , number . number , number ] , [ number . number , number . number number , number . number , number ] ]	0
Q_113	flatten an array of tuples of array	C_113_11	in [ number ] np . array ( _ ) out [ number ] array ( [ [ number . number , number . number number , number . number , number . ] , [ number . number , number . number number , number . number , number . ] , [ number . number , number . number number , number . number , number . ] ] )	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_0	in [ number ] alist = [ [ number , number ] , [ number , number ] , [ number , number ] ] in [ number ] arr = np . array ( alist ) in [ number ] arr out [ number ] array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] )	1
Q_114	list of list to list of tuples without loop or list comprehension	C_114_1	in [ number ] arr . tolist ( ) out [ number ] [ [ number , number ] , [ number , number ] , [ number , number ] ]	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_2	in [ number ] [ tuple ( var ) for var in arr . tolist ( ) ] out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ] in [ number ] [ tuple ( var ) for var in alist ] out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_3	in [ number ] arr1 = np . array ( [ tuple ( var ) for var in alist ] , dtype = string ) in [ number ] arr1 out [ number ] array ( [ ( number , number ) , ( number , number ) , ( number , number ) ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] arr1 . tolist ( ) out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_4	in [ number ] arr . view ( string ) out [ number ] array ( [ [ ( number , number ) , ( number , number ) ] , [ ( number , number ) , ( number , number ) ] , [ ( number , number ) , ( number , number ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_5	np . array ( [ tuple ( var ) for var in arr . tolist ( ) ] , string )	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_6	in [ number ] dict ( zip ( alist , [ string , string , string ] ) ) . type_error unhashable type string in [ number ] dict ( zip ( [ tuple ( var ) for var in alist ] , [ string , string , string ] ) ) out [ number ] { ( number , number ) string , ( number , number ) string , ( number , number ) string }	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_7	in [ number ] arr . dtype out [ number ] dtype ( string ) in [ number ] arr . view ( string ) out [ number ] array ( [ [ ( number , number ) ] , [ ( number , number ) ] , [ ( number , number ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] arr . view ( string ) . tolist ( ) out [ number ] [ [ ( number , number ) ] , [ ( number , number ) ] , [ ( number , number ) ] ]	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_8	in [ number ] arr . view ( string ) . reshape ( number ) . tolist ( ) out [ number ] [ ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_9	in [ number ] timeit arr . view ( string ) . reshape ( number ) . tolist ( ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit [ tuple ( var ) for var in arr ] number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_114	list of list to list of tuples without loop or list comprehension	C_114_10	in [ number ] timeit dict ( zip ( [ tuple ( var ) for var in alist ] , [ string , string , string ] ) ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each ) in [ number ] timeit dict ( zip ( out [ number ] , [ string , string , string ] ) ) number . number s number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_0	mylist [ [ number , number , number . number , number , false ] , [ number , number , number . number , number , false ] , [ number , number , number . number , number , false ] , [ number , number , number . number , number , false ] , [ number , number , number . number , number , false ] , [ number , number , number . number , number , false ] , [ number , number , number . number , number , true ] , [ number , number , number . number , number , true ] , [ number , number , number . number , number , true ] , [ number , number , number . number , number , true ] , [ number , number , number . number , number , false ] ]	1
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_1	[ number , number , number , number , number , number , number , number , number , number , number ]	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_2	[ false , false , false , false , false , false , true , true , true , true , false ]	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_3	import numpy as np myarray = np . array ( mylist ) myarray array ( [ [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] , [ number . , number . , number . number , number . , number . ] ] )	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_4	myarray [ , number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) myarray [ , number ] array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] )	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_5	var = np . array ( mylist , dtype = string )	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_6	myarray array ( [ [ ( number , number , number . , number , true ) , ( number , number , number . , number , true ) , ( number , number , number . number , number , true ) , ( number , number , number . , number , true ) , ( number , number , number . , number , false ) ] , [ ( number , number , number . , number , true ) , ( number , number , number . , number , true ) , ( number , number , number . number , number , true ) , ( number , number , number . , number , false ) , ( number , number , number . , number , false ) ] , [ ( number , number , number . , number , true ) , etc	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_7	var = list ( zip ( * mylist ) ) var [ number ]	0
Q_115	python change individual data type within a matrix array _ eg int float binary	C_115_8	var = np . array ( mylist2 [ number ] ) fifthcolarray = np . array ( mylist2 [ number ] ) var array ( [ number , number , number , number , number , number , number , number , number , number , number ] ) fifthcolarray array ( [ false , false , false , false , false , false , true , true , true , true , false ] )	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_0	var = [ [ var ] + [ var ] for var in arr ] var = [ var for l in var for var in l ]	1
Q_116	create a dub duplication item in a list comprehension in python	C_116_1	[ arr [ arr . index ( x ) ] ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_2	var = [ [ var ] * number for var in arr ] var = [ var for l in var for var in l ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_3	var = [ [ var , var ] for var in arr ] var = [ var for l in var for var in l ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_4	var = [ [ x for var in range ( number ) ] for x in arr ] var = [ x for l in var for x in l ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_5	var = [ var for var in arr for var in range ( number ) ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_6	[ list ( var ) for var in zip ( arr , arr ) ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_7	var = zip ( arr , arr ) var = [ x for var in var for x in var ]	0
Q_116	create a dub duplication item in a list comprehension in python	C_116_8	[ var for var in zip ( arr , arr ) for var in var ]	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_0	import pandas as pd from io import string_io y = string string string df = pd . read_csv ( string_io ( y ) , index_col = string )	1
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_1	df . index = pd . to_datetime ( df . index )	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_2	var = df . resample ( string ) . mean ( )	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_3	a b date number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number na_n na_n number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number number . number number . number number _ number number _ number number number number number number number . number number . number number _ number number _ number number number number number number number . number number . number number _ number number _ number number number number number number number . number number . number	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_4	new [ string ] = new . t . isnull ( ) . all ( ) . cumsum ( )	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_5	a b group_no date number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number na_n na_n number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number number . number number . number number number _ number number _ number number number number number number number . number number . number number number _ number number _ number number number number number number number . number number . number number number _ number number _ number number number number number number number . number number . number number	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_6	new [ string ] = new . groupby ( string ) . transform ( string ) . b	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_7	a b group_no bmean date number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number na_n na_n number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number . number number . number number number . number number _ number number _ number number number number number number number . number number . number number number . number	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_8	new [ string ] = new [ string ] + new [ string ] + new [ string ] new . drop ( [ string , string ] , axis = number , inplace = true )	0
Q_117	how to find out discontinuous date time index how to take average over continuous index	C_117_9	a b c date number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number na_n na_n na_n number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number number . number number . number number . number number _ number number _ number number number number number number number . number number . number number . number number _ number number _ number number number number number number number . number number . number number . number number _ number number _ number number number number number number number . number number . number number . number	0
Q_118	dynamic indexing with specific sum length in panda	C_118_0	var = pd . data_frame ( { string [ number , number , number , number , number , number , number , number ] } , index = range ( number , number ) )	1
Q_118	dynamic indexing with specific sum length in panda	C_118_1	var = ( df . v1 . cumsum ( ) / number ) . astype ( int ) df [ string ] = ( var _ var . shift ( ) ) . fillna ( var ) . astype ( int )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_2	var = ( df [ string ] . apply ( lambda x pd . series ( range ( x ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) df = df . join ( var ) . dropna ( ) . drop ( [ string , number ] , number )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_3	var = pd . data_frame ( { string [ number , number , number , number ] } )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_4	v1 number number number number number number number number number number	0
Q_118	dynamic indexing with specific sum length in panda	C_118_5	v1 number number number number number number number number number number	0
Q_118	dynamic indexing with specific sum length in panda	C_118_6	var = var . join ( var [ string ] . apply ( lambda x pd . series ( range ( x / number ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) . drop ( number , number )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_7	def nb_group_under ( v1 ) global nb_group if v1 < number return nb_group else nb_group + = number nb_group = number df [ string ] = df [ string ] . apply ( nb_group_under )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_8	df [ string ] = ( df . groupby ( string ) . v1 . cumsum ( ) / number ) . astype ( int ) df [ string ] = df . sum_under50 _ ( df . groupby ( string ) . sum_under50 . shift ( ) . fillna ( df . sum_under50 ) ) df = ( df [ ( df [ string ] > number ) ( df [ string ] > = number ) ] . drop ( [ string , string ] , number ) )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_9	def nb_lim_reached ( v1 , lim_v1 ) global partial_sum if v1 > = lim_v1 partial_sum = number return pd . np . floor ( v1 / lim_v1 ) else partial_sum + = v1 if partial_sum > = lim_v1 partial_sum _ = lim_v1 return number else return number	0
Q_118	dynamic indexing with specific sum length in panda	C_118_10	var = number partial_sum = number df [ string ] = df [ string ] . apply ( nb_lim_reached , args = ( var , ) ) . astype ( int )	0
Q_118	dynamic indexing with specific sum length in panda	C_118_11	var = ( var . join ( var [ string ] . apply ( lambda nb pd . series ( range ( nb ) ) ) . stack ( ) . reset_index ( level = number ) . drop ( string , number ) ) . dropna ( ) . drop ( [ string , number ] , number ) )	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_0	def send_to_api ( param1 , param2 , * args ) print ( param1 , param2 , args )	1
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_1	send_to_api ( number , number , { string number , string number } ) . number number ( { string number , string number } , )	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_2	def send_to_api ( user_id , event_type , * args ) event_args = { string user_id , string event_type , string args [ number ] }	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_3	def send_to_api ( user_id , event_type , event_properties , * args ) event_args = { string user_id , string event_type , string event_properties }	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_4	def send_to_api ( arg1 , * args , * * kwargs ) print ( arg1 , args , kwargs )	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_5	send_to_api ( number , number , key1 = number , key2 = number )	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_6	number ( number , ) { string number , string number }	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_7	send_to_api ( number , number , * * { string number , string number } )	0
Q_119	how to pass a dict as a positional argument not a keyword argument	C_119_8	number ( number , ) { string number , string number }	0
Q_120	permute string of kronecker product	C_120_0	from functools import reduce a = np . random . randint ( number , number , ( number , number ) ) b = np . random . randint ( number , number , ( number , number ) ) i = np . identity ( number , int ) g = reduce ( np . kron , ( a , b , i , i ) ) h = reduce ( np . kron , ( i , a , i , b ) ) ( g . reshape ( * number * ( number , ) ) . transpose ( number , number , number , number , number , number , number , number ) . reshape ( number * * number , number * * number ) = = h ) . all ( ) true	1
Q_120	permute string of kronecker product	C_120_1	var , var = np . arange ( number , number ) , np . array ( list ( string ) , dtype = object ) np . kron ( var , var ) array ( [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_2	np . kron ( a , b ) . reshape ( number , number ) array ( [ [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] ] , dtype = object ) np . outer ( a , b ) array ( [ [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_3	np . kron ( b , a ) . reshape ( number , number ) array ( [ [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_4	var , var = a . reshape ( number , number ) , b . reshape ( number , number ) np . kron ( var , var ) array ( [ [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] , [ string , string , string , string ] ] , dtype = object ) np . kron ( var , var ) . reshape ( number , number , number , number ) array ( [ [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] , [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_5	np . multiply . outer ( a2 , b2 ) array ( [ [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] , [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_6	np . multiply . outer ( a2 , b2 ) . swapaxes ( number , number ) array ( [ [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] , [ [ [ string , string ] , [ string , string ] ] , [ [ string , string ] , [ string , string ] ] ] ] , dtype = object )	0
Q_120	permute string of kronecker product	C_120_7	np . all ( np . kron ( a2 , b2 ) . reshape ( number , number , number , number ) . transpose ( number , number , number , number ) . reshape ( number , number ) = = np . kron ( b2 , a2 ) ) true	0
Q_121	panda how to delete row contain require string	C_121_0	var = var [ ( var = string ) . all ( axis = number ) ]	1
Q_121	panda how to delete row contain require string	C_121_1	print ( ( df = string ) ) a b c number true true true number true true true number true true false number true false true	0
Q_121	panda how to delete row contain require string	C_121_2	print ( ( df = string ) . all ( axis = number ) ) number true number true number false number false dtype bool	0
Q_121	panda how to delete row contain require string	C_121_3	var = var [ ( var = = string ) . any ( axis = number ) ]	0
Q_121	panda how to delete row contain require string	C_121_4	print ( ( df = = string ) ) a b c number false false false number false false false number false false true number false true false	0
Q_121	panda how to delete row contain require string	C_121_5	print ( ( df = = string ) . any ( axis = number ) ) number false number false number true number true dtype bool	0
Q_121	panda how to delete row contain require string	C_121_6	print ( ( df = = string ) . any ( axis = number ) ) number true number true number false number false dtype bool	0
Q_121	panda how to delete row contain require string	C_121_7	var = var [ var . apply ( lambda x x . astype ( str ) . str . contains ( string ) ) . any ( axis = number ) ]	0
Q_121	panda how to delete row contain require string	C_121_8	var = var [ var . stack ( ) . astype ( str ) . str . contains ( string ) . unstack ( ) . any ( axis = number ) ]	0
Q_121	panda how to delete row contain require string	C_121_9	print ( df ) a b c number number a x number w g n	0
Q_122	fill a new column base on multiple criterion	C_122_0	var = var . set_index ( string ) var [ string ] = var . mask ( var . apply ( lambda x x . str . contains ( string ) ) ) . ffill ( axis = number ) . iloc [ , _ number ]	1
Q_122	fill a new column base on multiple criterion	C_122_1	var = df . filter ( regex = string ) . columns	0
Q_122	fill a new column base on multiple criterion	C_122_2	print ( df ) dt . t1 dt . t2 dt . t3 dt . new city ny us non eu non asia us rome non us eu non asia eu sf us non eu non asia us hk non us non eu asia asia	0
Q_122	fill a new column base on multiple criterion	C_122_3	var = var . set_index ( string ) print ( var . apply ( lambda x x . str . contains ( string ) ) ) dt . t1 dt . t2 dt . t3 city ny false true true rome true false true sf false true true hk true true false	0
Q_122	fill a new column base on multiple criterion	C_122_4	print ( df . mask ( df . apply ( lambda x x . str . contains ( string ) ) ) ) dt . t1 dt . t2 dt . t3 city ny us na_n na_n rome na_n eu na_n sf us na_n na_n hk na_n na_n asia	0
Q_122	fill a new column base on multiple criterion	C_122_5	print ( df . mask ( df . apply ( lambda x x . str . contains ( string ) ) ) . ffill ( axis = number ) ) dt . t1 dt . t2 dt . t3 city ny us us us rome na_n eu eu sf us us us hk na_n na_n asia	0
Q_122	fill a new column base on multiple criterion	C_122_6	print ( df . mask ( df . apply ( lambda x x . str . contains ( string ) ) ) . ffill ( axis = number ) . iloc [ , _ number ] ) city ny us rome eu sf us hk asia name dt . t3 , dtype object	0
Q_122	fill a new column base on multiple criterion	C_122_7	var = df [ string ] = = string m2 = df [ string ] = = string m3 = df [ string ] = = string df [ string ] = np . select ( [ var , m2 , m3 ] , [ string , string , string ] , default = none )	0
Q_122	fill a new column base on multiple criterion	C_122_8	df [ string ] = np . where ( m1 , string , np . where ( m2 , string , np . where ( m3 , string , none ) ) )	0
Q_122	fill a new column base on multiple criterion	C_122_9	print ( df ) city dt . t1 dt . t2 dt . t3 dt . new number ny us non eu non asia us number rome non us eu non asia eu number sf us non eu non asia us number hk non us non eu asia asia	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_0	var = [ [ number , number ] ] * len ( n_a )	1
Q_123	i want to check the occurrence of a particular item in all other item	C_123_1	var = [ ] for var in range ( len ( n_a ) ) var . append ( [ number , number ] )	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_2	var = [ [ number , number ] for var in n_a ]	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_3	var = [ string , string , string , string ] occ_arr = [ [ number , number ] for var in var ] for i in range ( len ( var ) ) count = number for j in range ( len ( var ) ) if var [ i ] in var [ j ] count + = number occ_arr [ i ] [ number ] = var [ i ] occ_arr [ i ] [ number ] = count print ( occ_arr ) print ( occ_arr )	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_4	var = [ [ number , number ] ] * len ( n_a )	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_5	var = [ [ number , number ] ] * number for var in var . print ( id ( var ) ) number number number number	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_6	[ [ string , number ] , [ string , number ] , [ string , number ] , [ string , number ] ]	0
Q_123	i want to check the occurrence of a particular item in all other item	C_123_7	[ [ string , number ] , [ string , number ] , [ string , number ] , [ string , number ] ]	0
Q_124	newton method for transcendental equation	C_124_0	f ( x ) = sin ( x ) + b * x * cos ( x )	1
Q_124	newton method for transcendental equation	C_124_1	f ( x ) = sin ( x ) / x + b * cos ( x )	0
Q_124	newton method for transcendental equation	C_124_2	( var + number . number ) * pi for var in range ( n )	0
Q_124	newton method for transcendental equation	C_124_3	x + arctan ( b * x ) = k * pi	0
Q_124	newton method for transcendental equation	C_124_4	var = g ( k * pi ) = k * pi _ arctan ( b * k * pi )	0
Q_124	newton method for transcendental equation	C_124_5	tan ( x ) = x / ( number _ ( number * x / pi ) ^ number )	0
Q_124	newton method for transcendental equation	C_124_6	var = pi / number * sqrt ( number + number / b )	0
Q_124	newton method for transcendental equation	C_124_7	from math import tan , cos , pi , sqrt , sin , atan def f ( x , b ) return sin ( x ) / x + b * cos ( x ) def f1 ( x , b ) return cos ( x ) / x _ ( b + x * * _ number ) * sin ( x ) e = number e _ number def newtons_method ( x0 , f , f1 , e ) x0 = float ( x0 ) while true x1 = x0 _ ( f ( x0 , b ) / f1 ( x0 , b ) ) if abs ( x1 _ x0 ) < e return x1 x0 = x1 result = [ ] n = int ( input ( string ) ) b = float ( input ( string ) ) for var in range ( n ) k = var if b > = _ number k = k + number x0 = pi / number * sqrt ( number + number / b ) if k = = number else k * pi _ atan ( b * k * pi ) result . append ( newtons_method ( x0 , f , f1 , e ) ) lambda_result = sorted ( list ( set ( result ) ) ) print ( len ( result ) , len ( lambda_result ) )	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_0	var = { string [ number , number , number , number , number , number , number , number ] , string [ number , number , number , number , number , number , number , number ] , string [ number , number , number , number , number , number , number , number ] } df = pd . data_frame ( data = var )	1
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_1	var = df [ df . duplicated ( subset = [ string , string ] , keep = false ) ]	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_2	var = dups . groupby ( [ string , string ] )	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_3	df [ string ] = gr . ngroup ( )	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_4	var = df [ df [ string ] = = number ] . index [ number ] ind2 = df [ df [ string ] = = number ] . index [ _ number ]	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_5	var = df [ ( df . index > ind1 ) ( df . index < = ind2 ) ] . index	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_6	df . drop ( ind_to_del , inplace = true )	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_7	df . drop ( string , axis = number , inplace = true )	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_8	id x y number number number number number number number number number number number number number number number number	0
Q_125	panda dataframe delete row in between tagint row that have same value in some column	C_125_9	import pandas as pd d = { string [ number , number , number , number , number , number , number , number ] , string [ number , number , number , number , number , number , number , number ] , string [ number , number , number , number , number , number , number , number ] } df = pd . data_frame ( data = d ) dups = df [ df . duplicated ( subset = [ string , string ] , keep = false ) ] gr = dups . groupby ( [ string , string ] ) df [ string ] = gr . ngroup ( ) ind1 = df [ df [ string ] = = number ] . index [ number ] ind2 = df [ df [ string ] = = number ] . index [ _ number ] ind_to_del = df [ ( df . index > ind1 ) ( df . index < = ind2 ) ] . index df . drop ( ind_to_del , inplace = true ) df . drop ( string , axis = number , inplace = true ) print ( df )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_0	^ { usd } ? ( d * ( d . ? . d { number , number } ) )	1
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_1	^ ( usd ) ? ( d * ( d . ? . d { number , number } ) )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_2	( d . ? . d { number , number } )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_3	( d . ? . d { number , number } ) *	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_4	^ ( usd ) ? ( d * ( d . ? . d { number , number } ) * )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_5	^ ( usd ) ? ( d * ( d , ? . d { number , number } ) * )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_6	^ ( usd ) ? ( d * ? ( d , ? . d { number , number } ) * )	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_7	( usd ? ) ? ( d + ) ( , d + ) * ( . d + ) ?	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_8	( usd ? ) ? ( d { number , number } ) ( , d { number } ) * ( . d { number , number } ) ?	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_9	( ? usd ? ) ? ( ? d { number , number } ) ( ? , d { number } ) * ( ? . d { number , number } ) ?	0
Q_126	how to write a regex on python to find value between tagint and tagint 000 tagint 000	C_126_10	( ? usd ? ) ? ( ? d { number , number } ) ( ? , d { number } ) * ( ? [ . , ] d { number , number } ) ?	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_0	var = tfidf_test . select ( col ( string ) . alias ( string ) ) . limit ( number ) tf_idf_fr . cross_join ( var )	1
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_1	from pyspark . ml . linalg import dense_vector , sparse_vector , vector , vectors , vector_udt from pyspark . sql . functions import udf def vector_lit ( v ) assert isinstance ( v , vector ) return udf ( lambda v , vector_udt ( ) ) ( )	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_2	spark . range ( number ) . select ( vector_lit ( vectors . sparse ( number , [ number , number ] , [ _ number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_3	+ _ + ref + _ + ( number , [ number , number ] , [ _ number . number , number . number ] ) + _ +	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_4	spark . range ( number ) . select ( vector_lit ( vectors . dense ( [ number , number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_5	+ _ + ref + _ + [ number . number , number . number , number . number ] + _ +	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_6	import json from pyspark . sql . functions import from_json , lit from pyspark . sql . types import struct_type , struct_field def as_column ( v ) assert isinstance ( v , vector ) if isinstance ( v , dense_vector ) j = lit ( json . dumps ( { string { string number , string v . values . tolist ( ) } } ) ) else j = lit ( json . dumps ( { string { string number , string v . size , string v . indices . tolist ( ) , string v . values . tolist ( ) } } ) ) return from_json ( j , struct_type ( [ struct_field ( string , vector_udt ( ) ) ] ) ) [ string ]	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_7	spark . range ( number ) . select ( as_column ( vectors . sparse ( number , [ number , number ] , [ _ number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_8	+ _ + ref + _ + ( number , [ number , number ] , [ _ number . number , number . number ] ) + _ +	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_9	spark . range ( number ) . select ( as_column ( vectors . dense ( [ number , number , number ] ) ) . alias ( string ) ) . show ( )	0
Q_127	py_spark insert a constant sparse_vector in a dataframe column	C_127_10	+ _ + ref + _ + [ number . number , number . number , number . number ] + _ +	0
Q_128	bayesian average in a dataframe	C_128_0	var = { string [ string , string , string , string , string ] , string [ number . number number , number . number , number . number , np . nan , number . number ] , string [ np . nan , number . number , number . number , np . nan , number . number ] , string [ number . number , number . number , np . nan , np . nan , number . number ] } df = pd . data_frame ( data = var )	1
Q_128	bayesian average in a dataframe	C_128_1	bar user1 user2 user3 number snickers number . number number na_n number . number number mars bars number . number number . number number . number number milky way number . number number . number na_n number almond joy na_n na_n na_n number babe ruth number . number number . number number . number	0
Q_128	bayesian average in a dataframe	C_128_2	var = [ ] for var in df . columns . values if string in var var . append ( var )	0
Q_128	bayesian average in a dataframe	C_128_3	df [ string ] = df [ user_cols ] . count ( axis = number )	0
Q_128	bayesian average in a dataframe	C_128_4	var = np . mean ( df [ string ] )	0
Q_128	bayesian average in a dataframe	C_128_5	df [ string ] = df [ string ] / ( df [ string ] + m )	0
Q_128	bayesian average in a dataframe	C_128_6	df [ string ] = np . mean ( df [ user_cols ] , axis = number )	0
Q_128	bayesian average in a dataframe	C_128_7	var = np . nanmean ( df [ user_cols ] . values . flatten ( ) )	0
Q_128	bayesian average in a dataframe	C_128_8	df [ string ] = df [ string ] * df [ string ] + ( number _ df [ string ] ) * c	0
Q_128	bayesian average in a dataframe	C_128_9	bar user1 user2 user3 v w r s number snickers number . number number na_n number . number number number . number number . number number . number number mars bars number . number number . number number . number number number . number number . number number . number number milky way number . number number . number na_n number number . number number . number number . number number almond joy na_n na_n na_n number number . number na_n na_n number babe ruth number . number number . number number . number number number . number number . number number . number	0
Q_128	bayesian average in a dataframe	C_128_10	var = var . drop ( [ string , string , string ] , axis = number )	0
Q_128	bayesian average in a dataframe	C_128_11	bar user1 user2 user3 s number snickers number . number number na_n number . number number . number number mars bars number . number number . number number . number number . number number milky way number . number number . number na_n number . number number almond joy na_n na_n na_n na_n number babe ruth number . number number . number number . number number . number	0
Q_129	constrain logic in linear programming	C_129_0	t t + number t + number number number number	1
Q_129	constrain logic in linear programming	C_129_1	x ( t ) _ x ( t + number ) + x ( t + number ) < = number	0
Q_129	constrain logic in linear programming	C_129_2	x ( t ) x ( t + number ) x ( t + number ) lhs number number number number number number number number number number number _ number number number number number number number number number number number number number < _ to be excluded number number number number number number number number	0
Q_129	constrain logic in linear programming	C_129_3	x ( t ) _ x ( t + number ) + x ( t + number ) < = number	0
Q_129	constrain logic in linear programming	C_129_4	t t + number t + number number number number	0
Q_129	constrain logic in linear programming	C_129_5	_ x ( t ) + x ( t + number ) _ x ( t + number ) < = number	0
Q_129	constrain logic in linear programming	C_129_6	y ( t ) = number _ x ( t )	0
Q_129	constrain logic in linear programming	C_129_7	( number _ x ( t ) ) _ ( number _ x ( t + number ) ) + ( number _ x ( t + number ) ) < = number	0
Q_129	constrain logic in linear programming	C_129_8	_ x ( t ) + x ( t + number ) _ x ( t + number ) < = number	0
Q_129	constrain logic in linear programming	C_129_9	x ( number ) = number , x ( number ) = number , x ( number ) = number	0
Q_129	constrain logic in linear programming	C_129_10	_ x ( number ) + x ( number ) _ x ( number ) < = number	0
Q_129	constrain logic in linear programming	C_129_11	x ( number ) _ x ( number ) < = number	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_0	var = df . resample ( string ) . asfreq ( ) . index df . reindex ( df . index . union ( var ) ) . ffill ( ) . resample ( string ) . asfreq ( )	1
Q_130	resampling a panda dataframe while forward fill the value	C_130_1	temperature time number _ number number _ number number number number number na_n number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_2	var = df . resample ( string ) . asfreq ( ) . index df . reindex ( df . index . union ( var ) ) . bfill ( ) . resample ( string ) . first ( )	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_3	temperature time number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number na_n	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_4	df . reindex ( df . index . union ( df . resample ( string ) . asfreq ( ) . index ) ) . interpolate ( ) . resample ( string ) . asfreq ( )	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_5	temperature time number _ number number _ number number number number number na_n number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_6	df . ffill ( ) . resample ( string , on = string , base = number ) . mean ( )	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_7	temperature time number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_8	df . ffill ( ) . resample ( string , on = string ) . mean ( )	0
Q_130	resampling a panda dataframe while forward fill the value	C_130_9	temperature time number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number number _ number number _ number number number number number number . number	0
Q_131	python read file contain number in a column and use these number for a command	C_131_0	number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number	1
Q_131	python read file contain number in a column and use these number for a command	C_131_1	print ( open ( string ) . read ( ) . split ( ) )	0
Q_131	python read file contain number in a column and use these number for a command	C_131_2	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_131	python read file contain number in a column and use these number for a command	C_131_3	with open ( string , string ) as f lines = f . readlines ( ) for var in lines print ( string . format ( var ) )	0
Q_131	python read file contain number in a column and use these number for a command	C_131_4	output_number number . number output_number number . number output_number number . number output_number number . number output_number number . number . . .	0
Q_131	python read file contain number in a column and use these number for a command	C_131_5	gmx trjconv _ dump number . number _ output dump_600 . number	0
Q_131	python read file contain number in a column and use these number for a command	C_131_6	var = { string string } def call_command ( var ) cmd = input ( string ) if cmd in var print ( var [ cmd ] . replace ( string , var ) ) else print ( string ) exit ( ) with open ( string , string ) as f lines = f . readlines ( ) for var in lines call_command ( var ) print ( string . format ( var ) )	0
Q_131	python read file contain number in a column and use these number for a command	C_131_7	enter command clear gmx trjconv _ dump number . number _ output dump_600 . number output_number number . number enter command blahhh command does not exit , quiting	0
Q_132	error while merge split part of numpy array	C_132_0	in [ number ] test = [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	1
Q_132	error while merge split part of numpy array	C_132_1	in [ number ] arr = np . array ( test ) in [ number ] arr out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_132	error while merge split part of numpy array	C_132_2	in [ number ] alist = np . array_split ( arr , arr . shape [ number ] ) in [ number ] alist out [ number ] [ array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) ]	0
Q_132	error while merge split part of numpy array	C_132_3	in [ number ] alist [ number ] out [ number ] [ ] in [ number ] alist [ number ] out [ number ] [ array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) ]	0
Q_132	error while merge split part of numpy array	C_132_4	in [ number ] alist [ number ] + alist [ number ] out [ number ] [ array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) , array ( [ [ number , number , number ] ] ) ]	0
Q_132	error while merge split part of numpy array	C_132_5	in [ number ] test [ number ] + test [ number ] out [ number ] [ ( number , number , number ) , ( number , number , number ) , ( number , number , number ) ]	0
Q_132	error while merge split part of numpy array	C_132_6	in [ number ] np . concatenate ( alist [ number ] + alist [ number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] np . concatenate ( alist [ number ] + alist [ number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] np . concatenate ( alist [ number ] + alist [ number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_132	error while merge split part of numpy array	C_132_7	in [ number ] arr [ [ number , number , number ] , ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_132	error while merge split part of numpy array	C_132_8	in [ number ] np . r_ [ number , number number ] out [ number ] array ( [ number , number , number ] ) in [ number ] arr [ np . r_ [ number , number number ] , ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_132	error while merge split part of numpy array	C_132_9	in [ number ] np . concatenate ( [ arr [ number , ] , arr [ number , ] ] , axis = number ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_0	stu _ id question number response number question number response number number number tutoring ? true lunch a ? false	1
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_1	stu _ id question number response number question number response number number number tutoring ? true lunch a ? true	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_2	stu _ id question number response number tutorer gpa number number improvement ? true jim number . number	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_3	stu _ id question number response number tutorer gpa number number improvement ? yes sally number . number	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_4	import pandas as pd df_s1s1 = pd . read_excel ( string , na_values = string , sheet_names = string , usecols = cols ) df . head ( ) df_s1s2 = pd . read_excel ( string , na_values = string , sheet_names = string , usecols = cols ) df_s1s2 . head ( )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_5	var = pd . read_excel ( string , na_values = string , sheet_names = string , usecols = cols ) df . head ( ) df_s2s2 = pd . read_excel ( string , na_values = string , sheet_names = string , usecols = cols ) df_s1s2 . head ( )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_6	var = pd . concat ( [ df_s1s1 , df_s1s2 ] ) var . head ( )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_7	var = pd . concat ( [ df_s2s1 , df_s2s2 ] ) var . head ( )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_8	var = pd . merge ( df_survey_1 , df_survey2 , left_on = string , right_on = string )	0
Q_133	clean survey data in python _ how to find and clean common row in two file	C_133_9	var = var . dropna ( axis = number , how = string )	0
Q_134	how do i scale a polygon in pygame	C_134_0	var = number y = number a = number b = number	1
Q_134	how do i scale a polygon in pygame	C_134_1	var = ( x , y ) y = ( x + b , y + a ) z = ( x _ b , y + a ) print ( var , y , z ) ( number , number ) ( number , number ) ( number , number )	0
Q_134	how do i scale a polygon in pygame	C_134_2	var = x [ number ] , x [ number ]	0
Q_134	how do i scale a polygon in pygame	C_134_3	var = x [ number ] _ origin [ number ] , x [ number ] _ origin [ number ] y1 = y [ number ] _ origin [ number ] , y [ number ] _ origin [ number ] z1 = z [ number ] _ origin [ number ] , z [ number ] _ origin [ number ] print ( var , y1 , z1 ) ( number , number ) ( number , number ) ( _ number , number )	0
Q_134	how do i scale a polygon in pygame	C_134_4	var = number / number x1 = x1 [ number ] * var , x1 [ number ] * var y1 = y1 [ number ] * var , y1 [ number ] * var z1 = z1 [ number ] * var , z1 [ number ] * var print ( x1 , y1 , z1 ) ( number . number , number . number ) ( number . number , number . number ) ( _ number . number , number . number )	0
Q_134	how do i scale a polygon in pygame	C_134_5	var = x1 [ number ] + origin [ number ] , x1 [ number ] + origin [ number ] y = y1 [ number ] + origin [ number ] , y1 [ number ] + origin [ number ] z = z1 [ number ] + origin [ number ] , z1 [ number ] + origin [ number ] print ( var , y , z ) ( number . number , number . number ) ( number . number , number . number ) ( number . number , number . number )	0
Q_134	how do i scale a polygon in pygame	C_134_6	( number . number , number . number ) ( number . number , number . number ) ( number . number , number . number )	0
Q_134	how do i scale a polygon in pygame	C_134_7	var = number / number x = number y = number a = number * var b = number * var	0
Q_134	how do i scale a polygon in pygame	C_134_8	( b + x , a + y ) , ( _ b + x , a + y ) , ( x , y )	0
Q_134	how do i scale a polygon in pygame	C_134_9	( number . number , number . number ) , ( number . number , number . number ) , ( number , number )	0
Q_135	find integer number from a set of string	C_135_0	var = { number string , number string , number string , number string , number string , number string , number string , number string , number string , number string , } def puzzle ( s ) supper = s . upper ( ) ret = [ ] for var , var in var . items ( ) if all ( c in supper for c in var ) ret . append ( var ) return ret s = input ( string ) numbers_found = puzzle ( s ) print ( string , numbers_found )	1
Q_135	find integer number from a set of string	C_135_1	enter string weighfoxtourist numbers found [ number , number , number , number , number ] enter string ourneonfoe numbers found [ number , number ] enter string ether numbers found [ number ] enter string ozonetower numbers found [ number , number , number ]	0
Q_135	find integer number from a set of string	C_135_2	def puzzle ( s ) supper = s . upper ( ) ret = [ ] for var , var in numbers . items ( ) while true if all ( c in supper for c in var ) for c in var supper = supper . replace ( c , string , number ) ret . append ( var ) else break return ret	0
Q_135	find integer number from a set of string	C_135_3	enter string weighfoxtourist numbers found [ number , number , number ] enter string ourneonfoe numbers found [ number , number , number ] enter string ether numbers found [ number ] enter string ozonetower numbers found [ number , number , number ]	0
Q_135	find integer number from a set of string	C_135_4	var = string [ var for var in var ] [ string , string , string , string ]	0
Q_135	find integer number from a set of string	C_135_5	var = string supper = string [ var in supper for var in var ] [ true , true , true , true ]	0
Q_135	find integer number from a set of string	C_135_6	var = string supper = string [ var in supper for var in var ] [ true , true , false , true ]	0
Q_135	find integer number from a set of string	C_135_7	var = string supper = string all ( [ var in supper for var in var ] ) true supper = string all ( [ var in supper for var in var ] ) false	0
Q_135	find integer number from a set of string	C_135_8	var = string supper = string all ( var in supper for var in var ) true	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_0	import math import numpy as np import pandas as pd	1
Q_136	calculate difference in minute base on tagint minute interval	C_136_1	id half_hour_bucket clock_in_time clock_out_time rate mins number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number number . number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number . number number number number _ number number _ number number number number number number _ number number _ number number number number number number _ number number _ number number number number number number . number number days number number number number . number	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_2	def upsample_list ( x ) multiplier = math . ceil ( x . total_seconds ( ) / ( number * number ) ) return list ( range ( multiplier ) )	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_3	df [ string ] = df . mins . apply ( upsample_list )	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_4	var = df . apply ( lambda x pd . series ( x [ string ] ) , axis = number ) . stack ( ) . reset_index ( level = number , drop = true ) var . name = string	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_5	var = var . drop ( string , axis = number ) . join ( s , how = string ) . drop ( string , axis = number )	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_6	var = var . reset_index ( drop = true )	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_7	var = var . mask ( var . duplicated ( ) )	0
Q_136	calculate difference in minute base on tagint minute interval	C_136_8	df [ [ string , string ] ] = df [ [ string , string ] ] . ffill ( )	0
Q_137	replace number in a word by a char	C_137_0	import re s = string x = re . compile ( string ) . findall ( s ) y = [ re . sub ( r string , string , var ) for var in x ] print ( y )	1
Q_137	replace number in a word by a char	C_137_1	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_137	replace number in a word by a char	C_137_2	import re s = string pat = re . compile ( r string ) print ( re . sub ( pat , string , s ) )	0
Q_137	replace number in a word by a char	C_137_3	question a is the number of a , number b is the number of b , abc1uvf	0
Q_137	replace number in a word by a char	C_137_4	import re s = string x = re . compile ( string ) . findall ( s ) y = [ re . sub ( r string , string , var ) for var in x ] print ( y )	0
Q_137	replace number in a word by a char	C_137_5	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_137	replace number in a word by a char	C_137_6	import re s = string x = re . compile ( string ) . findall ( s ) y = [ re . sub ( r string , string , var ) for var in x ] print ( y )	0
Q_137	replace number in a word by a char	C_137_7	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_137	replace number in a word by a char	C_137_8	import re s = string y = re . sub ( r string , string , s ) print ( y )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_0	var = np . array ( list ( range ( number , number ) ) ) . reshape ( ( number , number ) ) var array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	1
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_1	var = view_as_windows ( image_arr , ( number , number ) )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_2	image_arr . shape ( number , number ) patch_arr . shape ( number , number , number , number )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_3	var = np . zeros ( shape = ( number , number ) ) var array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_4	for var in range ( patch_arr . shape [ number ] ) for y in range ( patch_arr . shape [ number ] ) reconstructed_arr [ var var + number , y y + number ] = patch_arr [ var , y ]	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_5	reconstructed_arr array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_6	var = np . random . rand ( number , number , number )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_7	var = view_as_windows ( input_img , ( number , number , number ) , step = number )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_8	var = np . zeros ( ( number , number , number ) )	0
Q_138	use skimage view_as_windows to make image patch and reconstruct patch	C_138_9	var = number for var in range ( patch_img . shape [ number ] ) for y in range ( patch_img . shape [ number ] ) x_pos , y_pos = var * var , y * var reconstructed_arr [ x_pos x_pos + number , y_pos y_pos + number ] = patch_img [ var , y , number , . ] ( input_img = = reconstructed_arr ) . all ( ) true	0
Q_139	how to unpack a tuple when indexing	C_139_0	a [ , , np . triu_indices ( number ) ]	1
Q_139	how to unpack a tuple when indexing	C_139_1	tuple ( slice , slice , tuple ( np . ndarray , np . ndarray ) )	0
Q_139	how to unpack a tuple when indexing	C_139_2	tuple ( slice , slice , np . ndarray , np . ndarray )	0
Q_139	how to unpack a tuple when indexing	C_139_3	a [ ( slice ( none ) , ) * number + np . triu_indices ( number ) ]	0
Q_139	how to unpack a tuple when indexing	C_139_4	a [ ( slice ( none ) , ) * number + np . triu_indices ( number ) ] . shape	0
Q_139	how to unpack a tuple when indexing	C_139_5	( slice ( none ) , ) * number + np . triu_indices ( number )	0
Q_139	how to unpack a tuple when indexing	C_139_6	( slice ( none ) , slice ( none ) , * np . triu_indices ( number ) )	0
Q_139	how to unpack a tuple when indexing	C_139_7	( ellipsis , ) + np . triu_indices ( number )	0
Q_139	how to unpack a tuple when indexing	C_139_8	( ellipsis , * np . triu_indices ( number ) )	0
Q_139	how to unpack a tuple when indexing	C_139_9	a [ ( ellipsis , ) + np . triu_indices ( number ) ] . shape	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_0	import pandas as pd import numpy as np df = pd . data_frame ( { string np . random . randint ( number , size = ( number , ) ) } )	1
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_1	timeit . timeit ( string id string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_2	timeit . timeit ( string id = = number string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_3	var = pd . index ( df [ string ] ) timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_4	df . index = df [ string ] timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_5	timeit . timeit ( string id string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_6	var = pd . data_frame ( { string range ( number ) } )	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_7	timeit . timeit ( string id string , setup = string , number = number ) number . number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_8	df_unique . index = df_unique [ string ] df_dict = df_unique . to_dict ( orient = string ) timeit . timeit ( string , setup = string , number = number ) number . number e _ number number	0
Q_140	look for the fast way to slice a row in a huge panda dataframe	C_140_9	timeit . timeit ( string , setup = string , number = number ) number . number	0
Q_141	permutation of stripe in flag on condition	C_141_0	import itertools stripes = list ( itertools . product ( string , repeat = number ) ) print ( stripes )	1
Q_141	permutation of stripe in flag on condition	C_141_1	[ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ]	0
Q_141	permutation of stripe in flag on condition	C_141_2	def no_two ( x ) return all ( [ var [ number ] = var [ number ] for var in zip ( x [ number ] , x [ _ number ] ) ] )	0
Q_141	permutation of stripe in flag on condition	C_141_3	var = [ var for var in var if no_two ( var ) ] print ( var )	0
Q_141	permutation of stripe in flag on condition	C_141_4	[ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ]	0
Q_141	permutation of stripe in flag on condition	C_141_5	def blue_between ( x ) if x [ number ] = = string return false if x [ _ number ] = = string return false for var in zip ( x [ _ number ] , x [ number _ number ] , x [ number ] ) if var [ number ] = = string if not ( ( var [ number ] = = string and var [ number ] = = string ) or ( var [ number ] = = string and var [ number ] = = string ) ) return false return true	0
Q_141	permutation of stripe in flag on condition	C_141_6	var = [ var for var in var if blue_between ( var ) ] print ( var )	0
Q_141	permutation of stripe in flag on condition	C_141_7	[ ( string , string , string ) , ( string , string , string ) , ( string , string , string ) , ( string , string , string ) ]	0
Q_142	how to create an array contain only inf with a specific shape	C_142_0	var = number a = [ inf ( var , number ) ones ( var , number ) ] size ( a ) ans = number number a a = inf inf inf inf inf number number number number number	1
Q_142	how to create an array contain only inf with a specific shape	C_142_1	in [ number ] m = number in [ number ] np . vstack ( [ np . ones ( ( m , number ) ) * np . inf , np . ones ( ( m , number ) ) ] ) out [ number ] array ( [ [ inf ] , [ inf ] , [ inf ] , [ inf ] , [ inf ] , [ number . ] , [ number . ] , [ number . ] , [ number . ] , [ number . ] ] ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_2	np . concatenate ( [ np . full ( ( m , number ) , np . inf ) , np . ones ( ( m , number ) ) ] , axis = number )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_3	var = [ inf ( number , m ) ones ( number , m ) ] size ( var ) ans = number number var var = inf inf inf inf inf number number number number number in [ number ] np . concatenate ( [ np . full ( ( number , m ) , np . inf ) , np . ones ( ( number , m ) ) ] , axis = number ) out [ number ] array ( [ [ inf , inf , inf , inf , inf ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_4	in [ number ] a = np . stack ( ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) ) , np . ones ( ( m , number ) ) ) _ type_error traceback ( most recent call last ) < ipython _ input _ number _ c6f8ec8462c9 > in < module > _ > number a = np . stack ( ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) ) , np . ones ( ( m , number ) ) ) / usr / local / lib / python3 . number / dist _ packages / numpy / core / shape_base . py in stack ( arrays , axis , out ) number number result_ndim = arrays [ number ] . ndim + number _ > number axis = normalize_axis_index ( axis , result_ndim ) number number sl = ( slice ( none ) , ) * axis + ( _nx . newaxis , ) type_error only size _ number arrays can be converted to python scalars	0
Q_142	how to create an array contain only inf with a specific shape	C_142_5	in [ number ] np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 ) in [ number ] np . ones ( ( m , number ) ) out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 ) in [ number ] a = np . vstack ( [ ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) ) , np . ones ( ( m , number ) ) ] ) in [ number ] a out [ number ] array ( [ ] , shape = ( number , number ) , dtype = float64 )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_6	in [ number ] a = np . vstack ( [ ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) ) , np . ones ( ( m , number ) ) ] )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_7	in [ number ] a = np . stack ( [ ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) ) , np . ones ( ( m , number ) ) ] ) in [ number ] a . shape out [ number ] ( number , number , number )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_8	in [ number ] a = np . stack ( [ ( np . tile ( np . array ( [ np . inf ] ) , ( m , ) ) ) , np . ones ( ( m ) ) ] ) in [ number ] a . shape out [ number ] ( number , number )	0
Q_142	how to create an array contain only inf with a specific shape	C_142_9	in [ number ] np . stack ( ( np . tile ( np . array ( [ np . inf ] ) , ( m , number ) ) , np . ones ( ( m , number ) ) ) ) out [ number ] array ( [ ] , shape = ( number , number , number ) , dtype = float64 )	0
Q_143	why be panda data frame return everything as a string	C_143_0	title , tissue area number , tissue area number activation path , string , string inhibition path , string , string transcription factors , string p19793 string p04150 string q16665 string p40763 string , string p19793 string p04150 string q16665 string p40763 string undetermined effect , string , string	1
Q_143	why be panda data frame return everything as a string	C_143_1	[ number . number , number . number , number . number ]	0
Q_143	why be panda data frame return everything as a string	C_143_2	def str_to_list ( src ) return re . split ( string , src [ number _ number ] )	0
Q_143	why be panda data frame return everything as a string	C_143_3	var = pd . read_csv ( string , converters = { number str_to_list , number str_to_list } )	0
Q_143	why be panda data frame return everything as a string	C_143_4	title tissue area number tissue area number number activation path [ number . number , number . number , number . number ] [ number . number , number . number , number . number ] number inhibition path [ number . number , number . number , number . number ] [ number . number , number . number , number . number ] number transcription factors [ string , string , string , string ] [ string , string , string , string ] number undetermined effect [ number . number , number . number , number . number ] [ number . number , number . number , number . number ]	0
Q_143	why be panda data frame return everything as a string	C_143_5	var = df . set_index ( string ) . unstack ( )	0
Q_143	why be panda data frame return everything as a string	C_143_6	title tissue area number activation path [ number . number , number . number , number . number ] inhibition path [ number . number , number . number , number . number ] transcription factors [ string , string , string , string ] undetermined effect [ number . number , number . number , number . number ] tissue area number activation path [ number . number , number . number , number . number ] inhibition path [ number . number , number . number , number . number ] transcription factors [ string , string , string , string ] undetermined effect [ number . number , number . number , number . number ] dtype object	0
Q_143	why be panda data frame return everything as a string	C_143_7	var = xx . apply ( pd . series ) . stack ( )	0
Q_143	why be panda data frame return everything as a string	C_143_8	var = var . str . replace ( r string string , string )	0
Q_143	why be panda data frame return everything as a string	C_143_9	var = pd . to_numeric ( data [ data . index . get_level_values ( number ) = string ] )	0
Q_143	why be panda data frame return everything as a string	C_143_10	var = data2 [ ( string , string ) ] _ data2 [ ( string , string ) ]	0
Q_144	compare row in two column accord to condition	C_144_0	df [ string ] = df . duplicated ( [ string ] , keep = string ) df [ string ] = df . duplicated ( [ string , string ] , keep = string )	1
Q_144	compare row in two column accord to condition	C_144_1	sap years dup_sap dup_sap_years number a number false false number a number true false number b number false false number c number false false	0
Q_144	compare row in two column accord to condition	C_144_2	import numpy as np df [ string ] = np . where ( ( df . dup_sap = = true ) ( df . dup_sap_years = = false ) , string , string )	0
Q_144	compare row in two column accord to condition	C_144_3	sap years dup_sap dup_sap_years error_flag number a number false false no number a number true false yes	0
Q_144	compare row in two column accord to condition	C_144_4	var = df . groupby ( [ string ] ) [ string ] . min ( ) . reset_index ( ) var [ string ] = number	0
Q_144	compare row in two column accord to condition	C_144_5	var = pd . var ( df , min_df , on = [ string , string ] , how = string ) var [ string ] = df . duplicated ( [ string ] , keep = false ) var [ string ] = df . duplicated ( [ string , string ] , keep = false )	0
Q_144	compare row in two column accord to condition	C_144_6	sap years min_val dup_sap dup_sap_years number a number na_n true false number a number number . number true false number b number number . number false false number c number number . number false false	0
Q_144	compare row in two column accord to condition	C_144_7	merge [ string ] = np . where ( ( merge . dup_sap = = true ) ( merge . dup_sap_years = = false ) ( merge . min_val . isna ( ) ) , string , string )	0
Q_144	compare row in two column accord to condition	C_144_8	sap years min_val dup_sap dup_sap_years error_flag number a number na_n true false no number a number number . number true false yes number b number number . number false false no number c number number . number false false no	0
Q_145	isometric view in open_gl	C_145_0	self . x = sin ( radians ( self . theta ) ) * cos ( radians ( self . phi ) ) + self . dx self . z = sin ( radians ( self . theta ) ) * sin ( radians ( self . phi ) ) + self . dz self . y = cos ( radians ( self . theta ) ) + self . dy	1
Q_145	isometric view in open_gl	C_145_1	sin ( number ) = = cos ( number )	0
Q_145	isometric view in open_gl	C_145_2	var = sin ( theta ) * number / sqrt ( number ) z = sin ( theta ) * number / sqrt ( number ) y = cos ( theta )	0
Q_145	isometric view in open_gl	C_145_3	sin ( theta ) * number / sqrt ( number ) = cos ( theta )	0
Q_145	isometric view in open_gl	C_145_4	cos ( theta ) + sin ( theta ) = number	0
Q_145	isometric view in open_gl	C_145_5	sin ( theta ) = cos ( theta ) * sqrt ( number )	0
Q_145	isometric view in open_gl	C_145_6	sin ( theta ) = number _ cos ( theta )	0
Q_145	isometric view in open_gl	C_145_7	number _ cos ( theta ) = cos ( theta ) * number	0
Q_145	isometric view in open_gl	C_145_8	number = cos ( theta ) * sqrt ( number )	0
Q_145	isometric view in open_gl	C_145_9	var = acos ( number / sqrt ( number ) )	0
Q_145	isometric view in open_gl	C_145_10	self . phi = number self . theta = number . number	0
Q_146	how to check data_series for continuity	C_146_0	( df [ col ] = df [ col ] . shift ( number ) + number ) . cumsum ( )	1
Q_146	how to check data_series for continuity	C_146_1	df [ string ] . diff ( ) . ne ( number ) . cumsum ( )	0
Q_146	how to check data_series for continuity	C_146_2	df data number number number number number number number number number number number number	0
Q_146	how to check data_series for continuity	C_146_3	df [ string ] . diff ( ) . ne ( number ) . cumsum ( ) number number number number number number number number number number number number name data , dtype int64	0
Q_146	how to check data_series for continuity	C_146_4	list ( df . groupby ( df [ string ] . diff ( ) . ne ( number ) . cumsum ( ) ) ) [ ( number , data number number number number number number ) , ( number , data number number number number number number ) ]	0
Q_146	how to check data_series for continuity	C_146_5	( _ , sub_df_1 ) , ( _ , sub_df_2 ) = df . groupby ( df [ string ] . diff ( ) . ne ( number ) . cumsum ( ) ) sub_df_1 data number number number number number number sub_df_2 data number number number number number number	0
Q_146	how to check data_series for continuity	C_146_6	( _ , sub_df1 ) , ( _ , sub_df2 ) = df2 . groupby ( df2 [ string ] . diff ( ) . ne ( number ) . cumsum ( ) ) sub_df1 step col1 col2 number number number number number number number number sub_df2 step col1 col2 number number number number number number number number	0
Q_146	how to check data_series for continuity	C_146_7	[ var [ number ] for var in df2 . groupby ( df2 [ string ] . diff ( ) . ne ( number ) . cumsum ( ) ) ] [ step col1 col2 number number number number number number number number , step col1 col2 number number number number number number number number ]	0
Q_146	how to check data_series for continuity	C_146_8	[ var [ number ] for var in df2 . groupby ( df2 [ string ] . diff ( ) . ne ( number ) . cumsum ( ) ) if len ( var [ number ] ) > number ] [ step col1 col2 number number number number number number number number , step col1 col2 number number number number number number number number ]	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_0	in [ number ] x1_d = np . array ( [ number , number , number ] , np . int32 ) . x2_d = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , np . int32 )	1
Q_147	use boolean array for index in numpy for tagint _d array	C_147_1	in [ number ] x1_d < number out [ number ] array ( [ true , true , false ] )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_2	in [ number ] x1_d [ _ ] out [ number ] array ( [ number , number ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_3	in [ number ] x2_d [ _29 ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_4	in [ number ] _ [ , _29 ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_5	in [ number ] idx = np . nonzero ( x1_d < number ) in [ number ] idx out [ number ] ( array ( [ number , number ] ) , ) in [ number ] x2_d [ idx [ number ] [ , none ] , idx [ number ] ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_6	in [ number ] x2_d [ [ [ number ] , [ number ] ] , [ [ number , number ] ] ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_7	in [ number ] x2_d [ np . ix_ ( idx [ number ] , idx [ number ] ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_8	in [ number ] np . ix_ ( _29 , _29 ) out [ number ] ( array ( [ [ number ] , [ number ] ] ) , array ( [ [ number , number ] ] ) ) in [ number ] x2_d [ np . ix_ ( _29 , _29 ) ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_147	use boolean array for index in numpy for tagint _d array	C_147_9	in [ number ] x2_d [ x1_d < number ] [ , x1_d < number ] out [ number ] array ( [ [ number , number ] , [ number , number ] ] , dtype = int32 )	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_0	var = np . array ( [ [ number . , number . number , number . number ] , [ number . , number . number , number . number ] , [ number . , number . number , number . number ] ] )	1
Q_148	re_arranging entry in tagint d array base on certain column	C_148_1	m [ m [ , number ] . argsort ( kind = string ) ]	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_2	array ( [ [ number . , number . number , number . number ] , [ number . , number . number , number . number ] , [ number . , number . number , number . number ] ] )	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_3	var = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_4	a [ np . lexsort ( ( a [ , number ] , a [ , number ] ) ) ]	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_5	a [ np . lexsort ( ( a [ , number ] , a [ , number ] , a [ , number ] ) ) ]	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_6	a [ np . lexsort ( list ( map ( tuple , np . column_stack ( a ) ) ) ) ]	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_7	var = np . array ( [ [ number , number , number ] * number , [ number , number , number ] * number , [ number , number , number ] * number ] )	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_8	timeit pd . data_frame ( a ) . sort_values ( list ( range ( a . shape [ number ] ) ) ) . values	0
Q_148	re_arranging entry in tagint d array base on certain column	C_148_9	timeit a [ np . lexsort ( ( a [ , number ] , a [ , number ] , a [ , number ] ) ) ]	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_0	var = pd . data_frame ( columns = [ string , string ] , index = none ) var . loc [ number ] = [ string , string ] var . loc [ number ] = [ string , string ] import collections sample_dict = collections . defaultdict ( ) sample_dict [ string ] = string sample_dict [ string ] = string sample_dict [ string ] = string	1
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_1	from sklearn . feature_extraction . text import count_vectorizer from scipy . sparse import csr_matrix import numpy as np	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_2	var = count_vectorizer ( ngram_range = ( number , number ) , analyzer = string )	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_3	var = np . concatenate ( ( df . text . to_numpy ( ) , np . array ( list ( sample_dict . values ( ) ) ) ) )	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_4	var = ngram_vectorizer . fit_transform ( all_data ) > number	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_5	var = ngrammed [ len ( df ) ] samples = ngrammed [ len ( df ) ] text_rows = len ( df ) jaccard_similarities = [ ] for var , var in zip ( sample_dict . keys ( ) , samples ) repeated_row_matrix = ( csr_matrix ( np . ones ( [ text_rows , number ] ) ) * var ) . astype ( bool ) support = var . maximum ( repeated_row_matrix ) intersection = var . multiply ( repeated_row_matrix ) . todense ( ) jaccard_similarities . append ( pd . series ( ( intersection . sum ( axis = number ) / support . sum ( axis = number ) ) . a1 , name = var ) )	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_6	pd . concat ( jaccard_similarities , axis = number )	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_7	r1 r2 r3 number number . number number . number number . number number number . number number . number number . number	0
Q_149	how to build feature use panda column and a dictionary efficiently	C_149_8	pd . concat ( [ df , pd . concat ( jaccard_similarities , axis = number ) ] , axis = number ) id text r1 r2 r3 number number this is a sample text number . number number . number number . number number number this is a second sample text number . number number . number number . number	0
Q_150	count punctuation in a data_frame column	C_150_0	var = pd . data_frame ( [ string , string ] , columns = [ string ] ) content number i love , pizza , hamberget and chips . number i like drink beer , , cofee and water .	1
Q_150	count punctuation in a data_frame column	C_150_1	var = lambda l1 , l2 sum ( [ number for var in l1 if var in l2 ] ) df [ string ] = df . content . apply ( lambda s var ( s , string . punctuation ) )	0
Q_150	count punctuation in a data_frame column	C_150_2	content count_punct number i love , pizza , hamberget and chips . number number i like drink beer , , cofee and water . number	0
Q_150	count punctuation in a data_frame column	C_150_3	var = lambda l1 , l2 [ var for var in l1 if var in l2 ] df [ string ] = df . content . apply ( lambda s var ( s , string . punctuation ) )	0
Q_150	count punctuation in a data_frame column	C_150_4	content count_punct acc_punct_list number i love , pizza , hamberget and chips . number [ , , , , , , . ] number i like drink beer , , cofee and water . number [ , , , , , . ]	0
Q_150	count punctuation in a data_frame column	C_150_5	df [ string ] = df . content . apply ( lambda s { var var for var , var in counter ( s ) . items ( ) if var in string . punctuation } ) content acc_punct_dict number i love , pizza , hamberget and chips . { string number , string number , string number } number i like drink beer , , cofee and water . { string number , string number , string number }	0
Q_150	count punctuation in a data_frame column	C_150_6	var = df . acc_punct_dict . apply ( pd . series ) , . number number number number number number number number	0
Q_150	count punctuation in a data_frame column	C_150_7	var = pd . concat ( [ df , df_punct ] , axis = number )	0
Q_150	count punctuation in a data_frame column	C_150_8	content acc_punct_dict , . number i love , pizza , hamberget and chips . { string number , string number , string number } number number number number i like drink beer , , cofee and water . { string number , string number , string number } number number number	0
Q_150	count punctuation in a data_frame column	C_150_9	df_res . drop ( string , axis = number )	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_0	var = np . random . randint ( number , number , size = number ) mask = var > number print ( var [ mask ] )	1
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_1	var = np . random . randint ( number , number , size = number )	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_2	timeit my_array = np . random . randint ( number , number , size = number ) mask = my_array > number my_array [ mask ]	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_3	timeit q = np . random . randint ( number , number , number ) m = np . where ( q > number ) q [ m ]	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_4	timeit rand_nums = ( random . randint ( number , number ) for var in range ( number ) ) arr = [ val for val in rand_nums if val > number ]	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_5	timeit number = [ var for var in np . random . randint ( number , high = number , size = number ) if var > number ]	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_6	timeit numbers = [ var for var in ( np . random . randint ( number , number ) for iter in range ( number ) ) if var > number ]	0
Q_151	create a list of random number and filter the list to only have number large than tagint	C_151_7	var = filter ( lambda x x > number , np . random . randint ( number , number , number ) ) rand_list = list ( var )	0
Q_152	index to access element of a matrix	C_152_0	in [ number ] from scipy import sparse in [ number ] a = [ string , string , string , string , string ] . b = string . idx_l = sparse . csr_matrix ( ( number , number ) , dtype = bool ) . idx_temp = np . array ( list ( map ( lambda x x in b , a ) ) )	1
Q_152	index to access element of a matrix	C_152_1	in [ number ] idx_l out [ number ] < number x5 sparse matrix of type string numpy . bool_ string with number stored elements in compressed sparse row format > in [ number ] idx_l . a out [ number ] array ( [ [ false , false , false , false , false ] ] )	0
Q_152	index to access element of a matrix	C_152_2	in [ number ] idx_temp out [ number ] array ( [ true , false , false , false , false ] )	0
Q_152	index to access element of a matrix	C_152_3	in [ number ] idx_l [ number , number ] out [ number ] false	0
Q_152	index to access element of a matrix	C_152_4	in [ number ] idx_ll = idx_l + idx_temp in [ number ] idx_ll out [ number ] matrix ( [ [ true , false , false , false , false ] ] ) in [ number ] idx_ll [ number , number ] out [ number ] true	0
Q_152	index to access element of a matrix	C_152_5	in [ number ] idx_ll [ number ] out [ number ] matrix ( [ [ true , false , false , false , false ] ] ) in [ number ] idx_temp [ number ] out [ number ] true	0
Q_152	index to access element of a matrix	C_152_6	in [ number ] m = sparse . csr_matrix ( idx_temp ) in [ number ] m out [ number ] < number x5 sparse matrix of type string numpy . bool_ string with number stored elements in compressed sparse row format > in [ number ] m . a out [ number ] array ( [ [ true , false , false , false , false ] ] ) in [ number ] print ( m ) ( number , number ) true	0
Q_152	index to access element of a matrix	C_152_7	in [ number ] idx_l + m out [ number ] < number x5 sparse matrix of type string numpy . bool_ string with number stored elements in compressed sparse row format >	0
Q_153	i be have trouble save in a list integer take from a file	C_153_0	var = [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	1
Q_153	i be have trouble save in a list integer take from a file	C_153_1	var = string . join ( l ) print ( var ) var = var . split ( string ) print ( var )	0
Q_153	i be have trouble save in a list integer take from a file	C_153_2	number number number number number number number number number number number number number number number number [ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_153	i be have trouble save in a list integer take from a file	C_153_3	var = string . join ( l ) . replace ( string , string ) var = var . split ( string ) print ( var )	0
Q_153	i be have trouble save in a list integer take from a file	C_153_4	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	0
Q_153	i be have trouble save in a list integer take from a file	C_153_5	var = [ ] for var in data if var = string var = var if var = = string else int ( var ) var . append ( var ) print ( var )	0
Q_153	i be have trouble save in a list integer take from a file	C_153_6	[ number , number , number , number , string , number , number , number , number , string , number , number , number , number , string , number , number , number , number ]	0
Q_153	i be have trouble save in a list integer take from a file	C_153_7	var = [ var if var = = string else int ( var ) for var in data if var ]	0
Q_153	i be have trouble save in a list integer take from a file	C_153_8	var = [ var if var = = string else int ( var ) for var in string . join ( l ) . replace ( string , string ) . split ( string ) if var ]	0
Q_154	fill in value accord to date data in another df in python	C_154_0	var = var . set_index ( pd . to_datetime ( var . year * number + var . month * number + var . day , format = string ) ) . drop ( columns = [ string , string , string ] )	1
Q_154	fill in value accord to date data in another df in python	C_154_1	var = [ var + str ( var ) for var , var in itertools . product ( [ string , string , string , string ] , range ( number , n_days + number ) ) ]	0
Q_154	fill in value accord to date data in another df in python	C_154_2	def fn ( row ) d1 = row . date d2 = d1 + pd . timedelta ( n_days _ number , string ) return pd . series ( df2 . loc [ d1 d2 ] . values . reshape ( ( number , _ number ) , order = string ) . squeeze ( ) , index = cols )	0
Q_154	fill in value accord to date data in another df in python	C_154_3	var = var . join ( var . apply ( fn , axis = number ) )	0
Q_154	fill in value accord to date data in another df in python	C_154_4	x0 x1 x2 x3 date number number number . number number number . number number . number number _ number number _ number number number number number . number number . number number . number number _ number number _ number number	0
Q_154	fill in value accord to date data in another df in python	C_154_5	year month day maxtemp mintemp rainfall wind number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number number number number number number . number number . number number number . number	0
Q_154	fill in value accord to date data in another df in python	C_154_6	maxtemp mintemp rainfall wind number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number number . number number . number number number . number number _ number number _ number number . number number . number number number . number	0
Q_154	fill in value accord to date data in another df in python	C_154_7	x0 x1 x2 x3 date max_t1 max_t2 max_t3 min_t1 min_t2 number number number . number number number . number number . number number _ number number _ number number number . number number . number number . number number . number number . number number number number . number number . number number . number number _ number number _ number number number . number number . number number . number number . number number . number min_t3 rf1 rf2 rf3 w1 w2 w3 number number . number number . number number . number number . number number . number number . number number . number number number . number number . number number . number number . number number . number number . number number . number	0
Q_154	fill in value accord to date data in another df in python	C_154_8	def fn ( row ) d1 = row . date _ pd . timedelta ( n_days , string ) d2 = row . date _ pd . timedelta ( number , string ) return pd . series ( df2 . loc [ d1 d2 ] . values . reshape ( ( number , _ number ) , order = string ) . squeeze ( ) , index = cols )	0
Q_154	fill in value accord to date data in another df in python	C_154_9	var = var . groupby ( level = number ) . mean ( )	0
Q_155	font graphic in python	C_155_0	if j = = math . floor ( size / number + number )	1
Q_155	font graphic in python	C_155_1	for var in range ( number , size + number )	0
Q_155	font graphic in python	C_155_2	for var in range ( number , size + number )	0
Q_155	font graphic in python	C_155_3	import math size = number x1_placement = number x2_placement = math . floor ( size / number ) + number x3_placement = size for var in range ( number , size + number ) if var = = math . floor ( size / number + number ) for _ in range ( number , size + number ) print ( string , end = string ) else for i in range ( number , size + number ) if i = = x1_placement or i = = x2_placement or i = = x3_placement print ( string , end = string ) continue print ( string , end = string ) print ( ) x1_placement + = number x3_placement _ = number	0
Q_155	font graphic in python	C_155_4	x x x x x x xxx ooooooo xxx x x x x x x	0
Q_155	font graphic in python	C_155_5	if j = = math . floor ( size / number + number )	0
Q_155	font graphic in python	C_155_6	for var in range ( number , size + number )	0
Q_155	font graphic in python	C_155_7	import math size = number x1_placement = number x2_placement = math . floor ( size / number ) + number x3_placement = size for var in range ( number , size + number ) for i in range ( number , size + number ) if i = = x1_placement or i = = x2_placement or i = = x3_placement or var = = math . floor ( size / number + number ) print ( string , end = string ) continue print ( string , end = string ) print ( ) x1_placement + = number x3_placement _ = number	0
Q_155	font graphic in python	C_155_8	x x x x x x xxx xxxxxxx xxx x x x x x x	0
Q_156	be it possible to inherit from class give as parameter	C_156_0	var = ( ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ) class ft staticmethod def ge ( ) return var class ft1 staticmethod def ge ( ) return [ ( var * var , var * var ) for var , var in var ] def compose ( ftype ) string string string return type ( f string , ( f , ftype ) , { } )	1
Q_156	be it possible to inherit from class give as parameter	C_156_1	import importlib class f def _init_ ( self ) self . x = string def a ( self ) s = string . join ( f string for var in self . ge ( ) ) return s def b ( self ) return string def compose ( ftype ) cls = getattr ( importlib . import_module ( string ) , ftype ) return type ( f string , ( f , cls ) , { } ) z = compose ( string ) ( ) y = compose ( string ) ( )	0
Q_156	be it possible to inherit from class give as parameter	C_156_2	z . b ( ) , y . b ( ) ( string , string )	0
Q_156	be it possible to inherit from class give as parameter	C_156_3	print ( z . a ( ) ) ( number , number ) ( number , number ) ( number , number ) ( number , number ) ( number , number ) ( number , number ) ( number , number ) y . a ( ) string	0
Q_156	be it possible to inherit from class give as parameter	C_156_4	z . ge ( ) ( ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ) y . ge ( ) [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ]	0
Q_156	be it possible to inherit from class give as parameter	C_156_5	z . _class_ , y . _class_ ( < class string > , < class string > )	0
Q_156	be it possible to inherit from class give as parameter	C_156_6	var = compose ( ft ) q , r , s = var ( ) , var ( ) , var ( ) q , r , s ( < _main_ . f_ft object at number > , < _main_ . f_ft object at number > , < _main_ . f_ft object at number > )	0
Q_156	be it possible to inherit from class give as parameter	C_156_7	def compose ( ftype ) return type ( f string , ( f , ftype ) , { } ) z = compose ( ft ) y = compose ( ft1 )	0
Q_156	be it possible to inherit from class give as parameter	C_156_8	import importlib import abc class g ( abc . abc ) def _init_ ( self ) self . x = string def a ( self ) s = string . join ( f string for var in self . ge ( ) ) return s def b ( self ) return string staticmethod abc . abstractmethod def ge ( ) pass	0
Q_156	be it possible to inherit from class give as parameter	C_156_9	def ft_ge ( ) return ( ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ) def other_new ( f ) return type ( f . _name_ . split ( string ) [ number ] , ( g , ) , { string staticmethod ( f ) } )	0
Q_157	validate the data frame header with panda regex	C_157_0	demo_read . loc [ demo_read [ string ] . str . contains ( r string ) ]	1
Q_157	validate the data frame header with panda regex	C_157_1	demo_read [ string ] . str . contains ( r string string * + / = ? ^ _ { } _ ] + ( ? . [ a _ z0 _ number	0
Q_157	validate the data frame header with panda regex	C_157_2	demo_read [ string ] [ demo_read [ string ] . str . contains ( r string string * + / = ? ^ _ { } _ ] + ( ? . [ a _ z0 _ number	0
Q_157	validate the data frame header with panda regex	C_157_3	demo_read [ string ] [ demo_read [ string ] . str . contains ( r string string * + / = ? ^ _ { } _ ] + ( ? . [ a _ z0 _ number	0
Q_157	validate the data frame header with panda regex	C_157_4	demo_read . loc [ demo_read [ string ] . str . contains ( r string ) ]	0
Q_157	validate the data frame header with panda regex	C_157_5	demo_read [ demo_read [ string ] . str . contains ( r string * + / = ? ^ _ { } _ ] + ( ? . [ a _ z0 _ number	0
Q_157	validate the data frame header with panda regex	C_157_6	name email contact no number bsreddy bsreddy yahoo . com number	0
Q_157	validate the data frame header with panda regex	C_157_7	demo_read [ demo_read [ string ] . str . contains ( r string * + / = ? ^ _ { } _ ] + ( ? . [ a _ z0 _ number	0
Q_157	validate the data frame header with panda regex	C_157_8	name email contact no number siddarth siddarth gmail . com number number supree siupreet outlook . com number number sreeja sreeja gmail . com number number rakshita rakshita / hotmail . com number number rahul rahul live . com number number cahal chahal ? msdn . com number number karthik karthik gmail . com number number rk rk dell . com number	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_0	import numpy as np df = pd . data_frame ( { string np . random . normal ( loc = number , scale = number , size = number ) } )	1
Q_158	how to not remove but handle outlier by transform use panda	C_158_1	number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number name col1 , dtype float64	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_2	def cap_outliers ( series , zscore_threshold = number , verbose = false ) string string string mean_val = series . mean ( ) std_val = series . std ( ) z_score = ( series _ mean_val ) / std_val outliers = abs ( z_score ) > zscore_threshold series = series . copy ( ) series . loc [ z_score > zscore_threshold ] = series . loc [ outliers ] . max ( ) series . loc [ z_score < _ zscore_threshold ] = series . loc [ outliers ] . min ( )	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_3	capping outliers by the z _ score method z _ score threshold number lower bound _ number . number upper bound number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number name col1 , dtype float64	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_4	def cap_outliers ( series , zscore_threshold = number , verbose = false ) string string string median_val = series . median ( ) mad_val = series . mad ( )	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_5	capping outliers by the modified z _ score method z _ score threshold number lower bound number . number upper bound number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number name col1 , dtype float64	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_6	def cap_outliers ( series , iqr_threshold = number . number , verbose = false ) string string string q1 = series . quantile ( number . number ) q3 = series . quantile ( number . number ) iqr = q3 _ q1 lbound = q1 _ iqr_threshold * iqr ubound = q3 + iqr_threshold * iqr outliers = ( series < lbound ) ( series > ubound ) series = series . copy ( ) series . loc [ series < lbound ] = series . loc [ outliers ] . min ( ) series . loc [ series > ubound ] = series . loc [ outliers ] . max ( )	0
Q_158	how to not remove but handle outlier by transform use panda	C_158_7	capping outliers by the iqr method iqr threshold number . number lower bound number . number upper bound number . number number number . number number number . number number number . number number number . number number number . number number number . number number number . number number number number . number number number . number number number . number name col1 , dtype float64	0
Q_159	compare numpy array of datetimes with timestamp	C_159_0	in [ number ] x_month_begin out [ number ] datetime_index ( [ string , string , string , string , string , string , string , string , string , string , string , string ] , dtype = string , freq = string )	1
Q_159	compare numpy array of datetimes with timestamp	C_159_1	in [ number ] x_month_begin . values out [ number ] array ( [ string , string , string , string , string , string , string , string , string , string , string , string ] , dtype = string )	0
Q_159	compare numpy array of datetimes with timestamp	C_159_2	in [ number ] x_month_begin = np . vstack ( np . split ( x_month_begin , number ) ) in [ number ] x_month_begin = np . transpose ( x_month_begin ) in [ number ] x_month_begin out [ number ] array ( [ [ string , string , string ] , [ string , string , string ] , [ string , string , string ] , [ string , string , string ] ] , dtype = string ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_159	compare numpy array of datetimes with timestamp	C_159_3	in [ number ] st_d = pd . to_datetime ( string , format = string ) in [ number ] st_d out [ number ] timestamp ( string ) in [ number ] x_month_begin > st_d _ type_error traceback ( most recent call last ) < ipython _ input _ number _ number d > in < module > _ > number x_month_begin > st_d pandas / _libs / tslibs / c_timestamp . pyx in pandas . _libs . tslibs . c_timestamp . _timestamp . _richcmp_ ( ) type_error string not supported between instances of string and string	0
Q_159	compare numpy array of datetimes with timestamp	C_159_4	in [ number ] st_d . to_numpy ( ) out [ number ] numpy . datetime64 ( string )	0
Q_159	compare numpy array of datetimes with timestamp	C_159_5	in [ number ] x_month_begin > st_d . to_numpy ( ) out [ number ] array ( [ [ true , true , true ] , [ true , true , true ] , [ true , true , true ] , [ true , true , true ] ] )	0
Q_159	compare numpy array of datetimes with timestamp	C_159_6	in [ number ] np . asarray ( st_d ) out [ number ] array ( timestamp ( string ) , dtype = object )	0
Q_159	compare numpy array of datetimes with timestamp	C_159_7	"the original datetime_index can be tested against the timestamp . that string pure "" pandas operation . in [ number ] _133 > st_d out [ number ] array ( [ true , true , true , true , true , true , true , true , true , true , true , true ] )"	0
Q_159	compare numpy array of datetimes with timestamp	C_159_8	_133 . to_numpy ( ) . reshape ( _ number , number ) . t	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_0	a b c number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	1
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_1	for var , var in df . groupby ( string ) print ( f string )	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_2	group number a b c number number number number number number number number number number number number group number a b c number number number number number number number number number number number number group number a b c number number number number number number number number number number number number	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_3	df . groupby ( string ) . filter ( lambda grp grp . c . lt ( number ) . all ( ) )	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_4	a b c number number number number number number number number number number number number	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_5	df . groupby ( string ) . filter ( lambda grp grp . c . lt ( number ) . all ( ) ) . a . unique ( ) . tolist ( )	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_6	df . groupby ( string ) [ string ] . max ( ) > number	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_7	var = df . groupby ( string ) [ string ] . max ( ) < number var [ var ] . index . tolist ( )	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_8	[ var for var , var in df . groupby ( string ) if var . c . lt ( number ) . all ( ) ]	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_9	for var , var in df . groupby ( string )	0
Q_160	how to find the value of a column such that no value in another column take value great than tagint	C_160_10	if grp . c . lt ( number ) . all ( )	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_0	name key number number number number abb ab number number number number baa ba number number number number cbb cb number number number	1
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_1	var = df . set_index ( [ string , string ] ) . t	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_2	name abb baa cbb key ab ba cb number number number number number number number number number number number number	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_3	var = df1 . loc [ np . repeat ( df1 . index . values , len ( df1 . columns ) ) ] var . columns = var . columns . droplevel ( number )	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_4	key ab ba cb number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_5	var = df1 . unstack ( ) . swaplevel ( number , number ) . sort_index ( )	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_6	key name number ab abb number ba baa number cb cbb number number ab abb number ba baa number cb cbb number number ab abb number ba baa number cb cbb number dtype int64	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_7	var = df2 . sub ( x . values , axis = number ) . abs ( )	0
Q_161	how to get absolute difference amongst all the value of a column with each other	C_161_8	key ab ba cb number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_0	re . sub ( r string , r string , s )	1
Q_162	how can convert number give in parenthesis with negative number in python	C_162_1	var = str ( { string string , string string , string string , string string } ) st = str ( { string string , string string , string string } )	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_2	var = re . sub ( r string , r string , s )	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_3	string manufacture string number string comapany string ( bmw ) string loss string _ number string price string number string	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_4	var = re . sub ( r string , r string , st )	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_5	string manufacture string number string price string number string shutdown string _ number string	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_6	number number { string string , string string , string string , string string } number { string string , string string , string string }	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_7	def num2neg ( row ) return re . sub ( r string , r string , row ) df [ number ] = df [ number ] . apply ( num2neg )	0
Q_162	how can convert number give in parenthesis with negative number in python	C_162_8	number number { string string , string string , string string , string string } number { string string , string string , string string }	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_0	var = string df [ df [ var ] . notnull ( ) ]	1
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_1	var = [ string ] df [ df [ var ] . notnull ( ) . any ( axis = number ) ] var = [ string , string ] df [ df [ var ] . notnull ( ) . any ( axis = number ) ]	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_2	var = pd . data_frame ( { string [ np . nan , string , string , string , np . nan ] , string [ np . nan , np . nan , string , string , string ] } ) print ( var ) survive another column number na_n na_n number a na_n number b a number b b number na_n b	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_3	var = string df1 = df [ df [ var ] . notnull ( ) ] print ( df1 ) survive another column number a na_n number b a number b b print ( type ( df [ var ] ) ) < class string >	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_4	var = [ string ] print ( type ( df [ var ] ) ) < class string >	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_5	print ( df [ variable_to_predict ] . notnull ( ) . any ( axis = number ) ) number false number true number true number true number false dtype bool print ( df [ variable_to_predict ] . notnull ( ) . all ( axis = number ) ) number false number true number true number true number false dtype bool	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_6	var = [ string , string ] print ( type ( df [ var ] ) ) < class string > print ( df [ var ] ) survive another column number na_n na_n number a na_n number b a number b b number na_n b	0
Q_163	how can i filter dataframe base on null not null use a column name as a variable	C_163_7	print ( df [ variable_to_predict ] . notnull ( ) ) survive another column number false false number true false number true true number true true number false true	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_0	catergory_encoder . inverse_transform ( np . asarray ( unscaled . exchange ) )	1
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_1	catergory_encoder . inverse_transform ( unscaled [ , number ] )	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_2	var = pd . data_frame ( { string [ number , number , number , number , number , number ] , string [ string , string , string , string , string , string ] , string [ string , string , string , string , string , string ] } ) numeric categorial1 categorial2 number number a a number number a c number number a a number number b c number number b b number number b c	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_3	from sklearn . preprocessing import ordinal_encoder encoder = ordinal_encoder ( )	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_4	var = np . where ( df . columns . isin ( categorial_column ) ) n_categorial = len ( categorial_column ) df . values [ , var ] . reshape ( _ number , n_categorial )	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_5	numeric categorial1 categorial2 number number number . number number . number number number number . number number . number number number number . number number . number number number number . number number . number number number number . number number . number number number number . number number . number	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_6	from sklearn . preprocessing import min_max_scaler scaler = min_max_scaler ( ) scaled = scaler . fit_transform ( df ) unscaled = scaler . inverse_transform ( scaled )	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_7	var = pd . data_frame ( unscaled , columns = var . columns ) var [ categorial_column ] = encoder . inverse_transform ( var [ categorial_column ] )	0
Q_164	how can i add scale catergorical data back to orginal dataset	C_164_8	numeric categorial1 categorial2 number number . number a a number number . number a c number number . number a a number number . number b c number number . number b b number number . number b c	0
Q_165	problem with sort with multiple criterias in python	C_165_0	var = sorted ( var , key = lambda x ( _ x [ number ] , x [ number ] ) )	1
Q_165	problem with sort with multiple criterias in python	C_165_1	var = [ var [ _ number ] for var in sorted ( [ i [ _ number ] for i in l ] , key = lambda x ( _ x [ number ] , x [ number ] ) ) ]	0
Q_165	problem with sort with multiple criterias in python	C_165_2	[ [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] ]	0
Q_165	problem with sort with multiple criterias in python	C_165_3	sort_ list = [ var [ _ number ] for var in sorted ( [ i [ _ number ] for i in l ] ) ]	0
Q_165	problem with sort with multiple criterias in python	C_165_4	[ [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] ]	0
Q_165	problem with sort with multiple criterias in python	C_165_5	var = [ [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] ]	0
Q_165	problem with sort with multiple criterias in python	C_165_6	sort_ list = [ var [ _ number ] for var in sorted ( [ i [ _ number ] for i in l ] , reverse = true ) ]	0
Q_165	problem with sort with multiple criterias in python	C_165_7	[ [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] , [ string , number . number ] ]	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_0	docker run _ it _ rm lambci / lambda build _ python3 . number bash	1
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_1	mkdir ipopt _ lib pythonpath = pythonpath / ipopt _ lib pip install cython numpy _ t ipopt _ lib /	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_2	yum install lapack _ devel git clone https / / github . com / coin _ or / ipopt . git cd ipopt ipoptdir = pwd mkdir ipoptdir / build cd ipoptdir / build ipoptdir / configure make make install	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_3	var = / usr / local / lib / pkgconfig pip install ipopt _ t ipopt _ lib /	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_4	cp _ t / ipopt _ lib / / usr / local / lib / lib * cp _ t / ipopt _ lib / / usr / lib64 / libblas . so * / usr / lib64 / liblapack * cp _ t / ipopt _ lib / / usr / lib64 / libgfortran . so . number * cp _ t / ipopt _ lib / / usr / lib64 / libstdc + + . so * cp _ t / ipopt _ lib / / usr / lib64 / libquadmath . so . number *	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_5	cd / ipopt _ lib zip _ r / root / ipopt _ lib . zip *	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_6	docker cp < container_id > / root / ipopt _ lib . zip / downloads /	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_7	import sys try sys . path . index ( string ) except value_error sys . path . append ( string ) import os os . environ [ string ] + = os . pathsep + string import json import numpy import ipopt def lambda_handler ( event , context ) print ( numpy . _version_ ) print ( ipopt . _version_ )	0
Q_166	unable to create aws lambda deployment package for ipopt pyomo cython	C_166_8	response null request id string function logs start request_id number bd9fd88 _ d340 _ number _ a954 _ number a727e173933 version latest number . number . number number . number . number end request_id number bd9fd88 _ d340 _ number _ a954 _ number a727e173933 report request_id number bd9fd88 _ d340 _ number _ a954 _ number a727e173933 duration number . number ms billed duration number ms memory size number mb max memory used number mb init duration number . number ms	0
Q_167	python write gz compress file from a list	C_167_0	for var in x for bkp in bkp_filter if re . search ( fr string , var ) ^ ^ ^ this is [ string , string , string , string , string ]	1
Q_167	python write gz compress file from a list	C_167_1	if re . search ( fr string , x [ number ] )	0
Q_167	python write gz compress file from a list	C_167_2	zip . write ( y . encode ( ) )	0
Q_167	python write gz compress file from a list	C_167_3	var = string . join ( y ) zip . write ( var . encode ( ) )	0
Q_167	python write gz compress file from a list	C_167_4	for var in y zip . write ( str ( var ) . encode ( ) ) zip . write ( string . encode ( ) ) zip . write ( string . encode ( ) )	0
Q_167	python write gz compress file from a list	C_167_5	for var , var in b . items ( ) with gzip . open ( string , string ) as zip for y in var zip . write ( string . join ( y ) ) zip . write ( string )	0
Q_167	python write gz compress file from a list	C_167_6	with gzip . open ( string , string ) as zip for var , var in b . items ( ) for y in var zip . write ( string . join ( y ) ) zip . write ( string )	0
Q_167	python write gz compress file from a list	C_167_7	with gzip . open ( string , string ) as zip for var , var in b . items ( ) for y in var for cell in y zip . write ( str ( cell ) ) zip . write ( string )	0
Q_168	split non_square matrix into square sub_matrices	C_168_0	( x , y , h , w ) ( top left x _ coord , top left y _ coord , height , width )	1
Q_168	split non_square matrix into square sub_matrices	C_168_1	number number number number number number number number number number number number number number number	0
Q_168	split non_square matrix into square sub_matrices	C_168_2	number number number number number number number number number number number number number number number	0
Q_168	split non_square matrix into square sub_matrices	C_168_3	number number number number number number number number number number number number number number number	0
Q_168	split non_square matrix into square sub_matrices	C_168_4	number number number number number number number number number number number number number number number	0
Q_168	split non_square matrix into square sub_matrices	C_168_5	number number y y y number number y y y x x y y y	0
Q_168	split non_square matrix into square sub_matrices	C_168_6	number number y y y number number y y y x x x x x	0
Q_168	split non_square matrix into square sub_matrices	C_168_7	number [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] [ string , string , string , string , string , string ] [ string , string , string , string , string , string ] [ string , string , string , string , string , string ] [ string , string , string , string , string , string ] [ string , string , string , string , string , string ] [ string , string , string , string , string , string ]	0
Q_168	split non_square matrix into square sub_matrices	C_168_8	number < = x , y , h , w < = max size	0
Q_169	permutation with certain element in specific index	C_169_0	from math import factorial def nth_permute ( a , n ) if not a return tuple ( ) i , j = divmod ( n , factorial ( len ( a ) _ number ) ) return ( a [ i ] , ) + nth_permute ( a [ i ] + a [ i + number ] , j )	1
Q_169	permutation with certain element in specific index	C_169_1	for var in range ( number ) print ( var , nth_permute ( string , var ) ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string ) number ( string , string , string , string )	0
Q_169	permutation with certain element in specific index	C_169_2	def index_of_permute ( a , p ) lo , hi = number , factorial ( len ( a ) ) _ number while lo < = hi mid = ( lo + hi ) / / number p = nth_permute ( a , mid ) if p < p lo = mid + number elif p > p hi = mid _ number else return mid i = index_of_permute ( string , tuple ( string ) ) print ( i )	0
Q_169	permutation with certain element in specific index	C_169_3	def nth_perm_8_19 ( a , n ) i , j = divmod ( n , factorial ( number ) ) return nth_permute ( a [ number ] , i ) + nth_permute ( a [ number ] , j )	0
Q_169	permutation with certain element in specific index	C_169_4	var = number s = string . join ( nth_perm_8_19 ( a , var ) )	0
Q_169	permutation with certain element in specific index	C_169_5	def nth_perm_8_10_9 ( a , n ) i , j = divmod ( n , factorial ( number ) * factorial ( number ) ) j , k = divmod ( j , factorial ( number ) ) return nth_permute ( a [ number ] , i ) + nth_permute ( a [ number number ] , j ) + nth_permute ( a [ number ] , k )	0
Q_169	permutation with certain element in specific index	C_169_6	def nth_permute ( a , n , chunks = none ) if not a return tuple ( ) if chunks is none if n > = factorial ( len ( a ) ) return none i , j = divmod ( n , factorial ( len ( a ) _ number ) ) return ( a [ i ] , ) + nth_permute ( a [ i ] + a [ i + number ] , j ) result = tuple ( ) for var in reversed ( chunks ) base = factorial ( var ) n , i = divmod ( n , base ) a , a = a [ _ var ] , a [ _ var ] result = nth_permute ( a , i ) + result return result if n = = number else none	0
Q_169	permutation with certain element in specific index	C_169_7	def index_of_permute ( a , p , chunks = none ) lo , hi = number , number for var in chunks or [ len ( a ) ] hi * = factorial ( var ) hi _ = number while lo < = hi mid = ( lo + hi ) / / number p = nth_permute ( a , mid , chunks ) if p < p lo = mid + number elif p > p hi = mid _ number else return mid	0
Q_169	permutation with certain element in specific index	C_169_8	var = nth_permute ( a , number , [ number , number ] ) print ( string . join ( var ) , index_of_permute ( a , var , [ number , number ] ) )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_0	var = pd . data_frame ( np . random . randint ( number , number , size = ( number , number ) ) , columns = list ( string ) ) var [ string ] = [ number , number , number , number , number , number ] var = var [ [ string , string , string ] ]	1
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_1	group a b number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_2	def func_i1_o1 ( x ) return x + number df [ string ] = df [ string ] . apply ( func_i1_o1 )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_3	def func_i1_o1_rolling ( x ) return ( x [ number ] + x [ number ] ) df [ string ] = df [ string ] . rolling ( number ) . apply ( func_i1_o1_rolling , raw = true )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_4	df [ string ] = df . groupby ( string ) [ string ] . rolling ( number ) . apply ( func_i1_o1_rolling , raw = true ) . reset_index ( drop = true )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_5	def func_i2_o1 ( x ) return np . sum ( x ) df [ string ] = df [ [ string , string ] ] . apply ( func_i2_o1 , axis = number , raw = true )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_6	def func_i2_o1_rolling ( x ) values_b = x values_c = df . loc [ x . index , string ] . to_numpy ( ) return np . sum ( values_b ) + np . sum ( values_c ) df [ string ] = df [ string ] . rolling ( number ) . apply ( func_i2_o1_rolling , raw = false )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_7	df [ string ] = df . groupby ( string ) [ string ] . rolling ( number ) . apply ( func_i2_o1_rolling , raw = false ) . reset_index ( drop = true )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_8	def func_i1_o2 ( x ) return pd . series ( ( x + number , x + number ) ) df [ [ string , string ] ] = df [ string ] . apply ( func_i1_o2 )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_9	def func_i1_o2_fast ( x ) return x + number , x + number df [ string ] , df [ string ] = zip ( * df [ string ] . apply ( func_i1_o2_fast ) )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_10	def func_i1_o2_rolling_solution1 ( x ) output_1 = np . max ( x ) output_2 = np . min ( x )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_11	var = number nan_prefix = ( var _ number ) * [ np . nan ] output_list_1 = nan_prefix . copy ( ) output_list_2 = nan_prefix . copy ( ) def func_i1_o2_rolling_solution2 ( x ) output_list_1 . append ( np . max ( x ) ) output_list_2 . append ( np . min ( x ) ) return number df [ string ] . rolling ( var ) . apply ( func_i1_o2_rolling_solution2 , raw = true ) df [ string ] = output_list_1 df [ string ] = output_list_2	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_12	def func_i1_o2_rolling_groupby ( x ) output_1 = np . max ( x ) output_2 = np . min ( x )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_13	def func_i2_o2 ( x ) return np . mean ( x ) , np . median ( x ) df [ string ] , df [ string ] = zip ( * df [ [ string , string ] ] . apply ( func_i2_o2 , axis = number ) )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_14	def func_i2_o2_rolling ( x ) values_b = x . to_numpy ( ) values_c = df . loc [ x . index , string ] . to_numpy ( ) output_1 = np . min ( [ np . sum ( values_b ) , np . sum ( values_c ) ] ) output_2 = np . max ( [ np . sum ( values_b ) , np . sum ( values_c ) ] )	0
Q_170	panda apply roll groupby with multiple input multiple output column	C_170_15	def func_i2_o2_rolling_groupby ( x ) values_b = x . to_numpy ( ) values_c = df . loc [ x . index , string ] . to_numpy ( ) output_1 = np . min ( [ np . sum ( values_b ) , np . sum ( values_c ) ] ) output_2 = np . max ( [ np . sum ( values_b ) , np . sum ( values_c ) ] )	0
Q_171	how to populate a panda dataframe with this csv data	C_171_0	type posts intj string entj string entj string estj string intp string	1
Q_171	how to populate a panda dataframe with this csv data	C_171_1	var = pd . read_csv ( string , sep = r string )	0
Q_171	how to populate a panda dataframe with this csv data	C_171_2	def my_filter ( tbl ) return pd . series ( [ var for var in tbl if len ( var ) > number and string not in var ] , dtype = string )	0
Q_171	how to populate a panda dataframe with this csv data	C_171_3	var = df . set_index ( string ) . posts . str . split ( r string ) . apply ( my_filter ) . stack ( ) . reset_index ( level = number , drop = true ) . reset_index ( name = string )	0
Q_171	how to populate a panda dataframe with this csv data	C_171_4	type post number intj hello world number number intj blah blah number number entj hello world number number entj blah blah number number entj hello world number number entj blah blah number number estj hello world number number estj blah blah number number intp hello world number number intp blah blah number	0
Q_171	how to populate a panda dataframe with this csv data	C_171_5	var = { string number , string number , string number , string number }	0
Q_171	how to populate a panda dataframe with this csv data	C_171_6	result . insert ( number , string , result . type . apply ( lambda tp types [ tp ] ) )	0
Q_171	how to populate a panda dataframe with this csv data	C_171_7	target type post number number intj hello world number number number intj blah blah number number number entj hello world number number number entj blah blah number number number entj hello world number number number entj blah blah number number number estj hello world number number number estj blah blah number number number intp hello world number number number intp blah blah number	0
Q_172	zip array in python	C_172_0	in [ number ] arr2_d = [ [ number . number e _ number number , _ number . number e _ number number , _ number . number e _ number number , _ number . number number e _ number number ] , . [ number . number , number . number , _ number . number , _ number . number ] ] . arr2_d = np . asarray ( arr2_d ) . arr1_d = np . arange ( number , number . number + number . number , number . number )	1
Q_172	zip array in python	C_172_1	in [ number ] [ [ var , var [ number number ] ] for var , var in zip ( arr1_d , arr2_d ) ] out [ number ] [ [ number . number , array ( [ number . number number , _ number . number ] ) ] , [ number . number , array ( [ number . number , number . number ] ) ] ]	0
Q_172	zip array in python	C_172_2	in [ number ] [ [ var , var ] for var , var in zip ( arr1_d , arr2_d . t ) ] out [ number ] [ [ number . number , array ( [ number . number number , number . number ] ) ] , [ number . number , array ( [ _ number . number , number . number ] ) ] , [ number . number , array ( [ _ number . number , _ number . number ] ) ] , [ number . number , array ( [ _ number . number , _ number . number ] ) ] ]	0
Q_172	zip array in python	C_172_3	in [ number ] [ [ ( i , var ) for var in j ] for i , j in zip ( arr1_d , arr2_d . t ) ] out [ number ] [ [ ( number . number , number . number number ) , ( number . number , number . number ) ] , [ ( number . number , _ number . number ) , ( number . number , number . number ) ] , [ ( number . number , _ number . number ) , ( number . number , _ number . number ) ] , [ ( number . number , _ number . number ) , ( number . number , _ number . number ) ] ]	0
Q_172	zip array in python	C_172_4	in [ number ] list ( zip ( * _ ) ) out [ number ] [ ( ( number . number , number . number number ) , ( number . number , _ number . number ) , ( number . number , _ number . number ) , ( number . number , _ number . number ) ) , ( ( number . number , number . number ) , ( number . number , number . number ) , ( number . number , _ number . number ) , ( number . number , _ number . number ) ) ]	0
Q_172	zip array in python	C_172_5	[ [ ( var , var ) for var , var in zip ( arr1_d , var ) ] for var in arr2_d ]	0
Q_172	zip array in python	C_172_6	in [ number ] arr1_d [ none , ] . repeat ( number , number ) out [ number ] array ( [ [ number . , number . number , number . , number . number ] , [ number . , number . number , number . , number . number ] ] ) in [ number ] arr2_d out [ number ] array ( [ [ number . number number , _ number . number , _ number . number , _ number . number ] , [ number . number , number . number , _ number . number , _ number . number ] ] )	0
Q_172	zip array in python	C_172_7	in [ number ] np . stack ( ( _400 , arr2_d ) , axis = number ) out [ number ] array ( [ [ [ number . , number . number number ] , [ number . number , _ number . number ] , [ number . , _ number . number ] , [ number . number , _ number . number ] ] , [ [ number . , number . number ] , [ number . number , number . number ] , [ number . , _ number . number ] , [ number . number , _ number . number ] ] ] )	0
Q_172	zip array in python	C_172_8	in [ number ] arr = np . zeros ( ( number , number ) , dtype = string ) in [ number ] arr out [ number ] array ( [ [ ( number . , number . ) , ( number . , number . ) , ( number . , number . ) , ( number . , number . ) ] , [ ( number . , number . ) , ( number . , number . ) , ( number . , number . ) , ( number . , number . ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] ) in [ number ] arr [ string ] = arr2_d in [ number ] arr [ string ] = _400 in [ number ] arr out [ number ] array ( [ [ ( number . , number . number number ) , ( number . number , _ number . number ) , ( number . , _ number . number ) , ( number . number , _ number . number ) ] , [ ( number . , number . number ) , ( number . number , number . number ) , ( number . , _ number . number ) , ( number . number , _ number . number ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_173	combine nearby bound box along one axis	C_173_0	var = [ { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } , { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } , { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } , { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } , { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } , { string string , string [ ( number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] } ]	1
Q_173	combine nearby bound box along one axis	C_173_1	import numpy as np pairs = [ ] threshold_y = number	0
Q_173	combine nearby bound box along one axis	C_173_2	pairs [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ]	0
Q_173	combine nearby bound box along one axis	C_173_3	var = [ ] for var in range ( len ( pairs ) ) cur_set = set ( ) p = pairs [ var ] done = false for k in range ( len ( var ) ) if p [ number ] in var [ k ] var [ k ] . append ( p [ number ] ) done = true if p [ number ] in var [ k ] var [ k ] . append ( p [ number ] ) done = true if done continue cur_set . add ( p [ number ] ) cur_set . add ( p [ number ] ) match_idx = [ ] while true num_match = number for j in range ( var + number , len ( pairs ) ) p2 = pairs [ j ] if j not in match_idx and ( p2 [ number ] in cur_set or p2 [ number ] in cur_set ) cur_set . add ( p2 [ number ] ) cur_set . add ( p2 [ number ] ) num_match + = number match_idx . append ( j ) if num_match = = number break var . append ( list ( cur_set ) ) var = [ list ( set ( a ) ) for a in var ]	0
Q_173	combine nearby bound box along one axis	C_173_4	merged_pairs [ [ number , number ] , [ number , number , number , number ] ]	0
Q_173	combine nearby bound box along one axis	C_173_5	import networkx as nx g = nx . graph ( ) g . add_edges_from ( [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] )	0
Q_173	combine nearby bound box along one axis	C_173_6	[ [ number , number ] , [ number , number , number , number ] ]	0
Q_173	combine nearby bound box along one axis	C_173_7	out_final [ { string string , string [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] } , { string string , string [ [ number , number ] , [ number , number ] , [ number , number ] , [ number , number ] ] } ]	0
Q_174	duplicate detection base on value store in multiple python list	C_174_0	var = [ number , number , number , number , number , number ] request_title = [ string , string , string , string , string , string ] request_body_text = [ string , string , string , string , string , string ]	1
Q_174	duplicate detection base on value store in multiple python list	C_174_1	var = [ number , number , number , number , number , number ] lower = [ string , string , string , string , string , string ] upper = [ string , string , string , string , string , string ]	0
Q_174	duplicate detection base on value store in multiple python list	C_174_2	var = [ number , number , number ] dups = [ number , number , number ]	0
Q_174	duplicate detection base on value store in multiple python list	C_174_3	from collections import defaultdict groups = defaultdict ( list )	0
Q_174	duplicate detection base on value store in multiple python list	C_174_4	dict ( groups ) { ( string , string ) [ number , number ] , ( string , string ) [ number ] , ( string , string ) [ number , number , number ] }	0
Q_174	duplicate detection base on value store in multiple python list	C_174_5	var = [ ] dups = [ ] for var in groups . values ( ) for dup in var [ number ] var . append ( var [ number ] ) dups . append ( dup )	0
Q_174	duplicate detection base on value store in multiple python list	C_174_6	uniq [ number , number , number ] dups [ number , number , number ]	0
Q_174	duplicate detection base on value store in multiple python list	C_174_7	for var in groups . values ( ) first = var [ number ] for dup in var [ number ] mark_as_duplicate ( first , dup )	0
Q_174	duplicate detection base on value store in multiple python list	C_174_8	for var , var in zip ( stuff ) body = { string var , string [ { string var , string string } ] } < do api stuff >	0
Q_174	duplicate detection base on value store in multiple python list	C_174_9	for var in groups . values ( ) first = var [ number ] rest = var [ number ] if rest related = [ { string item , string string } for item in rest ] body = { string first , string related } < do api stuff >	0
Q_175	python regex extract date to new column in dataframe	C_175_0	var = r string df [ string ] = df [ string ] . str . extract ( var , expand = false )	1
Q_175	python regex extract date to new column in dataframe	C_175_1	( ? < [ a _ za _ z ] ) ( [ a _ z ] [ a _ z ] * [ number _ number ] { number , number } ( ? _ ( ? [ a _ z ] [ a _ z ] * ) ? [ number _ number ] { number , number } ) ? ) ( ? d )	0
Q_175	python regex extract date to new column in dataframe	C_175_2	[ a _ z ] [ a _ z ] *	0
Q_175	python regex extract date to new column in dataframe	C_175_3	[ number _ number ] { number , number }	0
Q_175	python regex extract date to new column in dataframe	C_175_4	( ? _ ( ? [ a _ z ] [ a _ z ] * ) ? [ number _ number ] { number , number } ) ?	0
Q_175	python regex extract date to new column in dataframe	C_175_5	( ? [ a _ z ] [ a _ z ] * ) ?	0
Q_175	python regex extract date to new column in dataframe	C_175_6	[ a _ z ] [ a _ z ] *	0
Q_175	python regex extract date to new column in dataframe	C_175_7	[ number _ number ] { number , number }	0
Q_175	python regex extract date to new column in dataframe	C_175_8	( ? < [ a _ za _ z ] )	0
Q_176	print the sequence in different order	C_176_0	var = int ( input ( ) ) for var in range ( number , ( var / / number ) + number ) for j in range ( var ) print ( var + ( ( var _ number ) * j ) _ ( j * ( j _ number ) ) , end = string ) print ( ) for var in range ( ( var / / number ) + number , var + number ) for j in range ( var _ var + number ) print ( var + ( ( var _ number ) * j ) _ ( j * ( j _ number ) ) , end = string ) print ( )	1
Q_176	print the sequence in different order	C_176_1	var = number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_176	print the sequence in different order	C_176_2	var = number number number number ( number _ number ) = number number number number ( number _ number ) = number , ( number _ number ) = number number number number number ( number _ number ) = number , ( number _ number ) = number , ( number _ number ) = number number number number number number ( number _ number ) = number , ( number _ number ) = number , ( number _ number ) = number , ( number _ number ) = number number number number number ( number _ number ) = number , ( number _ number ) = number , ( number _ number ) = number number number number ( number _ number ) = number , ( number _ number ) = number number number ( number _ number ) = number number	0
Q_176	print the sequence in different order	C_176_3	number + ( ( n _ number ) * number ) _ ( number * _ number ) = number	0
Q_176	print the sequence in different order	C_176_4	number + ( ( n _ number ) * number ) _ ( number * number ) = number	0
Q_176	print the sequence in different order	C_176_5	number + ( ( n _ number ) * number ) _ ( number * number ) = number	0
Q_176	print the sequence in different order	C_176_6	number + ( ( n _ number ) * number ) _ ( number * number ) = number	0
Q_176	print the sequence in different order	C_176_7	number + ( ( n _ number ) * number ) _ ( number * number ) = number	0
Q_176	print the sequence in different order	C_176_8	i + ( ( n _ number ) * j ) _ ( j * ( j _ number ) )	0
Q_177	how to find argmax of last tagint ax	C_177_0	in [ number ] arr = np . random . randint ( number , number , ( number , number , number , number ) ) in [ number ] arr out [ number ] array ( [ [ [ [ number , number ] , [ number , number ] , [ number , number ] ] ] , [ [ [ number , number ] , [ number , number ] , [ number , number ] ] ] , [ [ [ number , number ] , [ number , number ] , [ number , number ] ] ] , [ [ [ number , number ] , [ number , number ] , [ number , number ] ] ] ] )	1
Q_177	how to find argmax of last tagint ax	C_177_1	in [ number ] arr1 = arr . reshape ( arr . shape [ _ number ] + ( _ number , ) ) in [ number ] arr1 out [ number ] array ( [ [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] , [ [ number , number , number , number , number , number ] ] ] )	0
Q_177	how to find argmax of last tagint ax	C_177_2	in [ number ] np . max ( arr1 , _ number ) out [ number ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] ) in [ number ] idx = np . argmax ( arr1 , _ number ) in [ number ] idx out [ number ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_177	how to find argmax of last tagint ax	C_177_3	in [ number ] ij = np . ix_ ( np . arange ( number ) , np . arange ( number ) ) in [ number ] ij + ( idx , ) out [ number ] ( array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number ] ] ) , array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] ) ) in [ number ] arr1 [ ij + ( idx , ) ] out [ number ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_177	how to find argmax of last tagint ax	C_177_4	in [ number ] idx1 = np . unravel_index ( idx , ( number , number ) ) in [ number ] idx1 out [ number ] ( array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] ) , array ( [ [ number ] , [ number ] , [ number ] , [ number ] ] ) ) in [ number ] arr [ ij + idx1 ]	0
Q_177	how to find argmax of last tagint ax	C_177_5	in [ number ] barr = np . random . randint ( number , number , ( number , number , number , number , number , number ) ) in [ number ] barr1 = barr . reshape ( barr . shape [ _ number ] + ( _ number , ) ) in [ number ] ms = np . max ( barr1 , axis = _ number ) in [ number ] idx = np . argmax ( barr1 , _ number ) in [ number ] idx1 = np . unravel_index ( idx , barr . shape [ _ number ] ) in [ number ] ij = np . ix_ ( * [ np . arange ( var ) for var in barr . shape [ _ number ] ] ) in [ number ] np . allclose ( barr [ ij + idx1 ] , ms ) out [ number ] true	0
Q_177	how to find argmax of last tagint ax	C_177_6	in [ number ] barr2 = barr . reshape ( _ number , number ) in [ number ] idx2 = np . argmax ( barr2 , axis = number ) in [ number ] idx2 . shape out [ number ] ( number , ) in [ number ] np . allclose ( idx . ravel ( ) , idx2 ) out [ number ] true in [ number ] ms2 = barr2 [ np . arange ( barr2 . shape [ number ] ) , idx2 ] in [ number ] ms2 . shape out [ number ] ( number , ) in [ number ] np . allclose ( ms2 . reshape ( barr . shape [ _ number ] ) , ms ) out [ number ] true	0
Q_177	how to find argmax of last tagint ax	C_177_7	in [ number ] np . column_stack ( idx1 ) . shape out [ number ] ( number , number , number , number ) in [ number ] np . stack ( idx1 , axis = _ number ) . shape out [ number ] ( number , number , number , number , number ) in [ number ] np . allclose ( x , np . stack ( idx1 , _ number ) . reshape ( _ number , number ) ) out [ number ] true	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_0	var = ( df1 . name = = df2 . name ) ( df1 . age = = df2 . age ) ( df1 . gender = = df2 . gender ) df1 . loc [ var , string ] = df2 . loc [ var , string ]	1
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_1	a b c d number a b number x number b a number r number a c number q	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_2	a b c d number a b number fff number na_n a number ggg number a c number hhh	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_3	var = ( df1 . a = = df2 . a ) ( df1 . b = = df2 . b ) df1 . loc [ var , string ] = df2 . loc [ var , string ]	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_4	a b c d number a b number fff number b a number r number a c number hhh	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_5	a b c d number a b number fff number na_n a number ggg	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_6	var = df1 [ df1 . index . isin ( df2 . index ) ] idx = ( var . a = = df2 . a ) ( var . b = = df2 . b ) var . loc [ idx , string ] = df2 . loc [ idx , string ] df1 = var . combine_first ( df1 )	0
Q_178	assign column value of dataframe where column of two dataframes be equal	C_178_7	a b c d number a b number . number fff number b a number . number r number a c number . number q	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_0	import pandas as pd d = { string [ number , number , number ] } data = pd . data_frame ( data = d )	1
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_1	print ( data ) location_id number number number number number number	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_2	def multiplyall ( number ) result = number for var in range ( len ( str ( number ) ) ) result = int ( str ( number ) [ var ] ) * result return result	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_3	insert ( location , column name , column values )	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_4	data . insert ( len ( data . columns ) , string , data [ string ] . apply ( lambda x multiply_all ( x ) ) . tolist ( ) )	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_5	print ( data ) location_id new_column number number number number number number number number number	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_6	def multiply_firstsecond ( number ) result = number if len ( str ( number ) ) > number result = int ( str ( number ) [ number ] ) * int ( str ( number ) [ number ] ) return result	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_7	data . insert ( len ( data . columns ) , string , data [ string ] . apply ( lambda x multiply_firstsecond ( x ) ) . tolist ( ) )	0
Q_179	how to multiply first two digit in a single dataframe column in panda	C_179_8	print ( data ) location_id new_column number number number number number number number number number	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_0	[ var for var in generated for var in var ]	1
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_1	[ [ number . number ] , [ number . number number ] , number . number ]	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_2	var = [ var [ number ] if type ( var ) = = list else var for var in var ]	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_3	var = generated . reshape ( number , number )	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_4	var = np . array ( var ) var = var . reshape ( number , number )	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_5	import numpy as np np . random . seed ( number ) g = [ [ np . random . randint ( number ) / number ] for var in range ( number ) ]	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_6	timeit [ item for var in g for item in var ] number . number ms number s per loop ( mean std . dev . of number runs , number loops each ) timeit np . array ( g ) . reshape ( number , number ) number ms number . number ms per loop ( mean std . dev . of number runs , number loop each )	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_7	np . random . seed ( number ) g = [ [ np . random . randint ( number ) / number ] for var in range ( number ) ] g = np . array ( g )	0
Q_180	python how to flatten list of list where each sublist be a contain a single float	C_180_8	timeit [ item for var in g for item in var ] number ms number . number ms per loop ( mean std . dev . of number runs , number loop each ) timeit g . reshape ( number , number ) number ns number . number ns per loop ( mean std . dev . of number runs , number loops each )	0
Q_181	identify pattern in csv column row in python	C_181_0	import numpy as np import pandas as pd np . random . seed ( number ) df = pd . data_frame ( { string np . random . randint ( number , number , number ) , string np . random . randint ( number , number , number ) } ) df . head ( ) col_a col_b number number number number number number number number number number number number number number number	1
Q_181	identify pattern in csv column row in python	C_181_1	var = df . col_a . isin ( [ number , number , number ] ) df . col_b . isin ( [ number , number , number ] ) df [ var ] . head ( ) col_a col_b number number number number number number number number number number number number number number number	0
Q_181	identify pattern in csv column row in python	C_181_2	df . loc [ mask , string ] = string df . head ( ) col_a col_b col_c number number number pattern not followed number number number pattern not followed number number number pattern not followed number number number pattern not followed number number number pattern not followed	0
Q_181	identify pattern in csv column row in python	C_181_3	df [ mask ] col_a col_b col_c number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n	0
Q_181	identify pattern in csv column row in python	C_181_4	df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true	0
Q_181	identify pattern in csv column row in python	C_181_5	df . loc [ df . col_c . isna ( ) ] col_a col_b col_c number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n number number number na_n	0
Q_181	identify pattern in csv column row in python	C_181_6	df . loc [ df . col_c . isna ( ) , string ] = string	0
Q_181	identify pattern in csv column row in python	C_181_7	df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true df . loc [ ( df . col_a = = number ) ( df . col_b = = number ) , string ] = true df . loc [ df . col_c . isna ( ) , string ] = string df . loc [ df . col_c = = true ] col_a col_b col_c number number number true number number number true number number number true number number number true	0
Q_181	identify pattern in csv column row in python	C_181_8	number , number number , number number , number number , number number , number number , number . . .	0
Q_181	identify pattern in csv column row in python	C_181_9	var = pd . read_csv ( string , names = [ string , string ] )	0
Q_182	python pivot_table _ add difference column	C_182_0	var = pd . data_frame ( { string [ string , string , string , string , string , string ] , string string , string [ number . number , number . number , number , number , _ . number , number ] , string [ string , string , string , string , string , string ] } ) piv = pd . pivot_table ( var , index = string , columns = string , aggfunc = sum ) piv . columns = [ var [ number ] for var in piv . columns ] piv [ string ] = piv . b _ piv . a	1
Q_182	python pivot_table _ add difference column	C_182_1	a b diff category x number . number number . number number . number y number . number _ number . number _ number . number z number . number number . number number . number	0
Q_182	python pivot_table _ add difference column	C_182_2	piv . loc [ string ] = piv . sum ( )	0
Q_182	python pivot_table _ add difference column	C_182_3	piv . loc [ string , string ] = string	0
Q_182	python pivot_table _ add difference column	C_182_4	a b diff category x number . number number . number number . number y number . number _ number . number _ number . number z number . number number . number number . number total number . number number . number	0
Q_182	python pivot_table _ add difference column	C_182_5	piv . columns = pd . multi_index . from_product ( [ [ string ] , piv . columns ] )	0
Q_182	python pivot_table _ add difference column	C_182_6	name a b diff category x number . number number . number number . number y number . number _ number . number _ number . number z number . number number . number number . number total number . number number . number	0
Q_182	python pivot_table _ add difference column	C_182_7	var = df . date . max ( ) piv . columns = pd . multi_index . from_tuples ( [ var + ( var , ) for var in piv . columns ] ) = = > name a b diff number _ number number _ number number number _ number number _ number number number _ number number _ number number category x number . number number . number number y number . number _ number . number _ number . number z number . number number . number number . number total number . number number . number	0
Q_182	python pivot_table _ add difference column	C_182_8	var = piv . columns [ number ] piv . style . background_gradient ( string , subset = [ var ] ) . highlight_null ( string ) . set_na_rep ( string )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_0	with open ( string , string ) as p lst = p . read ( ) . splitlines ( )	1
Q_183	convert small number to a scale from tagint to tagint	C_183_1	url , value https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number https / / mywebsite . com / p / number , number . number number	0
Q_183	convert small number to a scale from tagint to tagint	C_183_2	url , value , scaled_value https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number https / / mywebsite . com / p / number , number . number number , number	0
Q_183	convert small number to a scale from tagint to tagint	C_183_3	var = [ round ( var * number / max ( lst2 ) ) + number for var in lst2 ]	0
Q_183	convert small number to a scale from tagint to tagint	C_183_4	var = round ( x * number / maxpri ) + number res2 = round ( ( ( x _ minpri ) / ( maxpri _ minpri ) ) * number , number )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_5	var = [ round ( var * number / max ( lst2 ) ) + number for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_6	[ number , number , number , number , number , number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_183	convert small number to a scale from tagint to tagint	C_183_7	var = [ round ( var * number / max ( lst2 ) , number ) + number for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_8	[ number . number , number . number , number . number , number . number , number . number , number . number number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_183	convert small number to a scale from tagint to tagint	C_183_9	round ( x * number / max ( lst2 ) , number ) + number round ( x * number / max ( lst2 ) , number )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_10	var = [ round ( var * number / max ( lst2 ) , number ) for var in lst2 ] num2 = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ] print ( var ) print ( num2 )	0
Q_183	convert small number to a scale from tagint to tagint	C_183_11	[ number . number , number . number , number . number , number . number , number . number , number . number number ] [ number . number , number . number , number . number , number . number , number . number , number . number ]	0
Q_183	convert small number to a scale from tagint to tagint	C_183_12	var = [ round ( ( ( var _ min ( lst2 ) ) / ( max ( lst2 ) _ min ( lst2 ) ) ) * number , number ) for var in lst2 ]	0
Q_184	panda conditional roll sum of two column	C_184_0	var = ( df [ string ] = number ) . cumsum ( ) df [ string ] = df [ string ] . mask ( df [ string ] = = number ) . combine_first ( df [ string ] ) . groupby ( var ) . cumsum ( ) df	1
Q_184	panda conditional roll sum of two column	C_184_1	a b c d d_new number d1 x _ number . number number . number _ number . number number d2 x _ number . number number . number _ number . number number d3 x _ number . number number . number _ number . number number d4 x _ number . number number . number number . number number d5 x number . number number . number number . number number d6 x number . number number . number number . number number d7 x _ number . number number . number number . number	0
Q_184	panda conditional roll sum of two column	C_184_2	var = ( df [ string ] = number ) . cumsum ( )	0
Q_184	panda conditional roll sum of two column	C_184_3	a b c d d_new grp number d1 x _ number . number number . number _ number . number number number d2 x _ number . number number . number _ number . number number number d3 x _ number . number number . number _ number . number number number d4 x _ number . number number . number number . number number number d5 x number . number number . number number . number number number d6 x number . number number . number number . number number number d7 x _ number . number number . number number . number number	0
Q_184	panda conditional roll sum of two column	C_184_4	df [ string ] = df [ string ] . mask ( df [ string ] = = number ) . combine_first ( df [ string ] )	0
Q_184	panda conditional roll sum of two column	C_184_5	a b c d d_new grp new_cd number d1 x _ number . number number . number _ number . number number _ number . number number d2 x _ number . number number . number _ number . number number _ number . number number d3 x _ number . number number . number _ number . number number _ number . number number d4 x _ number . number number . number number . number number number . number number d5 x number . number number . number number . number number number . number number d6 x number . number number . number number . number number number . number number d7 x _ number . number number . number number . number number _ number . number	0
Q_184	panda conditional roll sum of two column	C_184_6	df [ string ] = df . groupby ( string ) [ string ] . cumsum ( )	0
Q_184	panda conditional roll sum of two column	C_184_7	a b c d d_new grp new_cd d_new_details number d1 x _ number . number number . number _ number . number number _ number . number _ number . number number d2 x _ number . number number . number _ number . number number _ number . number _ number . number number d3 x _ number . number number . number _ number . number number _ number . number _ number . number number d4 x _ number . number number . number number . number number number . number number . number number d5 x number . number number . number number . number number number . number number . number number d6 x number . number number . number number . number number number . number number . number number d7 x _ number . number number . number number . number number _ number . number number . number	0
Q_185	reshape a panda series	C_185_0	in [ number ] l = [ [ string , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] , [ string , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] ] in [ number ] df = pd . data_frame ( l , columns = [ string , string ] ) in [ number ] df out [ number ] name lst number s1 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number s2 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	1
Q_185	reshape a panda series	C_185_1	in [ number ] df [ string ] out [ number ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] name lst , dtype object	0
Q_185	reshape a panda series	C_185_2	in [ number ] df [ string ] . to_numpy ( ) out [ number ] array ( [ list ( [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ) , list ( [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ) ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , )	0
Q_185	reshape a panda series	C_185_3	in [ number ] df [ string ] . to_list ( ) out [ number ] [ [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] , [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] ]	0
Q_185	reshape a panda series	C_185_4	in [ number ] np . array ( df [ string ] . to_list ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] ) in [ number ] _ . shape out [ number ] ( number , number , number )	0
Q_185	reshape a panda series	C_185_5	in [ number ] np . stack ( df [ string ] . to_numpy ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_185	reshape a panda series	C_185_6	in [ number ] alist = [ np . empty ( number , object ) ] in [ number ] alist [ number ] [ ] = [ np . array ( [ number , number , number ] ) , np . array ( [ number , number , number ] ) ] in [ number ] alist out [ number ] [ array ( [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] , dtype = object ) ]	0
Q_185	reshape a panda series	C_185_7	in [ number ] np . stack ( alist ) out [ number ] array ( [ [ array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ] ] , dtype = object )	0
Q_185	reshape a panda series	C_185_8	in [ number ] np . stack ( alist [ number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] ] )	0
Q_185	reshape a panda series	C_185_9	in [ number ] df out [ number ] name lst number s1 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number s2 [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	0
Q_185	reshape a panda series	C_185_10	in [ number ] df [ string ] out [ number ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] name lst , dtype object	0
Q_185	reshape a panda series	C_185_11	in [ number ] df [ string ] . to_numpy ( ) out [ number ] array ( [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) , array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , )	0
Q_185	reshape a panda series	C_185_12	in [ number ] df [ [ string ] ] out [ number ] lst number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ] number [ [ number . number , number . number , number . number ] , [ number . number , number . number , number . number ] ]	0
Q_185	reshape a panda series	C_185_13	in [ number ] df [ [ string ] ] . to_numpy ( ) out [ number ] array ( [ [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) ] , [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_185	reshape a panda series	C_185_14	in [ number ] np . stack ( _280 ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_185	reshape a panda series	C_185_15	in [ number ] np . stack ( _283 ) out [ number ] array ( [ [ list ( [ array ( [ number . , number . , number . ] ) , array ( [ number . , number . , number . ] ) ] ) ] , [ array ( [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ) ] ] , dtype = object )	0
Q_185	reshape a panda series	C_185_16	in [ number ] np . stack ( _283 . ravel ( ) ) out [ number ] array ( [ [ [ number . , number . , number . ] , [ number . , number . , number . ] ] , [ [ number . , number . , number . ] , [ number . , number . , number . ] ] ] )	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_0	import pandas as pd import numpy as np df_a = pd . data_frame ( { string [ number , number ] , string [ number , number ] , string [ string , number ] } ) print ( df_a ) df_b = pd . data_frame ( { string [ number , number ] , string [ number , number ] , string [ string , number ] } ) print ( df_b ) df_c = df_a . merge ( df_b , left_on = [ string , string , string ] , right_on = [ string , string , string ] , how = string ) print ( df_c )	1
Q_186	how to to make a join in data frame if two column have empty value	C_186_1	x y z number number number number number number number x y c number number number number number number number x y z c number number number number number number number number	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_2	import pandas as pd import numpy as np df_a = pd . data_frame ( { string [ number , number ] , string [ number , number ] , string [ np . nan , number ] } ) print ( df_a )	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_3	x y z number number number na_n number number number number . number	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_4	var = pd . data_frame ( { string [ number , number ] , string [ number , number ] , string [ np . nan , number ] } ) print ( var )	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_5	x y c number number number na_n number number number number . number	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_6	var = df_a . merge ( df_b , left_on = [ string , string , string ] , right_on = [ string , string , string ] , how = string ) print ( var )	0
Q_186	how to to make a join in data frame if two column have empty value	C_186_7	x y z c number number number na_n na_n number number number number . number number . number	0
Q_187	apply function to multiple variable	C_187_0	covid_pos asymptomatic fever cough number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	1
Q_187	apply function to multiple variable	C_187_1	def col_sums ( col ) return pd . series ( [ col . sum ( ) , col . loc [ number ] . sum ( ) ] , index = [ string , string ] ) def with_pct ( x ) return f string def col_title ( head , n1 ) return f string	0
Q_187	apply function to multiple variable	C_187_2	var = df . index . size total_pos = df . covid_pos . sum ( )	0
Q_187	apply function to multiple variable	C_187_3	var = df . set_index ( string ) . apply ( col_sums ) . t . applymap ( with_pct ) var . columns = [ col_title ( string , total ) , col_title ( string , total_pos ) ]	0
Q_187	apply function to multiple variable	C_187_4	all tested ( number , number . number ) sars _ cov _ number pcr positive ( number , number . number ) asymptomatic number ( number . number ) number ( number . number ) fever number ( number . number ) number ( number . number ) cough number ( number . number ) number ( number . number )	0
Q_187	apply function to multiple variable	C_187_5	var = df . set_index ( string ) . apply ( col_sums ) . t	0
Q_187	apply function to multiple variable	C_187_6	var = res / [ total , total_pos ] * number var	0
Q_187	apply function to multiple variable	C_187_7	res . all = res . all . astype ( str ) + string + wrk . all . astype ( str ) + string res . pos = res . pos . astype ( str ) + string + wrk . pos . astype ( str ) + string	0
Q_187	apply function to multiple variable	C_187_8	all tested ( number , number . number ) sars _ cov _ number pcr positive ( number , number . number ) asymptomatic number ( number . number ) number ( number . number ) fever number ( number . number ) number ( number . number ) cough number ( number . number ) number ( number . number )	0
Q_188	organize run in tensorboard	C_188_0	import tensorflow as tf from tensorboard . plugins . hparams import api as hp	1
Q_188	organize run in tensorboard	C_188_1	var = hp . h_param ( string , hp . discrete ( [ number , number ] ) ) hp_dropout = hp . h_param ( string , hp . real_interval ( number . number , number . number ) ) hp_optimizer = hp . h_param ( string , hp . discrete ( [ string , string ] ) ) metric_accuracy = string with tf . summary . create_file_writer ( string ) . as_default ( ) hp . hparams_config ( hparams = [ var , hp_dropout , hp_optimizer ] , metrics = [ hp . metric ( metric_accuracy , display_name = string ) ] , )	0
Q_188	organize run in tensorboard	C_188_2	hp_num_units h_param ( name = string , domain = int_interval ( number , number ) , display_name = none , description = none )	0
Q_188	organize run in tensorboard	C_188_3	def train_test_model ( hparams ) model = tf . keras . models . sequential ( [ tf . keras . layers . flatten ( ) , tf . keras . layers . dense ( hparams [ hp_num_units ] , activation = tf . nn . relu ) , tf . keras . layers . dropout ( hparams [ hp_dropout ] ) , tf . keras . layers . dense ( number , activation = tf . nn . softmax ) , ] ) model . compile ( optimizer = hparams [ hp_optimizer ] , loss = string , metrics = [ string ] , ) model . fit ( x_train , y_train , epochs = number )	0
Q_188	organize run in tensorboard	C_188_4	{ h_param object number value _ for _ the _ object , h_param object number value _ for _ the _ object , h_param object number value _ for _ the _ object , }	0
Q_188	organize run in tensorboard	C_188_5	{ h_param ( name = string , domain = discrete ( [ number , number ] ) , display_name = none , description = none ) number , h_param ( name = string , domain = real_interval ( number . number , number . number ) , display_name = none , description = none ) number . number , h_param ( name = string , domain = discrete ( [ string , string ] ) , display_name = none , description = none ) string }	0
Q_188	organize run in tensorboard	C_188_6	def run ( run_dir , hparams ) with tf . summary . create_file_writer ( run_dir ) . as_default ( ) hp . hparams ( hparams )	0
Q_188	organize run in tensorboard	C_188_7	var = number for var in hp_num_units . domain . values for dropout_rate in ( hp_dropout . domain . min_value , hp_dropout . domain . max_value ) for optimizer in hp_optimizer . domain . values hparams = { hp_num_units var , hp_dropout dropout_rate , hp_optimizer optimizer , } run_name = string var print ( string run_name ) print ( { h . name hparams [ h ] for h in hparams } ) run ( string + run_name , hparams ) var + = number	0
Q_188	organize run in tensorboard	C_188_8	def train_test_model ( hparams , run_dir ) model = tf . keras . models . sequential ( [ tf . keras . layers . flatten ( ) , tf . keras . layers . dense ( hparams [ hp_num_units ] , activation = tf . nn . relu ) , tf . keras . layers . dropout ( hparams [ hp_dropout ] ) , tf . keras . layers . dense ( number , activation = tf . nn . softmax ) ] ) model . compile ( optimizer = hparams [ hp_optimizer ] , loss = string , metrics = [ string ] ) callbacks = [ tf . keras . callbacks . tensor_board ( run_dir ) , ] model . fit ( x_train , y_train , epochs = number , callbacks = callbacks )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_0	var = np . array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) . t	1
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_1	var = np . zeros ( ( a . shape [ number ] , number ) , dtype = bool ) mask = np . concatenate ( ( var , a = = number , var ) , axis = number )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_2	var = np . nonzero ( np . diff ( mask , axis = number ) )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_3	var = locs [ number ] [ number number ] _ locs [ number ] [ number ]	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_4	var = np . flatnonzero ( run_lengths > = number )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_5	var = np . zeros ( a . shape , dtype = np . int8 )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_6	var = number * valid_runs result [ locs [ number ] [ var ] , locs [ number ] [ var ] ] = number var + = number var = var [ locs [ number ] [ var ] < result . shape [ number ] ] result [ locs [ number ] [ var ] , locs [ number ] [ var ] ] = _ number	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_7	var = np . cumsum ( var , axis = number , out = var ) . view ( bool )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_8	array ( [ [ true , true , true , true , true ] , [ false , false , false , false , false ] , [ true , true , true , false , false ] ] )	0
Q_189	how to build a mask for consecutive zero in a row in a panda dataframe	C_189_9	def mask_consecutive ( a , k = number , n = number , axis = _ number ) shape = list ( a . shape ) shape [ axis ] = number z = np . zeros ( shape , dtype = bool ) mask = np . concatenate ( ( z , a = = k , z ) , axis = axis ) locs = np . argwhere ( np . diff ( mask , axis = axis ) ) run_lengths = locs [ number number , axis ] _ locs [ number , axis ] valid_runs = np . flatnonzero ( run_lengths > = n ) result = np . zeros ( a . shape , dtype = np . int8 ) v = number * valid_runs result [ tuple ( locs [ v , ] . t ) ] = number v + = number v = v [ locs [ v , axis ] < result . shape [ axis ] ] result [ tuple ( locs [ v , ] . t ) ] = _ number return np . cumsum ( result , axis = axis , out = result ) . view ( bool )	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_0	timestamp bids number [ number . number , number ] number [ number . number , number ] number [ number . number , number ] number [ number . number , number ]	1
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_1	var = pd . read_csv ( string , sep = string ) var . timestamp = pd . to_datetime ( var . timestamp , unit = string )	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_2	timestamp bids number number _ number number _ number number number number number [ number . number , number ] number number _ number number _ number number number number number [ number . number , number ] number number _ number number _ number number number number number [ number . number , number ] number number _ number number _ number number number number number [ number . number , number ]	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_3	var = var . join ( var . bids . str . extract ( r string ) ) var . bidprice = var . bidprice . astype ( float ) var . bidvolume = var . bidvolume . astype ( int )	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_4	timestamp bids bidprice bidvolume number number _ number number _ number number number number number [ number . number , number ] number . number number number number _ number number _ number number number number number number [ number . number , number ] number . number number number number _ number number _ number number number number number [ number . number , number ] number . number number number number _ number number _ number number number number number [ number . number , number ] number . number number	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_5	orderbook . plot . scatter ( string , string )	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_6	var = { string [ number , number , number , number ] , string [ [ number . number , number ] , [ number . number , number ] , [ number . number , number ] , [ number . number , number ] ] }	0
Q_190	how to graph binance api orderbook with pandas_matplotlib	C_190_7	orderbook [ [ string , string ] ] = pd . data_frame ( orderbook . bids . tolist ( ) )	0
Q_191	find the large area under a curve panda matplotlib	C_191_0	var = np . random . randn ( number ) var = var . cumsum ( ) _ var . mean ( ) plt . plot ( var )	1
Q_191	find the large area under a curve panda matplotlib	C_191_1	var = np . diff ( x < number ) . cumsum ( )	0
Q_191	find the large area under a curve panda matplotlib	C_191_2	var = pd . data_frame ( { string x [ number ] , string x1 } ) dfg = var . groupby ( string ) mingr = dfg . apply ( lambda x np . trapz ( x . value ) ) . idxmin ( ) plt . plot ( x [ number ] ) plt . plot ( dfg . get_group ( mingr ) . value ) plt . title ( string . format ( dfg . get_group ( mingr ) . index [ number ] , dfg . get_group ( mingr ) . index [ _ number ] ) )	0
Q_191	find the large area under a curve panda matplotlib	C_191_3	var = np . array ( [ number , number , number . number , number , number ] ) x = np . r_ [ var , _ var , var , _ var ] + np . random . normal ( number , . number , number ) plt . figure ( figsize = ( number , number ) ) plt . axhline ( number , color = string ) plt . plot ( x , string )	0
Q_191	find the large area under a curve panda matplotlib	C_191_4	var = pd . data_frame ( { string x , string x < number } ) var [ number ] value lt_zero number number . number false number number . number false number number . number false number number . number false number number . number false number _ number . number true number _ number . number true number _ number . number true number _ number . number true number _ number . number true	0
Q_191	find the large area under a curve panda matplotlib	C_191_5	df [ string ] = np . diff ( np . r_ [ false , x < number ] ) df [ number ] value lt_zero sign_switch number number . number false false number number . number false false number number . number false false number number . number false false number number . number false false number _ number . number true true number _ number . number true false number _ number . number true false number _ number . number true false number _ number . number true false	0
Q_191	find the large area under a curve panda matplotlib	C_191_6	df [ string ] = np . diff ( np . r_ [ false , x < number ] ) . cumsum ( ) df [ number ] value lt_zero sign_switch sign_sequence number number . number false false number number number . number false false number number number . number false false number number number . number false false number number number . number false false number number _ number . number true true number number _ number . number true false number number _ number . number true false number number _ number . number true false number number _ number . number true false number	0
Q_191	find the large area under a curve panda matplotlib	C_191_7	var = df . groupby ( string ) var . apply ( lambda x np . trapz ( x . value ) ) sign_sequence number number . number number _ number . number number number . number number _ number . number	0
Q_191	find the large area under a curve panda matplotlib	C_191_8	plt . figure ( figsize = ( number , number ) ) plt . plot ( x , string ) plt . axhline ( number , c = string ) for var , var in enumerate ( sign_groups ) plt . fill_between ( var [ number ] . index , number , var [ number ] . value ) area = np . trapz ( var [ number ] . value ) plt . text ( ( var ) * number + number . number , np . sign ( area ) * number . number , f string , fontsize = number )	0
Q_192	how to create another dictionary which contain string	C_192_0	def get_set ( var , field ) return { var [ field ] } if isinstance ( var [ field ] , str ) else set ( var [ field ] )	1
Q_192	how to create another dictionary which contain string	C_192_1	[ { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_192	how to create another dictionary which contain string	C_192_2	def contains ( item , field , values ) string string string if field item = item . get ( field )	0
Q_192	how to create another dictionary which contain string	C_192_3	var = [ { string string , string string , string [ string ] , string [ string ] , string string } , { string string , string string , string [ string ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_192	how to create another dictionary which contain string	C_192_4	[ { string string , string string , string [ string ] , string [ string ] , string [ string ] , string string } ]	0
Q_192	how to create another dictionary which contain string	C_192_5	var = [ { string string , string string , string [ { string string , string string } ] , string [ string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_192	how to create another dictionary which contain string	C_192_6	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_192	how to create another dictionary which contain string	C_192_7	var = [ { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } , ] } , { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } , ] } , { string string , string string , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } ] , string [ { string string , string string } , { string string , string string } , { string string , string string } ] } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_192	how to create another dictionary which contain string	C_192_8	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_192	how to create another dictionary which contain string	C_192_9	var = [ { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string ] , string [ string ] , string string } } , { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } } , { string string , string string , string string , string number . number , string { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } } ] result = [ var for var in t if validate ( var ) ] print ( result )	0
Q_192	how to create another dictionary which contain string	C_192_10	[ { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } , { string string , string string , string [ { string string , string string } ] , string [ string , string ] , string [ string ] , string string } ]	0
Q_193	read data into two separate list	C_193_0	var = open ( string ) . read ( ) . splitlines ( ) p = [ var . split ( string ) [ number ] for var in var ] q = [ var . split ( string ) [ number ] for var in var ]	1
Q_193	read data into two separate list	C_193_1	for var in open ( string ) . read ( ) . splitlines ( ) p . append ( var . split ( string ) [ number ] ) q . append ( var . split ( string ) [ number ] )	0
Q_193	read data into two separate list	C_193_2	var , var = map ( list , zip ( * [ var . split ( string ) for var in open ( string ) . read ( ) . splitlines ( ) ] ) )	0
Q_193	read data into two separate list	C_193_3	timeit lines = open ( string ) . read ( ) . splitlines ( ) p = [ var . split ( string ) [ number ] for var in lines ] q = [ var . split ( string ) [ number ] for var in lines ]	0
Q_193	read data into two separate list	C_193_4	number s number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_193	read data into two separate list	C_193_5	timeit for var in open ( string ) . read ( ) . splitlines ( ) p . append ( var . split ( string ) [ number ] ) q . append ( var . split ( string ) [ number ] )	0
Q_193	read data into two separate list	C_193_6	number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_193	read data into two separate list	C_193_7	timeit p , q = map ( list , zip ( * [ var . split ( string ) for var in open ( string ) . read ( ) . splitlines ( ) ] ) )	0
Q_193	read data into two separate list	C_193_8	number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_193	read data into two separate list	C_193_9	timeit f = np . loadtxt ( string , delimiter = string ) p , q = f [ , number ] , f [ , number ] p , q	0
Q_193	read data into two separate list	C_193_10	number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_194	panda overlay a column into row with a blank one	C_194_0	df . manager2 = df . manager2 . bfill ( ) . ffill ( ) df . loc [ df . manager1 . isnull ( ) , string ] = np . na_n	1
Q_194	panda overlay a column into row with a blank one	C_194_1	import pandas as pd import numpy as np c = [ string , string , string , string ]	0
Q_194	panda overlay a column into row with a blank one	C_194_2	print ( string ) print ( string ) d = [ [ string , string , np . na_n , string ] , [ string , string , string , np . na_n ] , [ string , string , np . na_n , string ] ] df = pd . data_frame ( data = d , columns = c ) print ( df ) df . manager2 = df . manager2 . bfill ( ) . ffill ( ) df . loc [ df . manager1 . isnull ( ) , string ] = np . na_n print ( ) print ( df )	0
Q_194	panda overlay a column into row with a blank one	C_194_3	scenario number row number manager number na_n , manager number value pick row2 manager number value party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n a22810282 number l21635789 sbas02030 a22677981 na_n number l21635789 sbas03030 na_n a21721880 party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n na_n number l21635789 sbas02030 a22677981 a21721880 number l21635789 sbas03030 na_n na_n	0
Q_194	panda overlay a column into row with a blank one	C_194_4	print ( string ) print ( string ) d = [ [ string , string , string , np . na_n ] , [ string , string , np . na_n , string ] , [ string , string , np . na_n , string ] ] df = pd . data_frame ( data = d , columns = c ) print ( df ) df . manager2 = df . manager2 . bfill ( ) . ffill ( ) df . loc [ df . manager1 . isnull ( ) , string ] = np . na_n print ( ) print ( df )	0
Q_194	panda overlay a column into row with a blank one	C_194_5	scenario number row number manager number value , manager number na_n pick row2 manager number value party_num dcc3 manager1 manager2 number l21635789 sbas01030 a22677981 na_n number l21635789 sbas02030 na_n a22810282 number l21635789 sbas03030 na_n a21721880 party_num dcc3 manager1 manager2 number l21635789 sbas01030 a22677981 a22810282 number l21635789 sbas02030 na_n na_n number l21635789 sbas03030 na_n na_n	0
Q_194	panda overlay a column into row with a blank one	C_194_6	print ( string ) print ( string ) d = [ [ string , string , np . na_n , np . na_n ] , [ string , string , string , np . na_n ] , [ string , string , np . na_n , string ] ] df = pd . data_frame ( data = d , columns = c ) print ( df ) df . manager2 = df . manager2 . bfill ( ) . ffill ( ) df . loc [ df . manager1 . isnull ( ) , string ] = np . na_n print ( ) print ( df )	0
Q_194	panda overlay a column into row with a blank one	C_194_7	scenario number row number manager number na_n , manager number na_n pick row2 manager number row number manager number party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n na_n number l21635789 sbas02030 a22677981 na_n number l21635789 sbas03030 na_n a21721880 party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n na_n number l21635789 sbas02030 a22677981 a21721880 number l21635789 sbas03030 na_n na_n	0
Q_194	panda overlay a column into row with a blank one	C_194_8	print ( string ) print ( string ) d = [ [ string , string , np . na_n , string ] , [ string , string , np . na_n , np . na_n ] , [ string , string , string , string ] ] df = pd . data_frame ( data = d , columns = c ) print ( df ) df . manager2 = df . manager2 . bfill ( ) . ffill ( ) df . loc [ df . manager1 . isnull ( ) , string ] = np . na_n print ( ) print ( df )	0
Q_194	panda overlay a column into row with a blank one	C_194_9	scenario number row number manager number na_n , manager number value row3 has both manager number manager number party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n a21721880 number l21635789 sbas02030 na_n na_n number l21635789 sbas03030 a22677981 a21721882 party_num dcc3 manager1 manager2 number l21635789 sbas01030 na_n na_n number l21635789 sbas02030 na_n na_n number l21635789 sbas03030 a22677981 a21721882	0
Q_195	reshape array in array in array	C_195_0	import uproot4 import skhep_testdata events = uproot4 . open ( skhep_testdata . data_path ( string ) ) [ string ]	1
Q_195	reshape array in array in array	C_195_1	events . show ( filter_name = string ) name typename interpretation _ + _ + _ muon_px float [ ] as_jagged ( as_dtype ( string ) ) muon_py float [ ] as_jagged ( as_dtype ( string ) ) muon_pz float [ ] as_jagged ( as_dtype ( string ) ) muon_e float [ ] as_jagged ( as_dtype ( string ) ) muon_charge int32_t [ ] as_jagged ( as_dtype ( string ) ) muon_iso float [ ] as_jagged ( as_dtype ( string ) )	0
Q_195	reshape array in array in array	C_195_2	var = events . arrays ( filter_name = string ) var < array [ { muon_px [ _ number . number , number . number , . number ] } ] type = string muon_px string >	0
Q_195	reshape array in array in array	C_195_3	import awkward1 as ak ak . type ( muons ) number * { string var * float32 , string var * float32 , string var * float32 , string var * float32 , string var * int32 , string var * float32 }	0
Q_195	reshape array in array in array	C_195_4	muons [ number ] . tolist ( ) { string [ _ number . number , number . number ] , string [ _ number . number , number . number ] , string [ _ number . number , _ number . number ] , string [ number . number , number . number ] , string [ number , _ number ] , string [ number . number , number . number ] }	0
Q_195	reshape array in array in array	C_195_5	ak . num ( muons ) < array [ { muon_px number , . muon_iso number } ] type = string muon_px string muon_py string >	0
Q_195	reshape array in array in array	C_195_6	ak . num ( muons ) [ number ] . tolist ( ) { string number , string number , string number , string number , string number , string number }	0
Q_195	reshape array in array in array	C_195_7	ak . max ( ak . num ( muons ) ) number	0
Q_195	reshape array in array in array	C_195_8	ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) < array [ { muon_px [ _ number . number , number . number , . none ] } ] type = string muon_px string >	0
Q_195	reshape array in array in array	C_195_9	{ string [ _ number . number , number . number , none , none ] , string [ _ number . number , number . number , none , none ] , string [ _ number . number , _ number . number , none , none ] , string [ number . number , number . number , none , none ] , string [ number , _ number , none , none ] , string [ number . number , number . number , none , none ] }	0
Q_195	reshape array in array in array	C_195_10	ak . fill_none ( ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) , number ) [ number ] . tolist ( ) { string [ _ number . number , number . number , number . number , number . number ] , string [ _ number . number , number . number , number . number , number . number ] , string [ _ number . number , _ number . number , number . number , number . number ] , string [ number . number , number . number , number . number , number . number ] , string [ number , _ number , number , number ] , string [ number . number , number . number , number . number , number . number ] }	0
Q_195	reshape array in array in array	C_195_11	var = ak . unzip ( ak . fill_none ( ak . pad_none ( muons , ak . max ( ak . num ( muons ) ) ) , number ) ) var ( < array [ [ _ number . number , number . number , number , number , . number . number , number , number , number ] ] type = string > , < array [ [ _ number . number , number . number , number , number , . number , number , number ] ] type = string > , < array [ [ _ number . number , _ number . number , number , number , . number , number , number ] ] type = string > , < array [ [ number . number , number . number , number , number ] , . number . number , number , number , number ] ] type = string > , < array [ [ number , _ number , number , number ] , . [ _ number , number , number , number ] ] type = string > , < array [ [ number . number , number . number , number , number ] , . [ number , number , number , number ] ] type = string > )	0
Q_196	kera multiple input mask	C_196_0	var = np . ones ( [ number , number , number ] ) . astype ( np . float32 )	1
Q_196	kera multiple input mask	C_196_1	var = tf . keras . layers . input ( shape = ( number , number ) ) mask = tf . keras . layers . masking ( mask_value = _ np . inf ) ( var ) out = tf . keras . layers . dense ( number , kernel_initializer = tf . keras . initializers . ones ( ) , use_bias = false ) ( mask ) model_mask = tf . keras . models . model ( var , mask ) model = tf . keras . models . model ( var , out ) print ( model_mask ( inputs ) ) print ( model ( inputs ) )	0
Q_196	kera multiple input mask	C_196_2	inputs [ number , number , ] = _ np . inf	0
Q_196	kera multiple input mask	C_196_3	tf . tensor ( [ [ [ number . number . number . ] [ number . number . number . ] [ nan nan nan ] ] ] , shape = ( number , number , number ) , dtype = float32 ) tf . tensor ( [ [ [ number . ] [ number . ] [ nan ] ] ] , shape = ( number , number , number ) , dtype = float32 )	0
Q_196	kera multiple input mask	C_196_4	inputs [ number , number , number ] = _ np . inf	0
Q_196	kera multiple input mask	C_196_5	tf . tensor ( [ [ [ number . number . number . ] [ number . number . number . ] [ _ inf number . number . ] ] ] , shape = ( number , number , number ) , dtype = float32 ) tf . tensor ( [ [ [ number . ] [ number . ] [ _ inf ] ] ] , shape = ( number , number , number ) , dtype = float32 )	0
Q_196	kera multiple input mask	C_196_6	var = np . array ( [ [ [ number , number , number ] , [ number . number , number , number ] , [ number , number , number ] ] ] , dtype = np . float32 ) var [ , number , number ] = _ number var [ , number , number ] = _ number custom_mask = var . copy ( ) custom_mask [ var [ , , ] > = number ] = number custom_mask [ var [ , , ] < number ] = number	0
Q_196	kera multiple input mask	C_196_7	[ [ [ number . number . number . ] [ _ number . number . number . ] [ number . number . _ number . ] ] ] [ [ [ number . number . number . ] [ number . number . number . ] [ number . number . number . ] ] ]	0
Q_196	kera multiple input mask	C_196_8	var = tf . keras . layers . input ( shape = ( number , number ) ) input_mask = tf . keras . activations . relu ( var _ custom_mask * number ) out = tf . keras . layers . dense ( number , kernel_initializer = tf . keras . initializers . ones ( ) , use_bias = false ) ( input_mask ) model = tf . keras . models . model ( var , out ) print ( model ( inputs ) )	0
Q_196	kera multiple input mask	C_196_9	tf . tensor ( [ [ [ number . ] [ number . ] [ number . ] ] ] , shape = ( number , number , number ) , dtype = float32 )	0
Q_197	panda frequency of a specific value per group	C_197_0	var = df . groupby ( [ string , string ] ) var . size ( ) . unstack ( )	1
Q_197	panda frequency of a specific value per group	C_197_1	timeit pd . crosstab ( df . col1 , df . col2 )	0
Q_197	panda frequency of a specific value per group	C_197_2	timeit dfg = df . groupby ( string ) dfg [ string ] . value_counts ( ) . unstack ( )	0
Q_197	panda frequency of a specific value per group	C_197_3	timeit dfg = df . groupby ( [ string , string ] ) dfg . size ( ) . unstack ( )	0
Q_197	panda frequency of a specific value per group	C_197_4	var = pd . concat ( [ var for var in range ( number ) ] ) print ( f string )	0
Q_197	panda frequency of a specific value per group	C_197_5	timeit pd . crosstab ( df . col1 , df . col2 )	0
Q_197	panda frequency of a specific value per group	C_197_6	timeit dfg = df . groupby ( string ) dfg [ string ] . value_counts ( ) . unstack ( )	0
Q_197	panda frequency of a specific value per group	C_197_7	timeit dfg = df . groupby ( [ string , string ] ) dfg . size ( ) . unstack ( )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_0	in [ number ] a , x , y out [ number ] ( array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) , array ( [ number , number , number , number , number ] ) , array ( [ number , number , number , number , number ] ) )	1
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_1	in [ number ] x = np . diag ( x ) y = np . diag ( y )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_2	in [ number ] a_sp out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format >	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_3	in [ number ] x_sp = sparse . csr_matrix ( x ) y_sp = sparse . csr_matrix ( y ) in [ number ] x_sp out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in compressed sparse row format >	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_4	in [ number ] x_sp = sparse . diags ( x ) y_sp = sparse . diags ( y ) in [ number ] x_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements ( number diagonals ) in di_agonal format >	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_5	in [ number ] x a y out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_6	in [ number ] x a_sp y out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_7	in [ number ] x a_sp out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_8	in [ number ] x_sp a_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] x_sp a_sp y_sp out [ number ] < number x5 sparse matrix of type string numpy . float64 string with number stored elements in compressed sparse row format > in [ number ] _ . a out [ number ] array ( [ [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] , [ number . , number . , number . , number . , number . ] ] )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_9	in [ number ] x [ , none ] * a * y [ none , ] out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_10	in [ number ] y [ none , ] * a_sp	0
Q_198	multiplication of sparse matrix by diagonal matrix	C_198_11	in [ number ] a_sp . multiply ( y [ none , ] ) out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in co_ordinate format > in [ number ] _ . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ) in [ number ] a_sp . multiply ( y [ none , ] ) . multiply ( x [ , none ] ) out [ number ] < number x5 sparse matrix of type string numpy . int64 string with number stored elements in co_ordinate format > in [ number ] _ . a out [ number ] array ( [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] )	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_0	[ number , number , number , number , number , number , number , number , number , number , number ] mean = number stddev = number . number variance = number . number ( variance = stddev ^ number )	1
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_1	var = normalizer ( funding_features ) print ( var )	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_2	[ [ _ number . number number . number ] [ _ number . number number . number number ] [ number . number number . number ] [ number . number _ number . number ] [ _ number . number _ number . number number ] [ number . number number . number ] [ number . number _ number . number number ] [ number . _ number . number number ] [ _ number . number number . number ] [ number . number _ number . number number ] ]	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_3	"x0 [ number ] = number x0 "" [ number ] = ( number _ number ) / number . number = _ number . number ( it does match )"	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_4	y [ number ] string = ( x1 _ number . number ) / number . number	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_5	var = model . layers [ number ] . get_weights ( ) [ number ] biases = model . layers [ number ] . get_weights ( ) [ number ] print ( var ) print ( biases ) [ [ _ number . number ] [ _ number . number ] ] [ number . number ]	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_6	y [ number ] string = ( x1 _ number . number ) / number . number * _ number . number	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_7	"y "" = ( ( x0 _ number ) / number . number ) * _ number . number + ( x1 _ number . number ) / number . number * _ number . number + number . number"	0
Q_199	how to print out equation that multiple linear regression model be use in tensorflow	C_199_8	print ( model . predict ( [ [ number , number ] ] ) ) [ [ number . number ] ]	0
Q_200	python list comprehension _ use of any	C_200_0	for var in tar_list if var in tup lst . append ( tup )	1
Q_200	python list comprehension _ use of any	C_200_1	if any ( var in tup for var in tar_list )	0
Q_200	python list comprehension _ use of any	C_200_2	var = [ ( number , number , number ) , ( number , number ) , ( number , number ) , ( number , number ) ] tar_list = [ number , number ]	0
Q_200	python list comprehension _ use of any	C_200_3	var = [ ] for var in test_list for i in tar_list if i in var var . append ( var ) print ( var ) var = [ var for var in test_list if any ( i in var for i in tar_list ) ] print ( var )	0
Q_200	python list comprehension _ use of any	C_200_4	[ ( number , number , number ) , ( number , number , number ) ] [ ( number , number , number ) ]	0
Q_200	python list comprehension _ use of any	C_200_5	var = [ ] for var in test_list for i in tar_list if i in var var . append ( var ) break	0
Q_200	python list comprehension _ use of any	C_200_6	var = [ var for var in test_list for var in tar_list if var in var ]	0
Q_200	python list comprehension _ use of any	C_200_7	[ ( number , number , number ) , ( number , number , number ) ]	0
Q_201	insert column into array use scaler obj	C_201_0	var = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) print ( var ) print ( var [ , number ] ) print ( var [ , [ number ] ] ) var [ [ number number ] [ number number ] [ number number ] ] var [ , number ] [ number number number ] var [ , [ number ] ] [ [ number ] [ number ] [ number ] ]	1
Q_201	insert column into array use scaler obj	C_201_1	var = np . array ( [ [ number , number ] , [ number , number ] ] ) print ( var , string ) c4 = np . insert ( var , number , [ [ number , number ] , [ number , number ] ] , axis = number ) print ( c4 , string )	0
Q_201	insert column into array use scaler obj	C_201_2	a [ , number ] = [ a01 a11 ] = [ [ number number ] [ number number ] ]	0
Q_201	insert column into array use scaler obj	C_201_3	var = [ [ number ] a11 = [ [ number ] [ number ] ] [ number ] ]	0
Q_201	insert column into array use scaler obj	C_201_4	[ [ number number number number ] [ number number number number ] ]	0
Q_201	insert column into array use scaler obj	C_201_5	var = np . array ( [ [ number , number ] , [ number , number ] , [ number , number ] ] ) c11 = np . insert ( var , number , [ number , number ] , axis = number ) print ( c11 , string ) c12 = np . insert ( var , number , [ [ number ] , [ number ] ] , axis = number ) print ( c12 , string )	0
Q_201	insert column into array use scaler obj	C_201_6	a [ number , ] = [ a10 a11 ] = [ number number ]	0
Q_201	insert column into array use scaler obj	C_201_7	var = [ number ] a11 = [ number ]	0
Q_201	insert column into array use scaler obj	C_201_8	a [ number , ] = [ a10 a11 ] = [ [ number number ] [ number number ] ]	0
Q_201	insert column into array use scaler obj	C_201_9	var = [ [ number ] a11 = [ [ number ] [ number ] ] [ number ] ]	0
Q_201	insert column into array use scaler obj	C_201_10	[ [ number number ] [ number number ] [ number number ] [ number number ] ] [ [ number number ] [ number number ] [ number number ] [ number number ] [ number number ] ]	0
Q_202	panda dict column to column	C_202_0	df [ string ] = df [ string ] . apply ( lambda x x . get ( string ) )	1
Q_202	panda dict column to column	C_202_1	var = [ string , string ] d = [ [ number , { string number , string number } ] , [ number , { string number , string number } ] ] import pandas as pd df = pd . data_frame ( d , columns = var ) print ( df ) df [ string ] = df [ string ] . apply ( lambda x x . get ( string ) ) print ( df )	0
Q_202	panda dict column to column	C_202_2	customer_id rating number number { string number , string number } number number { string number , string number }	0
Q_202	panda dict column to column	C_202_3	customer_id rating overall_rating number number { string number , string number } number number number { string number , string number } number	0
Q_202	panda dict column to column	C_202_4	df [ string ] = pd . data_frame ( [ var for var in df [ string ] ] ) [ string ]	0
Q_202	panda dict column to column	C_202_5	var = [ string , string ] d = [ [ number , { string number , string number } ] , [ number , { string number , string number } ] ] import pandas as pd df = pd . data_frame ( d , columns = var ) print ( df ) df [ string ] = pd . data_frame ( [ var for var in df [ string ] ] ) [ string ]	0
Q_202	panda dict column to column	C_202_6	customer_id rating number number { string number , string number } number number { string number , string number }	0
Q_202	panda dict column to column	C_202_7	customer_id rating overall_rating number number { string number , string number } number number number { string number , string number } number	0
Q_202	panda dict column to column	C_202_8	var = [ string , string ] d = [ [ number , { string number , string number } ] , [ number , { string number , string number } ] , [ number , { string number . number , string number } ] , [ number , { string number } ] ] import pandas as pd df = pd . data_frame ( d , columns = var ) print ( df ) df [ string ] = df [ string ] . apply ( lambda x x . get ( string ) ) print ( df )	0
Q_202	panda dict column to column	C_202_9	customer_id rating number number { string number , string number } number number { string number , string number } number number { string number . number , string number } number number { string number }	0
Q_202	panda dict column to column	C_202_10	customer_id rating overall_rating number number { string number , string number } number . number number number { string number , string number } number . number number number { string number . number , string number } number . number number number { string number } na_n	0
Q_203	autocomplete fail when multiple key be press at once	C_203_0	import string from tkinter import * from tkinter import font	1
Q_203	autocomplete fail when multiple key be press at once	C_203_1	def default ( self ) string string string self . listbox . selection_set ( number ) self . ent_var . set ( string ) self . entry . config ( insertofftime = number , insertontime = number ) self . set_selection ( )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_2	def key_pressed ( self , event = none ) key = event . keysym if key = = string key = string if key in string . printable if self . entry . selection_present ( ) self . sel = self . entry . index ( string ) + number self . entry . delete ( string , string ) else self . sel = self . entry . index ( string ) + number value = self . ent_var . get ( ) + key self . ent_var . set ( value ) self . ent_index + = number self . entry . icursor ( self . ent_index ) self . auto_complete ( )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_3	self . entry . bind ( string , self . key_pressed )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_4	def backspace ( self , event = none ) value = self . entry . get ( ) [ _ number ] self . ent_var . set ( value ) if self . ent_index = number if self . entry . selection_present ( ) self . entry . delete ( string , string ) self . ent_index = len ( self . ent_var . get ( ) ) if self . entry [ string ] = = number	0
Q_203	autocomplete fail when multiple key be press at once	C_203_5	self . entry . bind ( string , self . backspace )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_6	def tab_completion ( self , event = none ) string string string value = self . ent_var . get ( ) self . entry . selection_range ( number , string ) self . entry . icursor ( string ) index = self . all_fonts . index ( value ) self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . entry . config ( insertofftime = number , insertontime = number )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_7	self . entry . bind ( string , self . tab_completion )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_8	def up_direction ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] if index > number index _ = number self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . listbox . see ( index ) self . ent_var . set ( self . all_fonts [ index ] ) self . entry . selection_range ( number , string ) return string	0
Q_203	autocomplete fail when multiple key be press at once	C_203_9	self . entry . bind ( string , self . up_direction )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_10	def down_direction ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] if index < len ( self . all_fonts ) _ number index + = number self . listbox . selection_clear ( number , string ) self . listbox . selection_set ( index ) self . listbox . see ( index ) self . ent_var . set ( self . all_fonts [ index ] ) self . entry . selection_range ( number , string ) return string	0
Q_203	autocomplete fail when multiple key be press at once	C_203_11	self . entry . bind ( string , self . down_direction )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_12	def button_click ( self , event = none ) string string string index = self . listbox . curselection ( ) [ number ] self . ent_var . set ( self . all_fonts [ index ] ) self . root . after ( number , self . set_selection )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_13	def set_selection ( self ) string string string self . entry . select_range ( number , string ) self . entry . focus ( )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_14	self . listbox . bind ( string , self . button_click )	0
Q_203	autocomplete fail when multiple key be press at once	C_203_15	def auto_complete ( self ) value = self . ent_var . get ( ) . strip ( ) . lower ( ) matched = [ var for var in self . lower_case if var . startswith ( value ) ] if matched matched = matched [ number ] index = self . lower_case . index ( matched ) self . ent_var . set ( self . all_fonts [ index ] ) if self . entry . index ( string ) = = len ( matched ) self . entry . selection_range ( number , string ) else self . entry . selection_range ( self . sel , string ) self . listbox . see ( index )	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_0	def rolling_pearson ( a , b , n ) a_sum = a . rolling ( n ) . sum ( ) b_sum = b . rolling ( n ) . sum ( ) ab_sum = ( a * b ) . rolling ( n ) . sum ( ) aa_sum = ( a * * number ) . rolling ( n ) . sum ( ) bb_sum = ( b * * number ) . rolling ( n ) . sum ( ) num = n * ab_sum _ a_sum * b_sum den = ( n * aa_sum _ a_sum * * number ) * ( n * bb_sum _ b_sum * * number ) return num / den * * ( number . number ) rolling_pearson ( df . a , df . b , number )	1
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_1	. number number . number e _ number number number number . number e _ number number number number . number e _ number number number number . number e _ number number number inf length number , dtype float64	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_2	a . cov ( b ) / ( a . var ( ) * b . var ( ) ) * * number . number	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_3	def welford_add ( existing_aggregate , new_value ) if pd . isna ( new_value ) return s ( count , mean , m2 ) = existing_aggregate count + = number delta = new_value _ mean mean + = delta / count delta2 = new_value _ mean m2 + = delta * delta2 return ( count , mean , m2 ) def welford_remove ( existing_aggregate , new_value ) if pd . isna ( new_value ) return s ( count , mean , m2 ) = existing_aggregate count _ = number delta = new_value _ mean mean _ = delta / count delta2 = new_value _ mean m2 _ = delta * delta2 return ( count , mean , m2 ) def finalize ( existing_aggregate ) ( count , mean , m2 ) = existing_aggregate ( mean , variance , sample_variance ) = ( mean , m2 / count if count > number else none , m2 / ( count _ number ) if count > number else none ) return ( mean , variance , sample_variance )	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_4	var = ( number , number , number ) for var in range ( len ( df . b ) ) if var > = n var = welford_remove ( var , df . b [ var _ n ] ) var = welford_add ( var , df . b [ var ] ) finalize ( var )	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_5	( number . number number , number . number e _ number , number . number e _ number )	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_6	df . b . rolling ( number ) . var ( )	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_7	number na_n number na_n number na_n number na_n number na_n . number number . number e _ number number number number . number e _ number number number number . number e _ number number number number . number e _ number number number number . number e _ number name b , length number , dtype float64	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_8	( df . b * * number ) . rolling ( n ) . sum ( ) _ df . b . rolling ( n ) . sum ( ) * * number / n	0
Q_204	how to tackle inconsistent result while use panda roll correlation	C_204_9	number na_n number na_n number na_n number na_n number na_n . number number . number number number . number number number . number number number . number number number . number name b , length number , dtype float64	0
Q_205	python syntax that divide multiple return value into separate row	C_205_0	import pandas as pd df = pd . data_frame ( { string [ string , string , string ] , string [ string , string , string ] , } )	1
Q_205	python syntax that divide multiple return value into separate row	C_205_1	animal link number monkey amazon . com number monkey bbc . com number monkey cnn . com number monkey fox . com number monkey abc . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_2	animal link number panda abcde . com number panda fghijk . com number panda lmnopq . com number panda rstuvw . com number panda xyz . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_3	animal link number tiger adobe . com number tiger facebook . com number tiger linkedin . com number tiger google . com number tiger citi . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_4	import pandas as pd df = pd . data_frame ( { string [ string ] , string [ string ] } ) print ( df ) df = ( df . set_index ( [ string ] ) . apply ( lambda x x . str . split ( string ) . explode ( ) ) . reset_index ( ) ) print ( df )	0
Q_205	python syntax that divide multiple return value into separate row	C_205_5	animal link number panda abcde . com , fghijk . com , lmnopq . com , rstuvw . com , xyz . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_6	animal link number panda abcde . com number panda fghijk . com number panda lmnopq . com number panda rstuvw . com number panda xyz . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_7	import pandas as pd df = pd . data_frame ( { string [ string , string , string ] , string [ string , string , string ] , } ) print ( df ) df = ( df . set_index ( [ string ] ) . apply ( lambda x x . str . split ( string ) . explode ( ) ) . reset_index ( ) ) print ( df )	0
Q_205	python syntax that divide multiple return value into separate row	C_205_8	animal link number panda abcde . com , fghijk . com , lmnopq . com , rstuvw . com , xyz . com number tiger adobe . com , facebook . com , linkedin . com , google . com , citi . com number monkey amazon . com , bbc . com , cnn . com , fox . com , abc . com	0
Q_205	python syntax that divide multiple return value into separate row	C_205_9	animal link number panda abcde . com number panda fghijk . com number panda lmnopq . com number panda rstuvw . com number panda xyz . com number tiger adobe . com number tiger facebook . com number tiger linkedin . com number tiger google . com number tiger citi . com number monkey amazon . com number monkey bbc . com number monkey cnn . com number monkey fox . com number monkey abc . com	0
Q_206	how to turn panda series into a matrix	C_206_0	var = pd . series ( [ number , number , number , number , number , number ] , index = [ string , string , string , string , string , string ] )	1
Q_206	how to turn panda series into a matrix	C_206_1	var = sr . reset_index ( ) var . columns = [ string , string ]	0
Q_206	how to turn panda series into a matrix	C_206_2	row_col data number a _ b number number a _ c number number a _ d number number b _ c number number b _ d number number c _ d number	0
Q_206	how to turn panda series into a matrix	C_206_3	var = pd . data_frame ( { string df . row_col . str [ _ number ] , string df . data } ) df_values = df . append ( var )	0
Q_206	how to turn panda series into a matrix	C_206_4	row_col data number a _ b number number a _ c number number a _ d number number b _ c number number b _ d number number c _ d number number b _ a number number c _ a number number d _ a number number c _ b number number d _ b number number d _ c number	0
Q_206	how to turn panda series into a matrix	C_206_5	df_values [ [ string , string ] ] = df_values . row_col . str . split ( string , number , expand = true )	0
Q_206	how to turn panda series into a matrix	C_206_6	row_col data row col number a _ b number a b number a _ c number a c number a _ d number a d number b _ c number b c number b _ d number b d number c _ d number c d number b _ a number b a number c _ a number c a number d _ a number d a number c _ b number c b number d _ b number d b number d _ c number d c	0
Q_206	how to turn panda series into a matrix	C_206_7	var = df_values [ [ string , string , string ] ] . pivot ( index = string , columns = string ) . fillna ( number ) . astype ( int )	0
Q_206	how to turn panda series into a matrix	C_206_8	data col a b c d row a number number number number b number number number number c number number number number d number number number number	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_0	transmission drivetrain fuel_type price number automatic all _ wheel drive diesel number number manual four _ wheel drive diesel number number cvt all _ wheel drive diesel number number automatic four _ wheel drive diesel number number manual four _ wheel drive gasoline number number cvt all _ wheel drive gasoline number number automatic four _ wheel drive gasoline number number manual four _ wheel drive gasoline number number cvt four _ wheel drive gasoline number number automatic four _ wheel drive flex number number manual all _ wheel drive flex number number cvt four _ wheel drive flex number number automatic four _ wheel drive flex number number manual all _ wheel drive flex number number cvt four _ wheel drive flex number	1
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_1	df . groupby ( [ string , string , string ] ) [ string ] . mean ( )	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_2	transmission drivetrain fuel_type automatic all _ wheel drive diesel number . number four _ wheel drive diesel number . number flex number . number gasoline number . number cvt all _ wheel drive diesel number . number gasoline number . number four _ wheel drive flex number . number gasoline number . number manual all _ wheel drive flex number . number four _ wheel drive diesel number . number gasoline number . number name price , dtype float64	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_3	( automatic , four _ wheel drive , diesel , mean ) ( ( automatic , all _ wheel drive , diesel , mean ) .	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_4	var = dict ( tuple ( df . groupby ( [ string , string , string ] ) ) ) var	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_5	var = groups [ string , string , string ]	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_6	transmission drivetrain fuel_type price number automatic all _ wheel drive diesel number	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_7	var = groups [ string , string , string ]	0
Q_207	split the group form by df groupby into multiple dataframes with those group value	C_207_8	transmission drivetrain fuel_type price number manual four _ wheel drive gasoline number number manual four _ wheel drive gasoline number	0
Q_208	determine polygon coordinate from custom txt map	C_208_0	raw < _ r string data < _ do . call ( string , strsplit ( read_lines ( text_connection ( raw ) ) , string ) )	1
Q_208	determine polygon coordinate from custom txt map	C_208_1	allnei < _ expand . grid ( _ number number , _ number number ) allnei < _ allnei [ allnei [ , number ] = number allnei [ , number ] = number , ] get_neighbors < _ function ( point , data ) { cand < _ t ( c ( point ) + t ( allnei ) ) cand [ cand [ , number ] > = number cand [ , number ] < = nrow ( data ) cand [ , number ] > = number cand [ , number ] < = ncol ( data ) , true ] }	0
Q_208	determine polygon coordinate from custom txt map	C_208_2	fill < _ function ( point , data , corners = matrix ( nrow = number , ncol = number ) , fill_with = string ) { if ( is . matrix ( point ) ) { point < _ matrix ( point , ncol = number ) } cand < _ get_neighbors ( point , data ) data [ point ] < _ fill_with corner_cand < _ which ( data [ cand ] = = string ) if ( length ( corner_cand ) ) { corners < _ unique ( rbind ( corners , cand [ corner_cand , ] ) ) } empty_cand < _ which ( data [ cand ] = = string ( cand [ , number ] = = point [ , number ] cand [ , number ] = = point [ , number ] ) ) if ( length ( empty_cand ) > number ) { for ( i in empty_cand ) { result < _ fill ( cand [ i , ] , data , corners , fill_with ) data < _ result data corners < _ unique ( rbind ( corners , result corners ) ) } } list ( data = data , corners = corners ) }	0
Q_208	determine polygon coordinate from custom txt map	C_208_3	find_regions < _ function ( data ) { regions < _ list ( ) reg < _ number empty < _ which ( data = = string , arr . ind = true ) while ( nrow ( empty ) > number ) { empty < _ empty [ number , ] results < _ fill ( empty , data , fill_with = reg ) regions < _ c ( regions , list ( results corners ) ) data < _ results data reg < _ reg + number empty < _ which ( data = = string , arr . ind = true ) } list ( data = data , regions = regions ) } result < _ find_regions ( data ) result regions	0
Q_208	determine polygon coordinate from custom txt map	C_208_4	[ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number [ [ number ] ] var1 var2 [ number , ] number number [ number , ] number number [ number , ] number number [ number , ] number number	0
Q_208	determine polygon coordinate from custom txt map	C_208_5	cat ( paste ( apply ( result data , number , paste , collapse = string ) , collapse = string ) )	0
Q_208	determine polygon coordinate from custom txt map	C_208_6	find_hit < _ function ( corner , corners , rvec , cvec ) { best < _ na best_dist < _ inf for ( i in number nrow ( corners ) ) { rdist < _ corners [ i , number ] _ corner [ , number ] cdist < _ corners [ i , number ] _ corner [ , number ] if ( sign ( rdist ) = = sign ( rvec ) sign ( cdist ) = = sign ( cvec ) ( ( rvec = = number cvec = = number ) ( rdist / rvec = = cdist / cvec ) ) ) { dist < _ rdist + cdist if ( dist < best_dist ) { best_dist < _ dist best < _ i } } } best }	0
Q_208	determine polygon coordinate from custom txt map	C_208_7	in_bounds < _ ( function ( data ) { function ( r , c ) { r > number r < = nrow ( data ) c > number c < = ncol ( data ) } } ) ( data )	0
Q_208	determine polygon coordinate from custom txt map	C_208_8	corners < _ which ( data = = string , arr . ind = true ) edges < _ list ( ) for ( i in number ( nrow ( corners ) _ number ) ) { corner < _ corners [ i , , drop = false ] rest < _ corners [ _ ( number i ) , , drop = false ] r < _ corner [ , number ] c < _ corner [ , number ] for ( dr in c ( _ number , number , number ) ) { for ( dc in c ( _ number , number , number ) ) { if ( in_bounds ( r + dr , c + dc ) ( dr = number dc = number ) data [ r + dr , c + dc ] = string ) { hit < _ find_hit ( corner , rest , dr , dc ) if ( is . na ( hit ) ) { edges < _ c ( edges , list ( c ( i , i + hit ) ) ) } } } } } edges	0
Q_208	determine polygon coordinate from custom txt map	C_208_9	library ( igraph ) dd < _ as . data . frame ( do . call ( rbind , edges ) ) dd [ ] < _ lapply ( dd , as . character ) g < _ graph_from_data_frame ( dd , directed = false ) vnames < _ as . character ( number nrow ( corners ) ) v ( g ) [ vnames ] row < _ corners [ , number ] v ( g ) [ vnames ] col < _ corners [ , number ] plot ( g )	0
Q_208	determine polygon coordinate from custom txt map	C_208_10	as . data . frame ( vertex_attr ( g ) )	0
Q_208	determine polygon coordinate from custom txt map	C_208_11	v ( g ) [ vnames ] y < _ _ corners [ , number ] v ( g ) [ vnames ] x < _ corners [ , number ] plot ( g )	0
Q_209	real solution to a system of two equation in sage	C_209_0	sage x , y = var ( string ) sage p1 = y ^ number _ x ^ number + x _ number = = number sage p2 = y _ number = = number sage sols = solve ( [ p1 , p2 ] , x , y , solution_dict = true ) sage sols	1
Q_209	real solution to a system of two equation in sage	C_209_1	sage real_sols = [ var for var in sols if all ( v in rr for v in var . values ( ) ) ] sage real_sols [ { x number . number , y number . number } ]	0
Q_209	real solution to a system of two equation in sage	C_209_2	sage x = polygen ( zz ) sage p = x ^ number + ( _ number ) * x + number sage p x ^ number _ x + number	0
Q_209	real solution to a system of two equation in sage	C_209_3	sage ( p _ number ^ number ) . roots ( aa , multiplicities = false ) [ number . number ? ]	0
Q_209	real solution to a system of two equation in sage	C_209_4	sage ( p _ number ^ number ) . roots ( rr , multiplicities = false ) [ number . number ]	0
Q_209	real solution to a system of two equation in sage	C_209_5	sage e = elliptic_curve ( [ _ number , number ] ) sage e elliptic curve defined by y ^ number = x ^ number _ x + number over rational field	0
Q_209	real solution to a system of two equation in sage	C_209_6	sage p = e . ambient_space ( ) sage p projective space of dimension number over rational field	0
Q_209	real solution to a system of two equation in sage	C_209_7	sage p . gens ( ) ( x , y , z ) sage x , y , z = p . gens ( )	0
Q_209	real solution to a system of two equation in sage	C_209_8	sage l = p . curve ( [ y _ number * z ] ) sage l projective plane curve over rational field defined by y _ number * z	0
Q_209	real solution to a system of two equation in sage	C_209_9	sage e . intersection_points ( l , f = aa ) [ ( number . number ? number number ) ]	0
Q_210	how to calculate the operability ratio per month on python	C_210_0	var = pd . data_frame ( { string pd . to_datetime ( [ string , string , string , string ] ) , string pd . to_datetime ( [ string , string , string , string ] ) , } )	1
Q_210	how to calculate the operability ratio per month on python	C_210_1	def intervals ( row ) if row . start . month = = row . end . month return [ ( row . start , row . end ) ] middle = row . end . replace ( day = number , hour = number , minute = number , second = number ) return [ ( row . start , middle ) , ( middle , row . end ) ]	0
Q_210	how to calculate the operability ratio per month on python	C_210_2	df [ string ] = df . apply ( intervals , axis = number )	0
Q_210	how to calculate the operability ratio per month on python	C_210_3	var = var . explode ( string ) [ string ] var = pd . data_frame ( var . tolist ( ) , columns = [ string , string ] )	0
Q_210	how to calculate the operability ratio per month on python	C_210_4	df [ string ] = df [ string ] . dt . strftime ( string )	0
Q_210	how to calculate the operability ratio per month on python	C_210_5	df [ string ] = ( df [ string ] _ df [ string ] ) . astype ( string )	0
Q_210	how to calculate the operability ratio per month on python	C_210_6	df [ string ] = df [ string ] . apply ( lambda d d . replace ( day = number , hour = number , second = number ) ) df [ string ] = df [ string ] . apply ( lambda d d . replace ( month = ( d . month + number ) number , year = d . year + int ( d . month = = number ) ) ) df [ string ] = ( df [ string ] _ df [ string ] ) . astype ( string )	0
Q_210	how to calculate the operability ratio per month on python	C_210_7	var = var . groupby ( string ) . agg ( { string string , string string } ) var [ string ] = var [ string ] / var [ string ]	0
Q_211	how to input user image to predict with tensorflow	C_211_0	[ string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string , string ]	1
Q_211	how to input user image to predict with tensorflow	C_211_1	var = tf . data . experimental . var train_ds = train_ds . cache ( ) . shuffle ( number ) . prefetch ( buffer_size = var ) val_ds = val_ds . cache ( ) . prefetch ( buffer_size = var ) normalization_layer = layers . experimental . preprocessing . rescaling ( number . / number ) normalized_ds = train_ds . map ( lambda x , y ( normalization_layer ( x ) , y ) ) image_batch , labels_batch = next ( iter ( normalized_ds ) ) first_image = image_batch [ number ] print ( np . min ( first_image ) , np . max ( first_image ) )	0
Q_211	how to input user image to predict with tensorflow	C_211_2	var = number model = sequential ( [ layers . experimental . preprocessing . rescaling ( number . / number , input_shape = ( img_height , img_width , number ) ) , layers . conv2_d ( number , number , padding = string , activation = string ) , layers . max_pooling2_d ( ) , layers . conv2_d ( number , number , padding = string , activation = string ) , layers . max_pooling2_d ( ) , layers . conv2_d ( number , number , padding = string , activation = string ) , layers . max_pooling2_d ( ) , layers . flatten ( ) , layers . dense ( number , activation = string ) , layers . dense ( var ) ] ) model . compile ( optimizer = string , loss = tf . keras . losses . sparse_categorical_crossentropy ( from_logits = true ) , metrics = [ string ] ) epochs = number history = model . fit ( train_ds , validation_data = val_ds , epochs = epochs )	0
Q_211	how to input user image to predict with tensorflow	C_211_3	epoch number / number number / number [ = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ] _ number s number ms / step _ loss number . number number _ accuracy number . number _ val_loss number . number _ val_accuracy number . number	0
Q_211	how to input user image to predict with tensorflow	C_211_4	mkdir _ p saved_model model . save ( string )	0
Q_211	how to input user image to predict with tensorflow	C_211_5	var = tf . keras . models . load_model ( string )	0
Q_211	how to input user image to predict with tensorflow	C_211_6	import cv2 im2 = cv2 . imread ( string ) im2 = cv2 . resize ( im2 , ( number , number ) )	0
Q_211	how to input user image to predict with tensorflow	C_211_7	( number , number , number ) ( number , number , number , number ) this image most likely belongs to character_3_ga with a number . number percent confidence .	0
Q_211	how to input user image to predict with tensorflow	C_211_8	var = im . resize ( size ) var = tf . expand_dims ( var , number ) predictions = loaded_model . predict ( var ) score = tf . nn . softmax ( predictions [ number ] )	0
Q_212	selenium with python _ find an element after a select one	C_212_0	if driver . find_element_by_xpath ( string src string ) . is_displayed ( ) driver . find_element_by_partial_link_text ( string ) . click ( )	1
Q_212	selenium with python _ find an element after a select one	C_212_1	var = web_driver_wait ( driver , number ) if var . until ( ec . visibility_of_element_located ( ( by . xpath , string ) ) ) . is_displayed ( ) driver . find_element_by_partial_link_text ( string ) . click ( )	0
Q_212	selenium with python _ find an element after a select one	C_212_2	/ / img [ src = string ] / a [ contains ( href , string ) ]	0
Q_212	selenium with python _ find an element after a select one	C_212_3	from selenium . webdriver . support . ui import web_driver_wait from selenium . webdriver . common . by import by from selenium . webdriver . support import expected_conditions as ec	0
Q_212	selenium with python _ find an element after a select one	C_212_4	/ / img [ contains ( src , string ) ] / following _ sibling a	0
Q_212	selenium with python _ find an element after a select one	C_212_5	browser . find_element_by_xpath ( string images string ) browser . find_element_by_partial_link_text ( string ) . click ( )	0
Q_212	selenium with python _ find an element after a select one	C_212_6	browser . find_element_by_xpath ( string images string ) . click ( )	0
Q_212	selenium with python _ find an element after a select one	C_212_7	/ / img [ contains ( src , string ) ] / following _ sibling a [ contains ( href , string ) ]	0
Q_212	selenium with python _ find an element after a select one	C_212_8	/ / img [ contains ( src , string ) ] / . / following _ sibling td / a	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_0	var = df . pivot_table ( values = string , index = [ string , string , string ] , columns = [ string ] , aggfunc = string ) ptable_1 = var . where ( ( var . groupby ( level = number ) . rank ( ascending = false ) = = number . ) ( var > number ) ) . dropna ( how = string ) print ( ptable_1 )	1
Q_213	get row data associate with max value after pivot the df use panda	C_213_1	col2 test1 test2 test3 test4 test5 col4 col5 col6 input1 result1 number na_n na_n number . number na_n na_n result2 number number . number na_n na_n na_n na_n input2 result2 number number . number number . number na_n number . number na_n input3 result3 number number . number number . number number . number na_n na_n input4 result4 number number . number number . number na_n na_n na_n input5 result4 number na_n na_n number . number na_n na_n	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_2	var = ptable [ ( ( ptable . groupby ( level = number ) . rank ( ascending = false ) = = number . ) . any ( axis = number ) ) ( ptable > number ) . any ( axis = number ) ] print ( var	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_3	col2 test1 test2 test3 test4 test5 col4 col5 col6 input1 result1 number number . number number . number number . number na_n na_n result2 number number . number na_n na_n na_n na_n input2 result2 number number . number number . number number . number number . number na_n input3 result3 number number . number number . number number . number na_n na_n input4 result4 number number . number number . number na_n na_n na_n input5 result4 number na_n na_n number . number na_n na_n	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_4	var = df . pivot_table ( values = string , index = [ string , string , string ] , columns = [ string ] , aggfunc = string ) ptable_1 = var . where ( var . groupby ( level = number ) . rank ( ascending = false ) = = number . ) . dropna ( how = string ) print ( ptable_1 )	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_5	col2 test1 test2 test3 test4 test5 col4 col5 col6 input1 result1 number na_n number . number number . number na_n na_n result2 number number . number na_n na_n na_n na_n input2 result2 number number . number number . number number . number number . number na_n input3 result3 number number . number number . number number . number na_n na_n input4 result4 number number . number number . number na_n na_n na_n input5 result4 number na_n na_n number . number na_n na_n input6 result1 number na_n na_n na_n na_n number . number	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_6	var = ptable [ ( ptable . groupby ( level = number ) . rank ( ascending = false ) = = number . ) . any ( axis = number ) ] print ( var )	0
Q_213	get row data associate with max value after pivot the df use panda	C_213_7	col2 test1 test2 test3 test4 test5 col4 col5 col6 input1 result1 number number . number number . number number . number na_n na_n result2 number number . number na_n na_n na_n na_n input2 result2 number number . number number . number number . number number . number na_n input3 result3 number number . number number . number number . number na_n na_n input4 result4 number number . number number . number na_n na_n na_n input5 result4 number na_n na_n number . number na_n na_n input6 result1 number na_n na_n na_n na_n number . number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_0	var = ( var . iloc [ _ number ] [ [ string , * var . columns . difference ( [ string ] ) ] ] . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string , string string } ) ) m = var [ string ] . ne ( var [ string ] . shift ( ) ) var [ string ] = np . where ( m , var [ string ] , var [ string ] ) var [ string ] = np . where ( m , string , string ) var [ string ] = m + number var = var [ [ string , string , string , string ] ]	1
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_1	level var_name value count number number ethnic hispanic or latino number number number race black or african american number number number race white number number number ethnic not hispanic or latino number number number race black or african american number number number race white number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_2	df . iloc [ _ number ] [ [ string , * df . columns . difference ( [ string ] ) ] ]	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_3	race all black or african american white ethnic hispanic or latino number number number not hispanic or latino number number number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_4	df . iloc [ _ number ] [ [ string , * df . columns . difference ( [ string ] ) ] ] . stack ( ) . reset_index ( name = string ) . rename ( columns = { string string , string string } )	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_5	var_name value count number hispanic or latino all number number hispanic or latino black or african american number number hispanic or latino white number number not hispanic or latino all number number not hispanic or latino black or african american number number not hispanic or latino white number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_6	var = df [ string ] . ne ( df [ string ] . shift ( ) )	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_7	number true number false number false number true number false number false name var_name , dtype bool	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_8	df [ string ] = np . where ( m , df [ string ] , df [ string ] )	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_9	var_name value count number hispanic or latino hispanic or latino number number hispanic or latino black or african american number number hispanic or latino white number number not hispanic or latino not hispanic or latino number number not hispanic or latino black or african american number number not hispanic or latino white number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_10	df [ string ] = np . where ( m , string , string ) df [ string ] = m + number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_11	var_name value count level number ethnic hispanic or latino number number number race black or african american number number number race white number number number ethnic not hispanic or latino number number number race black or african american number number number race white number number	0
Q_214	how to transform pivot table with multi level column and axis name to row	C_214_12	var = var [ [ string , string , string , string ] ]	0
Q_215	year to date return in panda data_frame	C_215_0	df . index . to_series ( ) . dt . year . rename ( string ) date number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number number _ number number _ number number number name year , dtype int64	1
Q_215	year to date return in panda data_frame	C_215_1	var = df [ string ] . groupby ( year ) . last ( ) var year number number . number number number . number number number . number name dollar , dtype float64	0
Q_215	year to date return in panda data_frame	C_215_2	var = year . map ( last_per_year . shift ( ) ) var date number _ number number _ number number na_n number _ number number _ number number na_n number _ number number _ number number na_n number _ number number _ number number na_n number _ number number _ number number na_n number _ number _ number number number . number number _ number number _ number number number . number number _ number number _ number number number . number number _ number number _ number number number . number number _ number number _ number number number . number name year , dtype float64	0
Q_215	year to date return in panda data_frame	C_215_3	year . reset_index ( ) . merge ( last_per_year . shift ( ) , how = string , on = string ) . set_index ( string ) [ string ]	0
Q_215	year to date return in panda data_frame	C_215_4	df [ string ] = df [ string ] / ref_dollar_yearly _ number df dollar ytd date number _ number number _ number number number . number na_n number _ number number _ number number number . number number na_n number _ number number _ number number number . number na_n number _ number number _ number number number . number na_n number _ number number _ number number number . number na_n number _ number _ number number number . number number . number number _ number number _ number number number . number _ number . number number number _ number number _ number number number . number number number . number number number _ number number _ number number number . number number . number number number _ number number _ number number number . number number . number	0
Q_215	year to date return in panda data_frame	C_215_5	df [ string ] . groupby ( year ) . last ( )	0
Q_215	year to date return in panda data_frame	C_215_6	df [ string ] . groupby ( year ) . nth ( _ number )	0
Q_215	year to date return in panda data_frame	C_215_7	df [ string ] . groupby ( pd . grouper ( level = string , freq = string ) ) . last ( )	0
Q_215	year to date return in panda data_frame	C_215_8	last_per_year . reindex ( pd . range_index ( last_per_year . index . min ( ) , last_per_year . index . max ( ) + number ) ) . shift ( ) number na_n number number . number number na_n number na_n number na_n number na_n number number . number name dollar , dtype float64	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_0	df1 value_1 date_1 number _ number _ number number number number number . number number _ number _ number number number number number number . number number _ number _ number number number number number number . number number _ number _ number number number number number na_n df2 value_2 date_2 number _ number _ number number number number number . number number _ number _ number number number number number . number number _ number _ number number number number na_n number _ number _ number number number number number number . number number _ number _ number number number number number number . number . number _ number _ number number number number number number . number number _ number _ number number number number number number . number number _ number _ number number number number number na_n number _ number _ number number number number number number . number number _ number _ number number number number number . number	1
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_1	df2 [ string ] = df2 [ string ] . interpolate ( )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_2	var = pd . interval_index . from_tuples ( list ( zip ( df1 . index _ pd . date_offset ( hours = number , minutes = number ) , df1 . index + pd . date_offset ( hours = number , minutes = number ) ) ) )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_3	df1 [ string ] = pd . cut ( df1 . index , bins = ii ) df2 [ string ] = pd . cut ( df2 . index , bins = ii )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_4	var = pd . merge ( df2 , df1 , on = string , how = string ) . set_index ( string ) var = ( var [ string ] . lt ( number ) var [ string ] . gt ( number ) ) . astype ( int ) . to_frame ( string ) . set_index ( df2 . index )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_5	var = df2 . index . append ( pd . datetime_index ( df1 . index . to_series ( ) . resample ( string ) . groups . keys ( ) ) ) . sort_values ( ) . drop_duplicates ( ) dfx = dfx . reindex ( var ) . ffill ( ) . astype ( int )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_6	dfx [ string ] = dfx . index . to_series ( ) . diff ( _ number ) . abs ( ) . fillna ( pd . timedelta ( number ) ) . dt . components . apply ( lambda x f string hours string minutes string , axis = string ) dfx . loc [ dfx [ string ] = = number , string ] = string dfx = dfx . reindex ( df2 . index )	0
Q_216	compare two timeseries dataframes base on some condition in panda	C_216_7	dfx count duration date_2 number _ number _ number number number number number number number number _ number _ number number number number number number number number _ number _ number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number number number _ number _ number number number number number number number	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_0	df [ string ] = df [ string ] . map ( { string true , string false } )	1
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_1	var = df . loc [ df [ string ] , [ string , string ] ]	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_2	process_id date number number _ number number _ number number _ number number number _ number number _ number _ number number number number _ number number _ number number _ number number	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_3	def printfunc ( ) df [ string ] = pd . eval ( df [ string ] . astype ( str ) . str . title ( ) ) out = df . loc [ df [ string ] , [ string , string ] ] . t for var in out print ( string , out [ var ] . values [ number ] , string , out [ var ] . values [ number ] , string ) printfunc ( )	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_4	process id number _ number due date number _ number number _ number process id number _ number due date number _ number _ number number process id number _ number due date number _ number number _ number number	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_5	df [ string ] = pd . eval ( df [ string ] . astype ( str ) . str . title ( ) )	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_6	df [ string ] = pd . eval ( df [ string ] )	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_7	df . loc [ df [ string ] , [ string , string ] ] . rename ( columns = { string string } ) . agg ( string . join )	0
Q_217	panda _ how to print specific element of a dataframe when a column be true	C_217_8	process_id number _ number , number _ number , number _ number due date number _ number number _ number , number _ number _ number number , number _ number number _ number number dtype object	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_0	var = pd . data_frame ( [ [ var , var . x , var . y ] for var , var in data . items ( ) for var in wkb . loads ( var , hex = true ) ] , columns = [ string , string , string ] )	1
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_1	id x y number a number . number number . number number a number . number number . number number b _ number . number number . number number b number . number _ number . number number c number . number number . number number c number . number _ number . number	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_2	def fn ( data ) return pd . data_frame ( [ [ var , point . x , point . y ] for var , var in data . items ( ) for point in wkb . loads ( var , hex = true ) ] , columns = [ string , string , string ] )	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_3	timeit fn ( data ) number s number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_4	def fn2 ( data ) df = pd . data_frame ( columns = [ string , string , string ] ) for var , var in data . items ( ) for point in wkb . loads ( var , hex = true ) df = df . append ( { string var , string point . x , string point . y } , ignore_index = true ) return df	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_5	timeit fn2 ( data ) number . number ms number . number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_6	def fn3 ( data ) return pd . concat ( ( ( pd . concat ( ( pd . series ( { string key , string var . x , string var . y } ) for var in wkb . loads ( wkb_val , hex = true ) ) , axis = number ) ) for key , wkb_val in data . items ( ) ) , axis = number ) . t	0
Q_218	elegant way to convert shapely multipoint to a panda dataframe	C_218_7	timeit fn3 ( data ) number . number ms number s per loop ( mean std . dev . of number runs , number loops each )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_0	in [ number ] df out [ number ] y x number number [ [ number , number ] , [ number , number ] ] number number [ [ number , number ] , [ number , number ] ]	1
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_1	in [ number ] df [ string ] . values out [ number ] array ( [ number , number ] )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_2	in [ number ] df [ string ] . values out [ number ] array ( [ string , string ] , dtype = object )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_3	in [ number ] from ast import literal_eval in [ number ] df [ string ] . apply ( literal_eval ) out [ number ] number [ [ number , number ] , [ number , number ] ] number [ [ number , number ] , [ number , number ] ] name x , dtype object in [ number ] df [ string ] . apply ( literal_eval ) . values out [ number ] array ( [ list ( [ [ number , number ] , [ number , number ] ] ) , list ( [ [ number , number ] , [ number , number ] ] ) ] , dtype = object )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_4	in [ number ] df [ string ] . apply ( literal_eval ) . to_list ( ) out [ number ] [ [ [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] ] ]	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_5	in [ number ] np . array ( _ ) out [ number ] array ( [ [ [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] ] ] )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_6	in [ number ] np . stack ( df [ string ] . apply ( literal_eval ) . values ) out [ number ] array ( [ [ [ number , number ] , [ number , number ] ] , [ [ number , number ] , [ number , number ] ] ] )	0
Q_219	in python tensorflow how to convert string representation of tagint _d array from text file into something tf can use	C_219_7	in [ number ] df [ string ] . apply ( literal_eval ) . apply ( np . array ) . values out [ number ] array ( [ array ( [ [ number , number ] , [ number , number ] ] ) , array ( [ [ number , number ] , [ number , number ] ] ) ] , dtype = object )	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_0	date cycle number number _ number number _ number number c01 number number _ number number _ number number c01 number number _ number number _ number c02 number number _ number number _ number c02 number number _ number number _ number c03	1
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_1	from_date to_date number number _ number number _ number number number _ number number _ number number number _ number number _ number number _ number number _ number number number _ number number _ number number _ number number _ number number	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_2	df1 [ string ] = pd . to_datetime ( df1 [ string ] , format = string ) df2 [ string ] = pd . to_datetime ( df2 [ string ] , format = string ) df2 [ string ] = pd . to_datetime ( df2 [ string ] , format = string )	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_3	df2 . index = pd . interval_index . from_arrays ( df2 [ string ] , df2 [ string ] , closed = string ) df2 from_date to_date [ number _ number number _ number number , number _ number number _ number ] number _ number number _ number number number _ number number _ number [ number _ number number _ number , number _ number number _ number ] number _ number number _ number number _ number number _ number [ number _ number number _ number , number _ number number _ number number ] number _ number number _ number number _ number number _ number number	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_4	def get_date ( d ) try return df2 . loc [ d ] . name except key_error pass df1 [ string ] = df1 [ string ] . apply ( get_date )	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_5	date cycle index number number _ number number _ number number c01 [ number _ number number _ number number , number _ number number _ number ] number number _ number number _ number number c01 [ number _ number number _ number number , number _ number number _ number ] number number _ number number _ number c02 [ number _ number number _ number , number _ number number _ number ] number number _ number number _ number c02 na_n number number _ number number _ number c03 [ number _ number number _ number , number _ number number _ number number ]	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_6	df2 . reset_index ( ) . merge ( df1 , on = string ) [ [ string , string , string ] ] from_date to_date cycle number number _ number number _ number number number _ number number _ number c01 number number _ number number _ number number number _ number number _ number c01 number number _ number number _ number number _ number number _ number c02 number number _ number number _ number number _ number number _ number number c03	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_7	df3 . groupby ( [ string , string ] , as_index = false ) . first ( )	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_8	from_date to_date cycle number number _ number number _ number number number _ number number _ number c01 number number _ number number _ number number _ number number _ number c02 number number _ number number _ number number _ number number _ number number c03	0
Q_220	assign value if the date from one dataframe be in range in another dataframe	C_220_9	var = pd . data_frame ( { string [ string , string , string , string , string ] , string [ string , string , string , string , string ] } ) df2 = pd . data_frame ( { string [ string , string , string ] , string [ string , string , string ] } ) var [ string ] = pd . to_datetime ( var [ string ] , format = string ) df2 [ string ] = pd . to_datetime ( df2 [ string ] , format = string ) df2 [ string ] = pd . to_datetime ( df2 [ string ] , format = string ) df2 . index = pd . interval_index . from_arrays ( df2 [ string ] , df2 [ string ] , closed = string ) def get_date ( d ) try return df2 . loc [ d ] . name except key_error pass var [ string ] = var [ string ] . apply ( get_date ) df3 = df2 . reset_index ( ) . merge ( var , on = string ) [ [ string , string , string ] ] df3 . groupby ( [ string , string ] , as_index = false ) . first ( )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_0	def merge ( d1 , d2 ) result = { }	1
Q_221	python way of merge two dictionnaries base on a common value	C_221_1	next ( iter ( d . keys ( ) ) )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_2	var = { string string , string string , string string } print ( var . keys ( ) )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_3	next ( iter ( d . keys ( ) ) )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_4	zip ( d1 . values ( ) , d2 . values ( ) )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_5	var = { string string , string string , string string } b = { string string , string string , string string } print ( var . values ( ) )	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_6	[ . [ pk1 ] , . [ pk2 ] ]	0
Q_221	python way of merge two dictionnaries base on a common value	C_221_7	[ d1 [ pk1 ] , d2 [ pk2 ] ]	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_0	var = pd . series ( np . random . choice ( [ number , number ] , size = number , p = [ number . number , number . number ] ) , name = string )	1
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_1	number number number number number number number number number number . number number number number number number number number number number name anom , length number , dtype int64	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_2	var = s . groupby ( ( ( s _ s . shift ( ) . fillna ( number ) ) . eq ( number ) . cumsum ( ) * s ) ) . transform ( len ) * s	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_3	( s _ s . shift ( ) . fillna ( number ) ) . eq ( number )	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_4	var = s . loc [ length < number ] s_anom = s . drop ( var . index ) ax = var . plot ( marker = string , ls = string ) s_anom . plot ( marker = string , ls = string , ax = ax , color = string )	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_5	var = s . plot ( ) s_anom . plot ( marker = string , ls = string , var = var , color = string )	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_6	s . astype ( bool ) number true number false number false number false number false . number false number true number true number false number true name anom , length number , dtype bool	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_7	var = s . loc [ s . astype ( bool ) ] s_anom = s . loc [ s . astype ( bool ) ] ax = var . plot ( marker = string , ls = string ) s_anom . plot ( marker = string , ls = string , ax = ax , color = string )	0
Q_222	how to mark data as anomaly base on specific condition in each interval	C_222_8	var = s . loc [ s . astype ( bool ) ] ax = s . plot ( ) var . plot ( marker = string , ls = string , ax = ax , color = string )	0
Q_223	use timedelta in loop	C_223_0	var = pd . data_frame ( { string range ( number ) , string [ string ] * number + [ string ] * number , string [ string ] * number + [ string ] * number + [ string ] * number , string pd . to_datetime ( [ string ] * number ) , string pd . date_range ( string , periods = number , freq = string ) } ) var [ string ] = var . max_date _ var . min_date	1
Q_223	use timedelta in loop	C_223_1	prod_loc code_1 code_2 min_date max_date date_diff number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number _ number number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number _ number number days number number number number number number number _ number number _ number number _ number number _ number number days number number number number number number number _ number number _ number number _ number number _ number number number days number number number number number number number _ number number _ number number _ number number _ number number number days	0
Q_223	use timedelta in loop	C_223_2	var = list ( range ( number , number , number ) ) + [ df . date_diff . max ( ) . days + number ] cut = pd . cut ( df . date_diff . dt . days , var , right = false )	0
Q_223	use timedelta in loop	C_223_3	var = df . groupby ( [ string , cut ] ) . prod_loc . count ( ) . unstack ( number )	0
Q_223	use timedelta in loop	C_223_4	date_diff [ number , number ) [ number , number ) [ number , number ) [ number , number ) code_1 number number number number number number number number number number number number	0
Q_223	use timedelta in loop	C_223_5	var = df . groupby ( [ string , string , cut ] ) . prod_loc . count ( ) . unstack ( number )	0
Q_223	use timedelta in loop	C_223_6	date_diff [ number , number ) [ number , number ) [ number , number ) [ number , number ) code_1 code_2 number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number number	0
Q_223	use timedelta in loop	C_223_7	df [ string ] = cut result = df . pivot_table ( index = [ string ] , columns = string , values = string , aggfunc = string ) result = df . pivot_table ( index = [ string , string ] , columns = string , values = string , aggfunc = string )	0
Q_223	use timedelta in loop	C_223_8	var = pd . data_frame ( { string pd . to_datetime ( [ string , string ] ) , string pd . to_datetime ( [ string , string ] ) } ) var [ string ] = ( var . max_date _ var . min_date )	0
Q_223	use timedelta in loop	C_223_9	min_date max_date date_diff number number _ number number _ number number _ number _ number number days number number _ number number _ number number _ number number _ number number days	0
Q_223	use timedelta in loop	C_223_10	var = max_days_by_order . date_diff . where ( max_days_by_order . date_diff . dt . days > number )	0
Q_223	use timedelta in loop	C_223_11	number na_t number number days name date_diff , dtype timedelta64 [ ns ]	0
Q_224	regex _ negative expression match	C_224_0	^ ( ? p < symbol > [ ^ , ] { number , number } ) ( ? , [ a _ z . ] * ) * s + _ s + ( ? p < title > ( ? ( ? q d ) . ) * ? ) s * ( ? p < period > q d ) ? s ? ( ? p < year > ( ? number number ) d { number } ) ?	1
Q_224	regex _ negative expression match	C_224_1	( ? ( ? q d ) . ) * ?	0
Q_224	regex _ negative expression match	C_224_2	( ? p < year > number number d { number } )	0
Q_224	regex _ negative expression match	C_224_3	( ? p < year > number number d { number } )	0
Q_224	regex _ negative expression match	C_224_4	( ? p < year > ( ? number number ) d { number } ) ?	0
Q_224	regex _ negative expression match	C_224_5	( ? p < symbol > [ ^ , ] { number , number } )	0
Q_224	regex _ negative expression match	C_224_6	( ? , [ a _ z . ] * ) *	0
Q_224	regex _ negative expression match	C_224_7	( ? p < title > ( ? ( ? q d ) . ) * ? )	0
Q_224	regex _ negative expression match	C_224_8	( ? p < period > q d ) ?	0
Q_224	regex _ negative expression match	C_224_9	( ? p < year > ( ? number number ) d { number } ) ?	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_0	in [ number ] df2 out [ number ] col1 col2_x col3_x col2_y col3_y number z number [ ] number [ ] number x number [ ] number [ ] number c number [ ] number [ ] number v number [ ] number [ ] number b number [ ] number [ ] number n number [ ] number [ ]	1
Q_225	iterate over numpy array np ndindex make a mess	C_225_1	in [ number ] arr = df2 . to_numpy ( ) in [ number ] arr out [ number ] array ( [ [ string , number , list ( [ ] ) , number , list ( [ ] ) ] , [ string , number , list ( [ ] ) , number , list ( [ ] ) ] , [ string , number , list ( [ ] ) , number , list ( [ ] ) ] , [ string , number , list ( [ ] ) , number , list ( [ ] ) ] , [ string , number , list ( [ ] ) , number , list ( [ ] ) ] , [ string , number , list ( [ ] ) , number , list ( [ ] ) ] ] , dtype = object )	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_2	in [ number ] arr1 = [ arr [ var , number number ] _ arr [ var , number number ] for var in np . ndindex ( len ( arr ) ) ] in [ number ] arr1 out [ number ] [ array ( [ [ number ] ] , dtype = object ) , array ( [ [ number ] ] , dtype = object ) , array ( [ [ number ] ] , dtype = object ) , array ( [ [ number ] ] , dtype = object ) , array ( [ [ number ] ] , dtype = object ) , array ( [ [ number ] ] , dtype = object ) ]	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_3	in [ number ] df2 [ string ] _ df2 [ string ] out [ number ] number number number number number number number number number number number number dtype int64	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_4	in [ number ] arr [ , number ] _ arr [ , number ] out [ number ] array ( [ number , number , number , number , number , number ] , dtype = object )	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_5	in [ number ] df2 [ string ] . to_numpy ( ) _ df2 [ string ] . to_numpy ( ) out [ number ] array ( [ number , number , number , number , number , number ] )	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_6	[ np . where ( df2 [ var , number number ] = df2 [ var , number number ] , np . append ( df2 [ var , number number ] , ( df2 [ var , number number ] _ df2 [ var , number number ] ) _ ( df2 [ var , number number ] . sum ( ) ) ) , df2 [ var , number number ] ) for var in np . ndindex ( len ( df2 ) ) ]	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_7	[ np . where ( var [ number ] = var [ number ] , np . append ( var [ number ] , ( var [ number ] _ var [ number ] ) _ sum ( var [ number ] ) ) , var [ number ] ) for var in arr ]	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_8	[ array ( [ ] , dtype = float64 ) , . array ( [ ] , dtype = float64 ) ]	0
Q_225	iterate over numpy array np ndindex make a mess	C_225_9	in [ number ] df2 out [ number ] col1 col2_x col3_x col2_y col3_y number z number [ ] number [ number ] number x number [ ] number [ number ] number c number [ ] number [ number ] number v number [ ] number [ number ] number b number [ ] number [ number ] number n number [ ] number [ number ]	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_0	/ / div [ text ( ) = string ]	1
Q_226	python problem with locate element selenium chorme webdriver	C_226_1	/ / div [ text ( ) = string ]	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_2	( / / div [ contains ( class , string ) ] ) [ number ]	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_3	( / / div [ contains ( class , string ) ] ) [ number ]	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_4	driver . find_element_by_xpath ( string month string ) . click ( )	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_5	var = web_driver_wait ( driver , number ) var . until ( ec . element_to_be_clickable ( ( by . xpath , string mv _ button _ base mv _ hyperlink _ button string ) ) ) . click ( )	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_6	from selenium . webdriver . support . ui import web_driver_wait from selenium . webdriver . common . by import by from selenium . webdriver . support import expected_conditions as ec	0
Q_226	python problem with locate element selenium chorme webdriver	C_226_7	var = driver . find_elements ( by . xpath , string mv _ button _ base mv _ hyperlink _ button string ) var [ number ] . click ( )	0
Q_227	how low in dataframe to find all element of list	C_227_0	def idxall ( series , elements ) for var , var in enumerate ( series . to_numpy ( ) )	1
Q_227	how low in dataframe to find all element of list	C_227_1	var = pd . data_frame ( { string np . random . choice ( list ( string . ascii_lowercase ) , size = number ) } )	0
Q_227	how low in dataframe to find all element of list	C_227_2	timeit tdy_idxall ( df . mycol , list ( string . ascii_lowercase ) )	0
Q_227	how low in dataframe to find all element of list	C_227_3	timeit henry_ecker_np_unique ( df . mycol , list ( string . ascii_lowercase ) )	0
Q_227	how low in dataframe to find all element of list	C_227_4	timeit u12_forward_idxmax ( df . mycol , list ( string . ascii_lowercase )	0
Q_227	how low in dataframe to find all element of list	C_227_5	timeit corralien_idxall ( df . mycol , list ( string . ascii_lowercase ) )	0
Q_227	how low in dataframe to find all element of list	C_227_6	var = pd . data_frame ( { string list ( string ) } ) elements = list ( string ) idxall ( var . mycol , elements )	0
Q_227	how low in dataframe to find all element of list	C_227_7	var = pd . data_frame ( { string list ( string ) } ) elements = list ( string ) idxall ( var . mycol , elements )	0
Q_227	how low in dataframe to find all element of list	C_227_8	var = pd . data_frame ( { string list ( string ) } ) elements = list ( string ) idxall ( var . mycol , elements )	0
Q_228	python select by rotation from multiple list	C_228_0	[ var [ var ] for var , var in enumerate ( [ file1 , file2 , file3 , file4 ] ) ] [ number , number , number , number ]	1
Q_228	python select by rotation from multiple list	C_228_1	var = list ( range ( number , number ) ) file2 = list ( range ( number , number ) ) file3 = list ( range ( number , number ) ) file4 = list ( range ( number , number ) ) files = [ var , file2 , file3 , file4 ] cycles = min ( map ( len , files ) ) / / len ( files ) r = [ var [ var ] for var , var in enumerate ( files * cycles ) ] print ( r ) [ number , number , number , number , number , number , number , number , number , number , number , number ]	0
Q_228	python select by rotation from multiple list	C_228_2	var = { var [ var ] for var , var in enumerate ( files * rotations ) } print ( var ) { number , number , number , number , number , number , number , number , number , number }	0
Q_228	python select by rotation from multiple list	C_228_3	var = [ file1 , file2 , file3 , file4 ] r = [ var [ var len ( var ) ] for var , var in enumerate ( zip ( * var ) ) ] print ( r ) [ number , number , number , number , number , number , number , number , number , number , number , number , number , number ]	0
Q_228	python select by rotation from multiple list	C_228_4	partial _ file1 [ number ] number number number [ number ] number number number [ number ] number number number [ number ] number file2 number [ number ] number number number [ number ] number number number [ number ] number number number [ number ] file3 number number [ number ] number number number [ number ] number number number [ number ] number number number file4 number number number [ number ] number number number [ number ] number number number [ number ] number number	0
Q_228	python select by rotation from multiple list	C_228_5	var = { var [ var len ( files ) ] for var , var in enumerate ( zip ( * files ) ) } print ( var ) { number , number , number , number , number , number , number , number , number , number , number }	0
Q_228	python select by rotation from multiple list	C_228_6	def get_rotated ( * files ) return { var [ var len ( files ) ] for var , var in enumerate ( zip ( * files ) ) }	0
Q_228	python select by rotation from multiple list	C_228_7	def get_rotated ( * files ) return { n for var , var in enumerate ( files ) for n in var [ var len ( files ) ] }	0
Q_228	python select by rotation from multiple list	C_228_8	def get_rotated ( file1 , file2 , file3 , file4 ) return { * file1 [ number ] , * file2 [ number number ] , * file3 [ number number ] , * file4 [ number number ] }	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_0	in [ number ] n , m = number , number in [ number ] unigram = np . arange ( n * m * number ) . reshape ( n , m , number ) in [ number ] seq = np . arange ( m ) in [ number ] b_seq = np . broadcast_to ( seq , ( n , m ) )	1
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_1	in [ number ] i = number unigram [ np . arange ( n ) , i , b_seq [ , i ] ] out [ number ] array ( [ number , number , number , number , number ] )	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_2	in [ number ] i = np . arange ( m ) [ , none ] in [ number ] unigram [ np . arange ( n ) , i , b_seq [ , i ] ] out [ number ] array ( [ [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] , . [ [ number , number , number , number , number ] , [ number , number , number , number , number ] , [ number , number , number , number , number ] ] ] )	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_3	in [ number ] i = np . arange ( m ) unigram [ np . arange ( n ) [ , none ] , i , b_seq [ , i ] ] out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_4	unigram [ np . arange ( n ) [ , none ] , i , b_seq ]	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_5	unigram [ np . arange ( n ) [ , none ] , i , seq ]	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_6	in [ number ] i , j = np . ix_ ( np . arange ( n ) , np . arange ( m ) ) in [ number ] unigram [ i , j , seq ]	0
Q_229	how to vectorize a numpy for loop that have a multiple index access	C_229_7	in [ number ] unigram out [ number ] array ( [ [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] , [ [ number , number , number , number ] , [ number , number , number , number ] , [ number , number , number , number ] ] , .	0
Q_230	python re how to match any number even those with comma decimal	C_230_0	d ( ? [ d , . ] * d + ) ?	1
Q_230	python re how to match any number even those with comma decimal	C_230_1	var = string import re re . findall ( r string , var )	0
Q_230	python re how to match any number even those with comma decimal	C_230_2	[ string , string , string , string , string , string , string ]	0
Q_230	python re how to match any number even those with comma decimal	C_230_3	b [ d , . ] * d + b	0
Q_230	python re how to match any number even those with comma decimal	C_230_4	var = string import re re . findall ( r string , var )	0
Q_230	python re how to match any number even those with comma decimal	C_230_5	[ string , string , string , string , string , string ]	0
Q_230	python re how to match any number even those with comma decimal	C_230_6	var = string import re re . findall ( r string , var )	0
Q_230	python re how to match any number even those with comma decimal	C_230_7	[ string , string , string , string , string , string ]	0
Q_231	how to return item in list after list be match against data set in python	C_231_0	def find_matching_keywords ( query , keywords ) return { var for var in keywords if var in query }	1
Q_231	how to return item in list after list be match against data set in python	C_231_1	var = [ string , string , string , string , string ] queries = [ string , string , string , string , string , string , string , string , string , string , ]	0
Q_231	how to return item in list after list be match against data set in python	C_231_2	var = { var find_matching_keywords ( var . lower ( ) , seasons ) for var in queries }	0
Q_231	how to return item in list after list be match against data set in python	C_231_3	for var , var in query_to_keywords . items ( ) print ( var , var )	0
Q_231	how to return item in list after list be match against data set in python	C_231_4	fall crafts for kids { string } winter crafts for kids { string } spring crafts for kids { string } fall craft ideas for kids { string } sum_mer crafts for kids { string } autumn crafts for kids { string } easy winter crafts for kids { string } spring craft ideas for kids { string } fun summer crafts for kids { string } winter craft ideas for kids { string }	0
Q_231	how to return item in list after list be match against data set in python	C_231_5	var = { string [ string , string , string , string , string ] , string [ string , string ] , }	0
Q_231	how to return item in list after list be match against data set in python	C_231_6	def find_matching_keywords_with_categories ( query , category_to_keywords ) unfiltered_result = { var find_matching_keywords ( query , var ) for var , var in category_to_keywords . items ( ) } return { var var for ( var , var ) in unfiltered_result . items ( ) if var }	0
Q_231	how to return item in list after list be match against data set in python	C_231_7	var = { var find_matching_keywords_with_categories ( var . lower ( ) , category_to_keywords ) for var in queries }	0
Q_231	how to return item in list after list be match against data set in python	C_231_8	fall crafts for kids { string { string } } winter crafts for kids { string { string } } spring crafts for kids { string { string } } fall craft ideas for kids { string { string } } sum_mer crafts for kids { string { string } } autumn crafts for kids { string { string } } easy winter crafts for kids { string { string } , string { string } } spring craft ideas for kids { string { string } } fun summer crafts for kids { string { string } } winter craft ideas for kids { string { string } }	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_0	in [ number ] initial , final = number , number in [ number ] z = np . linspace ( initial , final , number ) in [ number ] z out [ number ] array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] )	1
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_1	in [ number ] a = np . array ( [ [ number , z ] , [ number , number ] ] , object ) in [ number ] a out [ number ] array ( [ [ number , array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ) ] , [ number , number ] ] , dtype = object ) in [ number ] a . shape out [ number ] ( number , number )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_2	in [ number ] l = np . eye ( number ) in [ number ] l [ number , number ] = number in [ number ] np . matmul ( l , a ) out [ number ] array ( [ [ number . number , array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ) ] , [ number . number , array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) ] ] , dtype = object )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_3	in [ number ] c = np . array ( [ [ z ] , [ z ] ] ) in [ number ] c out [ number ] array ( [ [ [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ] , [ [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ] ] ) in [ number ] c . shape out [ number ] ( number , number , number )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_4	in [ number ] b = out [ number ] in [ number ] np . matmul ( b , c ) traceback ( most recent call last ) file string , line number , in < module > np . matmul ( b , c ) value_error matmul input operand number has a mismatch in its core dimension number , with gufunc signature ( n ? , k ) , ( k , m ? ) _ > ( n ? , m ? ) ( size number is different from number ) in [ number ] b . shape out [ number ] ( number , number ) in [ number ] c . shape out [ number ] ( number , number , number )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_5	in [ number ] c = np . array ( [ z , z ] ) in [ number ] c . shape out [ number ] ( number , number ) in [ number ] np . matmul ( b , c ) out [ number ] array ( [ [ array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) , array ( [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] ) , . array ( [ number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number ] ) , array ( [ number . , number . , number . , number . , number . , number . , number . , number . , number . , number . , number . ] ) ] ] , dtype = object ) in [ number ] _ . shape out [ number ] ( number , number )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_6	in [ number ] c = np . empty ( ( number , number ) , object ) in [ number ] c [ , number ] = [ z , z ] in [ number ] c out [ number ] array ( [ [ array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ) ] , [ array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ) ] ] , dtype = object )	0
Q_232	python numpy matrix multiplication mismatch in core dimension	C_232_7	in [ number ] d = np . matmul ( b , c ) in [ number ] d . shape out [ number ] ( number , number ) in [ number ] d out [ number ] array ( [ [ array ( [ number . , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . number , number . ] ) ] , [ array ( [ number . , number . number , number . number , number . number , number . number , number . , number . number , number . number , number . number , number . number , number . ] ) ] ] , dtype = object )	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_0	import socket import sys import os port = int ( os . getenv ( string ) ) sock = socket . socket ( socket . af_inet , socket . sock_stream ) server_address = ( string , port ) print ( string . format ( * server_address ) ) sock . bind ( server_address ) sock . listen ( ) while true print ( string ) connection , client_address = sock . accept ( ) try print ( string , client_address ) while true data = connection . recv ( number ) print ( string . format ( data ) ) if data print ( string ) connection . sendall ( data ) else print ( string , client_address ) break finally connection . close ( )	1
Q_233	server_client connection in kubernetes cluster use python socket	C_233_1	from python number _ alpine workdir / app copy server . py . cmd [ string , string ]	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_2	docker build _ no _ cache _ t q69936079 _ server . docker tag q69936079 _ server gcr . io / < project_id > / q69936079 _ server docker push gcr . io / < project_id > / q69936079 _ server	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_3	from python number _ alpine workdir / app copy client . py . cmd [ string , string ]	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_4	docker build _ no _ cache _ t q69936079 _ client . docker tag q69936079 _ client gcr . io / < project_id > / q69936079 _ client docker push gcr . io / < project_id > / q69936079 _ client	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_5	api_version apps / v1 kind deployment metadata name server _ deployment spec selector match_labels app server replicas number template metadata labels app server spec containers _ name server image string env _ name pythonunbuffered value string _ name listen_port value string	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_6	api_version apps / v1 kind deployment metadata name client _ deployment spec selector match_labels app client replicas number template metadata labels app client spec containers _ name client image string env _ name pythonunbuffered value string _ name server_address value my _ server _ service _ name server_port value string	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_7	api_version v1 kind service metadata name my _ server _ service spec type cluster_ip selector app server ports _ protocol tcp port number	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_8	k get all name ready status restarts age pod / client _ deployment _ number dd5d675ff _ pvwd4 number / number running number number m pod / server _ deployment _ number bd44cc68 _ w6jns number / number running number number m name type cluster _ ip external _ ip port ( s ) age service / kubernetes cluster_ip number . number . number . number < none > number / tcp number h service / my _ server _ service cluster_ip number . number . number . number < none > number / tcp number m name ready up _ to _ date available age deployment . apps / client _ deployment number / number number number number m deployment . apps / server _ deployment number / number number number number m name desired current ready age replicaset . apps / client _ deployment _ number dd5d675ff number number number number m replicaset . apps / server _ deployment _ number bd44cc68 number number number number m	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_9	k logs _ f deployment . apps / server _ deployment starting up on number . number . number . number port number waiting for a connection connection from ( string , number ) received b string sending data back to the client received b string no data from ( string , number ) waiting for a connection connection from ( string , number ) received b string sending data back to the client received b string no data from ( string , number )	0
Q_233	server_client connection in kubernetes cluster use python socket	C_233_10	k logs _ f deployment . apps / client _ deployment connection	0
Q_234	loop through each line in a json file and filter the result	C_234_0	var = [ ] with open ( string , string ) as file for var in file if string emoji string number string in var var . append ( var )	1
Q_234	loop through each line in a json file and filter the result	C_234_1	with open ( string , string ) as file new_data = string . join ( filtered_json ) file . write ( new_data )	0
Q_234	loop through each line in a json file and filter the result	C_234_2	import json filtered_json = [ ] with open ( string , string ) as file for var in file j = json . loads ( var ) if int ( j [ list ( j . keys ( ) ) [ number ] ] [ number ] [ string ] [ string ] ) = = number filtered_json . append ( j )	0
Q_234	loop through each line in a json file and filter the result	C_234_3	{ string [ { string { string string } } ] } { string [ { string { string string } } ] }	0
Q_234	loop through each line in a json file and filter the result	C_234_4	{ string { string { string number } } , string { string { string number } } }	0
Q_234	loop through each line in a json file and filter the result	C_234_5	import json with open ( string , string ) as file j = json . load ( file ) filtered_json = { } for var in j . keys ( ) if j [ var ] [ string ] [ string ] = = number filtered_json [ var ] = j [ var ]	0
Q_234	loop through each line in a json file and filter the result	C_234_6	with open ( string , string ) as file j = json . load ( file ) filtered_data = { var var for var , var in j . items ( ) if var [ string ] [ string ] = = number }	0
Q_234	loop through each line in a json file and filter the result	C_234_7	with open ( string , string ) as file json . dump ( filtered_json , file )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_0	in [ number ] y , x = np . mgrid [ _ number number number , _ number number number ] in [ number ] y . shape out [ number ] ( number , number ) in [ number ] x . shape out [ number ] ( number , number )	1
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_1	in [ number ] stack = np . dstack ( ( x , y ) ) in [ number ] stack . shape out [ number ] ( number , number , number )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_2	in [ number ] stack1 = np . stack ( ( x , y ) ) in [ number ] stack1 . shape out [ number ] ( number , number , number )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_3	in [ number ] y , x = np . ogrid [ _ number number number , _ number number number ] in [ number ] y . shape out [ number ] ( number , number ) in [ number ] x . shape out [ number ] ( number , number )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_4	in [ number ] def polynomial ( x , y ) . return x * * number + y * * number . in [ number ] polynomial ( x , y ) . shape out [ number ] ( number , number )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_5	in [ number ] polynomial ( stack [ . , number ] , stack [ . , number ] ) . shape out [ number ] ( number , number ) in [ number ] polynomial ( stack1 [ number ] , stack1 [ number ] ) . shape out [ number ] ( number , number )	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_6	pdf ( x , mean = none , cov = number , allow_singular = false ) x array_like quantiles , with the last axis of x denoting the components .	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_7	adjust quantiles array so that last axis labels the components of each data point .	0
Q_235	what be necessary for a function to be able to take stack num_py argument	C_235_8	def polynomial ( x , y = none ) if y is none x , y = x [ . , number ] , x [ . , number ] return x * * number + y * * number	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_0	import matplotlib . pyplot as plt import pandas as pd import numpy as np df = pd . data_frame ( { string np . random . choice ( [ string , string , string ] , number ) , string pd . categorical . from_codes ( codes = np . random . randint ( number , number , number ) , categories = [ f string for var in range ( number , number ) ] ) , string np . random . randint ( number , number , number ) } ) df [ string ] = pd . categorical ( df [ string ] , categories = [ string , string , string ] )	1
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_1	df . pivot_table ( index = string , columns = string , values = string )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_2	df . pivot_table ( index = string , columns = string , values = string ) . plot . bar ( rot = number , width = number . number )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_3	df . pivot_table ( index = string , columns = string , values = string ) . plot . bar ( rot = number , width = number . number )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_4	var = df . pivot_table ( index = string , columns = string , values = string ) var . t . plot . bar ( rot = number , width = number . number )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_5	import seaborn as sns ax = sns . barplot ( data = df , x = string , y = string , hue = string ) ax . legend ( bbox_to_anchor = [ number . number number , number . number number ] , loc = string ) plt . tight_layout ( ) plt . show ( )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_6	import matplotlib . pyplot as plt import pandas as pd import numpy as np df = pd . data_frame ( { string np . arange ( number ) , * * { f string np . random . randint ( number , number , number ) / number for var in range ( number , number ) } } )	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_7	gender q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 number number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number number number number . number number . number number . number number . number number . number number . number number . number number . number number . number number . number	0
Q_236	how to draw a multi_bar graph base off a table make by groupby function in python	C_236_8	df [ string ] = pd . categorical . from_codes ( df [ string ] , categories = [ string , string , string ] ) df . set_index ( string ) . t . plot . bar ( rot = number , width = number . number )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_0	df . drop ( string , axis = number , inplace = true )	1
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_1	df . drop ( df . index [ row_number ] , inplace = true )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_2	import datetime df . date = pd . to_datetime ( df . date ) df = df . set_index ( string )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_3	df . rename ( columns = { string string , string string } , inplace = true )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_4	var = var [ [ string , string , . ] ]	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_5	df . dropna ( axis = number , how = string )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_6	var = df . var . tolist ( ) for var in var try if ( df [ var ] . dtypes = = string ) df [ var ] = pd . to_datetime ( df [ var ] ) . if ( df [ var ] . dtypes = = string ) ( var = string ) df . drop ( var , axis = number , inplace = true ) except value_error pass	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_7	import datetime df . date = pd . to_datetime ( df . date ) df [ string ] = df . date . dt . month df [ string ] = df . date . dt . year df = df . set_index ( string ) df . groupby ( [ string , string ] ) . mean ( )	0
Q_237	how to clean and rearrange a dataframe with pair of date and price column into a df with common date index	C_237_8	import pandas as pd import numpy as np df = pd . read_excel ( string ) columns = df . columns . tolist ( ) for var in columns if ( df [ var ] . isnull ( ) . sum ( ) > number ) df . drop ( var , axis = number , inplace = true ) columns = df . columns . tolist ( ) import itertools count_date = itertools . count ( number ) count_price = itertools . count ( number ) for var in columns if ( df [ var ] . dtypes = = string ) df . rename ( columns = { var f string } , inplace = true ) else df . rename ( columns = { var f string } , inplace = true ) columns = df . columns . tolist ( ) merged = df [ [ columns [ number ] , columns [ number ] ] ] . set_index ( string ) k = number for i in range ( number , len ( columns ) _ number , number ) merged = pd . merge ( merged , df [ [ columns [ i ] , columns [ i + number ] ] ] . set_index ( f string ) , how = string , left_index = true , right_index = true ) k + = number	0
Q_238	how to get field of nest numpy structure array	C_238_0	in [ number ] c = [ ( string , string ) , ( string , string ) ] . a = [ ( string , string ) , ( string , c , number ) ] . arr = np . zeros ( number , dtype = a ) in [ number ] arr out [ number ] array ( [ ( b string , [ ( number . , number . ) , ( number . , number . ) ] ) , ( b string , [ ( number . , number . ) , ( number . , number . ) ] ) ] , dtype = [ ( string , string ) , ( string , [ ( string , string ) , ( string , string ) ] , ( number , ) ) ] )	1
Q_238	how to get field of nest numpy structure array	C_238_1	in [ number ] arr . dtype . names out [ number ] ( string , string ) in [ number ] arr [ string ] out [ number ] array ( [ [ ( number . , number . ) , ( number . , number . ) ] , [ ( number . , number . ) , ( number . , number . ) ] ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_238	how to get field of nest numpy structure array	C_238_2	in [ number ] arr [ string ] . dtype . names out [ number ] ( string , string ) in [ number ] arr [ string ] [ string ] out [ number ] array ( [ [ number . , number . ] , [ number . , number . ] ] )	0
Q_238	how to get field of nest numpy structure array	C_238_3	in [ number ] arr [ number ] [ string ] [ string ] = [ number , number ] in [ number ] arr [ number ] [ string ] [ string ] = [ number , number ] in [ number ] arr out [ number ] array ( [ ( b string , [ ( number . , number . ) , ( number . , number . ) ] ) , ( b string , [ ( number . , number . ) , ( number . , number . ) ] ) ] , dtype = [ ( string , string ) , ( string , [ ( string , string ) , ( string , string ) ] , ( number , ) ) ] )	0
Q_238	how to get field of nest numpy structure array	C_238_4	in [ number ] arr [ string ] [ string ] out [ number ] array ( [ [ number . , number . ] , [ number . , number . ] ] ) in [ number ] arr [ string ] [ string ] [ [ number , number ] , [ number , number ] ] out [ number ] array ( [ number . , number . ] ) in [ number ] arr [ string ] [ [ number , number ] , [ number , number ] ] out [ number ] array ( [ ( number . , number . ) , ( number . , number . ) ] , dtype = [ ( string , string ) , ( string , string ) ] )	0
Q_238	how to get field of nest numpy structure array	C_238_5	in [ number ] arr . dtype . fields out [ number ] mappingproxy ( { string ( dtype ( string ) , number ) , string ( dtype ( ( [ ( string , string ) , ( string , string ) ] , ( number , ) ) ) , number ) } )	0
Q_238	how to get field of nest numpy structure array	C_238_6	in [ number ] arr . itemsize out [ number ] number in [ number ] arr . dtype . str out [ number ] string	0
Q_238	how to get field of nest numpy structure array	C_238_7	in [ number ] arr [ string ] . dtype . str out [ number ] string	0
Q_238	how to get field of nest numpy structure array	C_238_8	in [ number ] arr [ [ string ] ] out [ number ] array ( [ ( [ ( number . , number . ) , ( number . , number . ) ] , ) , ( [ ( number . , number . ) , ( number . , number . ) ] , ) ] , dtype = { string [ string ] , string [ ( [ ( string , string ) , ( string , string ) ] , ( number , ) ) ] , string [ number ] , string number } ) in [ number ] arr [ string ] [ [ string ] ] out [ number ] array ( [ [ ( number . , ) , ( number . , ) ] , [ ( number . , ) , ( number . , ) ] ] , dtype = { string [ string ] , string [ string ] , string [ number ] , string number } )	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_0	var = var . resample ( string ) . fillna ( none ) var [ string ] , var [ string ] = ( var [ string ] . fillna ( var [ string ] . ffill ( ) ) , var [ string ] . fillna ( var [ string ] . bfill ( ) ) ) var = var . ffill ( )	1
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_1	open high low close number _ number number _ number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_2	( df . resample ( string ) . fillna ( none ) . assign ( close = lambda d d [ string ] . bfill ( ) )	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_3	open high low close number _ number number _ number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_4	( df . resample ( string ) . fillna ( none ) . assign ( open = lambda d d [ string ] . fillna ( d [ string ] . ffill ( ) ) )	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_5	open high low close number _ number number _ number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number number . number number . number	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_6	( df . resample ( string ) . fillna ( none ) . assign ( open = lambda d d [ string ] . ffill ( ) , close = lambda d d [ string ] . bfill ( ) , high = lambda d d [ string ] . interpolate ( ) ) )	0
Q_239	how to resample ohlc data properly in panda custom fill method per column	C_239_7	open high low close number _ number number _ number number number number number . number number . number number . number number . number number _ number number _ number number number number number number . number number . number na_n number . number number _ number number _ number number number number number number . number number . number number . number number . number	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_0	var = pandas . data_frame ( { string list ( pandas . date_range ( string , periods = number , freq = string ) ) + list ( pandas . date_range ( string , periods = number , freq = string ) ) , string [ string ] * number + [ string ] * number , string numpy . random . randint ( number , number , number ) } )	1
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_1	times colors value number number _ number number _ number number number number number red number number number _ number number _ number number number number number red number number number _ number number _ number number number number number red number number number _ number number _ number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number number red number number number _ number number _ number number number number number blue number number number _ number number _ number number number number number blue number number number _ number number _ number number number number number blue number number number _ number number _ number number number number number blue number number number _ number number _ number number number number number number blue number number number _ number number _ number number number number number number blue number number number _ number number _ number number number number number number blue number number number _ number number _ number number number number number number blue number number number _ number number _ number number number number number number blue number number number _ number number _ number number number number number number blue number	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_2	var = df . pivot ( index = string , columns = [ string ] , values = [ string ] )	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_3	value colors blue red times number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_4	df2 . plot ( ) pyplot . show ( )	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_5	var = var . droplevel ( number , axis = number ) var . plot ( ) pyplot . show ( )	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_6	var = df [ df [ string ] = = string ] red = df [ df [ string ] = = string ] pyplot . plot ( var [ string ] , var [ string ] ) pyplot . plot ( red [ string ] , red [ string ] ) pyplot . show ( )	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_7	def plot_it ( group , values ) pyplot . plot ( values [ string ] , values [ string ] ) df . groupby ( [ string ] ) . apply ( plot_it ) pyplot . show ( )	0
Q_240	how to plot many line from stack dataframe column in one plot python	C_240_8	var = df [ df [ string ] = = string ] red = df [ df [ string ] = = string ] pyplot . plot ( range ( len ( var ) ) , var [ string ] ) pyplot . plot ( range ( len ( red ) ) , red [ string ] ) pyplot . show ( )	0
Q_241	regex for time_zone special case be ignore	C_241_0	( [ < > ] ) ? ( [ number _ number ] { number } ) ( [ number _ number ] { number } ) ( ? ( [ + _ ] ) ( [ number number ] ) ( ? d { number } b ) ) ? ( ? ( [ + _ ] ) ( [ number _ number ] { number } ) ( [ number _ number ] { number } ) ( ? ( [ + _ ] ) ( [ number number ] ) ( ? d { number } b ) ) ? ) ?	1
Q_241	regex for time_zone special case be ignore	C_241_1	( [ number _ number ] { number } )	0
Q_241	regex for time_zone special case be ignore	C_241_2	( [ number _ number ] { number } )	0
Q_241	regex for time_zone special case be ignore	C_241_3	( ? ( [ + _ ] ) ( [ number number ] ) ( ? d { number } b ) ) ?	0
Q_241	regex for time_zone special case be ignore	C_241_4	( [ number number ] ) ( ? d { number } b )	0
Q_241	regex for time_zone special case be ignore	C_241_5	( [ number _ number ] { number } )	0
Q_241	regex for time_zone special case be ignore	C_241_6	( [ number _ number ] { number } )	0
Q_241	regex for time_zone special case be ignore	C_241_7	( ? ( [ + _ ] ) ( [ number number ] ) ( ? d { number } b ) ) ?	0
Q_242	convert a text file with different key value pair to a csv file	C_242_0	pd . data_frame . from_records ( dict ( var . split ( string ) for var in var . split ( string ) ) for var in lines )	1
Q_242	convert a text file with different key value pair to a csv file	C_242_1	{ string string , string string , string string }	0
Q_242	convert a text file with different key value pair to a csv file	C_242_2	var = string var . split ( string ) [ string , string , string ]	0
Q_242	convert a text file with different key value pair to a csv file	C_242_3	var = string var . split ( string ) [ string , string ]	0
Q_242	convert a text file with different key value pair to a csv file	C_242_4	[ var . split ( string ) for var in line . split ( string ) ] [ [ string , string ] , [ string , string ] , [ string , string ] ]	0
Q_242	convert a text file with different key value pair to a csv file	C_242_5	( dict ( var . split ( string ) for var in line . split ( string ) ) for line in s . split ( string ) ) < generator object < genexpr > at number >	0
Q_242	convert a text file with different key value pair to a csv file	C_242_6	pd . data_frame . from_records ( dict ( var . split ( string ) for var in var . split ( string ) ) for var in lines )	0
Q_242	convert a text file with different key value pair to a csv file	C_242_7	name dob address mobile telephone number state telephone number number john number _ number number _ number number radio park drive na_n na_n na_n na_n number jane number number _ number _ number number timbercrest road number _ number _ number na_n na_n na_n number liam number _ number number _ number number number fairmont avenue na_n number _ number _ number na_n na_n number chris number number _ number _ number number green avenue na_n na_n california number _ number _ number	0
Q_242	convert a text file with different key value pair to a csv file	C_242_8	def lines ( path ) with open ( path ) as file while line = file . readline ( ) yield line . rstrip ( )	0
Q_242	convert a text file with different key value pair to a csv file	C_242_9	def lines ( path ) with open ( path ) as file while true line = file . readline ( ) if line yield line . rstrip ( ) else return	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_0	in [ number ] data = np . random . randn ( number , number , number )	1
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_1	in [ number ] idx = np . nonzero ( np . isfinite ( data ) ) in [ number ] len ( idx ) out [ number ] number in [ number ] idx [ number ] . shape out [ number ] ( number , )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_2	in [ number ] idxs = np . argwhere ( np . isfinite ( data ) ) in [ number ] idxs . shape out [ number ] ( number , number )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_3	in [ number ] dropidxs = idxs [ np . random . choice ( idxs . shape [ number ] , number , replace = false ) ] in [ number ] dropidxs . shape out [ number ] ( number , number ) in [ number ] dropidxs out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_4	var = np . random . choice ( . )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_5	in [ number ] tup = tuple ( [ dropidxs [ , var ] for var in range ( number ) ] ) in [ number ] tup out [ number ] ( array ( [ number , number , number ] ) , array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ) in [ number ] data [ tup ] out [ number ] array ( [ _ number . number , number . number , number . number ] ) in [ number ] data [ tup ] = np . nan in [ number ] data out [ number ] array ( [ [ [ _ number . number , number . number , _ number . number number ] , [ _ number . number , number . number number , number . number ] , [ number . number , _ number . number , number . number ] ] , [ [ _ number . number number , number . number , _ number . number ] , [ nan , _ number . number , number . number ] , [ number . number , _ number . number number , _ number . number ] ] , [ [ _ number . number , number . number , _ number . number ] , [ number . number , nan , nan ] , [ number . number , _ number . number , _ number . number ] ] ] )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_6	in [ number ] data [ dropidxs [ , number ] , dropidxs [ , number ] , dropidxs [ , number ] ] out [ number ] array ( [ nan , nan , nan ] )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_7	in [ number ] tdrop = dropidxs . t in [ number ] tuple ( tdrop ) out [ number ] ( array ( [ number , number , number ] ) , array ( [ number , number , number ] ) , array ( [ number , number , number ] ) ) in [ number ] data [ tuple ( tdrop ) ] out [ number ] array ( [ nan , nan , nan ] )	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_8	in [ number ] data [ * tdrop ] file string , line number data [ * tdrop ] ^ syntax_error invalid syntax	0
Q_243	replace value in n_dimensional tensor give index from np argwhere	C_243_9	in [ number ] data [ ( * tdrop , ) ] out [ number ] array ( [ nan , nan , nan ] )	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_0	import pandas as pd import datetime data_dict = { string [ string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string ] , string [ string , string , string , string , string , string , string , string ] } pdf = pd . data_frame . from_dict ( data = data_dict ) pdf [ string ] = pd . to_datetime ( pdf [ string ] , format = string ) pdf [ string ] = pd . to_datetime ( pdf [ string ] , format = string )	1
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_1	user license status start _ date end _ date a xy access number _ number number _ number number _ number number _ number b xy access number _ number number _ number number _ number number _ number c xy access number _ number number _ number number _ number number _ number a xy access number _ number number _ number number _ number number _ number a xy access number _ number number _ number number _ number number _ number b xy access number _ number number _ number number _ number number _ number a xy access number _ number number _ number number _ number number _ number a xy access number _ number number _ number number _ number number _ number	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_2	def f ( df_grouped ) df_grouped = df_grouped . sort_values ( by = string ) . reset_index ( drop = true ) df_grouped [ string ] = ( df_grouped [ string ] > df_grouped [ string ] . shift ( ) ) . cumsum ( ) grp = df_grouped . groupby ( string ) df_grouped [ string ] = grp [ string ] . transform ( string ) df_grouped [ string ] = grp [ string ] . transform ( string ) return df_grouped . drop ( string , axis = number ) pdf2 = pdf . groupby ( [ string , string , string ] ) . apply ( f ) . drop ( [ string , string ] , axis = number ) . drop_duplicates ( )	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_3	user license status new _ start _ date new _ end _ date user license status a xy access number a xy access number _ number number _ number number _ number number _ number number a xy access number _ number number _ number number _ number number _ number b xy access number b xy access number _ number number _ number number _ number number _ number number b xy access number _ number number _ number number _ number number _ number c xy access number c xy access number _ number number _ number number _ number number _ number	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_4	var = ( pdf [ string ] . max ( ) _ pdf [ string ] . min ( ) ) . days + number	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_5	dates number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number number _ number	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_6	var = pd . merge ( pdf2 , pdf3 , how = string ) def final_data_prep ( start , end , date ) if date > = start and date < = end return number else return number var [ string ] = var [ [ string , string , string ] ] . apply ( lambda x final_data_prep ( x [ number ] , x [ number ] , x [ number ] ) , axis = number )	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_7	user license status new _ start _ date new _ end _ date dates num _ license number a xy access number _ number number _ number number _ number number _ number number _ number number _ number number number a xy access number _ number number _ number number _ number number _ number number _ number number _ number number number a xy access number _ number number _ number number _ number number _ number number _ number number _ number number number a xy access number _ number number _ number number _ number number _ number number _ number number _ number number number a xy access number _ number number _ number number _ number number _ number number _ number number _ number number . . . . . . . . number c xy access number _ number number _ number number _ number number _ number number _ number number _ number number number c xy access number _ number number _ number number _ number number _ number number _ number number _ number number number c xy access number _ number number _ number number _ number number _ number number _ number number _ number number number c xy access number _ number number _ number number _ number number _ number number _ number number _ number number number c xy access number _ number number _ number number _ number number _ number number _ number number _ number number	0
Q_244	how do i convert a dataframe with time_period into a particular format	C_244_8	var = pdf4 [ [ string , string , string , string , string ] ] . groupby ( string ) [ string ] . sum ( ) . reset_index ( ) . sort_values ( [ string ] , ascending = true ) . reset_index ( drop = true )	0
Q_245	split a column in panda dataframe use regular expression	C_245_0	import re import pandas as pd import io text = string string string	1
Q_245	split a column in panda dataframe use regular expression	C_245_1	var = pd . read_fwf ( io . string_io ( text ) , widths = [ number , number ] , skiprows = number , header = none ) var . columns = [ string , string ]	0
Q_245	split a column in panda dataframe use regular expression	C_245_2	category component number cold / ca storage cold storage09350 . number mt number cold / ca storage cold storage04800 . number mt number cold / ca storage cold storage08480 . number mt number cold / ca storage cold storage08650 . number mt number cold / ca storage cold storage03420 . number mt number post harvest infrastructure conveyor beltna3 . number nos number post harvest infrastructure conveyor beltna3 . number nos number post harvest infrastructure conveyor beltna5 . number nos number post harvest infrastructure conveyor beltna5 . number nos number post harvest infrastructure conveyor beltna1019_tones	0
Q_245	split a column in panda dataframe use regular expression	C_245_3	def get_match_list ( regex , dataserie ) matches = list ( ) for var in dataserie if match = re . search ( regex , var ) matches . append ( match . group ( number ) ) else matches . append ( none ) return matches	0
Q_245	split a column in panda dataframe use regular expression	C_245_4	df [ string ] = get_match_list ( string , df [ string ] )	0
Q_245	split a column in panda dataframe use regular expression	C_245_5	var = df [ string ] . str . split ( string , expand = true , regex = true , n = number ) var . columns = [ string , string ]	0
Q_245	split a column in panda dataframe use regular expression	C_245_6	details [ string ] = get_match_list ( string , details [ string ] ) details [ string ] = details [ string ] . str . replace ( string , string , regex = true )	0
Q_245	split a column in panda dataframe use regular expression	C_245_7	var = pd . concat ( [ df [ [ string , string ] ] , details ] , axis = number ) var = var [ [ string , string , string , string , string ] ]	0
Q_245	split a column in panda dataframe use regular expression	C_245_8	category component number weight unit number cold / ca storage cold storage number number number . number mt number cold / ca storage cold storage number number number . number mt number cold / ca storage cold storage number number number . number mt number cold / ca storage cold storage number number number . number mt number cold / ca storage cold storage number number number . number mt number post harvest infrastructure conveyor belt na number . number nos number post harvest infrastructure conveyor belt na number . number nos number post harvest infrastructure conveyor belt na number . number nos number post harvest infrastructure conveyor belt na number . number nos number post harvest infrastructure conveyor belt na number tones	0
Q_246	shap how do i interpret expect value for force_plot	C_246_0	from sklearn . ensemble import random_forest_classifier from sklearn . datasets import load_breast_cancer from sklearn . model_selection import train_test_split from shap import tree_explainer from shap . maskers import independent from scipy . special import expit , logit x , y = load_breast_cancer ( return_x_y = true ) x_train , x_test , y_train , y_test = train_test_split ( x , y , random_state = number ) model = random_forest_classifier ( max_depth = number , n_estimators = number ) . fit ( x_train , y_train )	1
Q_246	shap how do i interpret expect value for force_plot	C_246_1	var = independent ( data = x_train ) explainer = tree_explainer ( model , data = var ) ev = explainer . expected_value ev	0
Q_246	shap how do i interpret expect value for force_plot	C_246_2	array ( [ number . number , number . number ] )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_3	model . predict_proba ( masker . data ) . mean ( number )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_4	array ( [ number . number , number . number ] )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_5	var = x_train [ [ number ] ] model . predict_proba ( var )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_6	array ( [ [ number . number number , number . number ] ] )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_7	var = explainer . shap_values ( data_to_explain ) np . array ( var ) . sum ( number ) . ravel ( )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_8	array ( [ _ number . number , number . number ] )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_9	ev + np . array ( sv ) . sum ( number ) . ravel ( )	0
Q_246	shap how do i interpret expect value for force_plot	C_246_10	array ( [ number . number number , number . number ] )	0
Q_247	build a list of array without tagstr with slide window	C_247_0	in [ number ] out out [ number ] [ [ [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] ] , [ [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] ] ]	1
Q_247	build a list of array without tagstr with slide window	C_247_1	in [ number ] arr = np . array ( out , object ) in [ number ] arr out [ number ] array ( [ [ [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] ] , [ [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] , [ array ( [ number , number , number ] ) , number ] ] ] , dtype = object ) in [ number ] arr . shape out [ number ] ( number , number , number )	0
Q_247	build a list of array without tagstr with slide window	C_247_2	x_row . append ( np . array ( [ ytmp ] ) ) in [ number ] np . array ( out , object ) out [ number ] array ( [ [ [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] ] , [ [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] , [ array ( [ number , number , number ] ) , array ( [ number ] ) ] ] ] , dtype = object )	0
Q_247	build a list of array without tagstr with slide window	C_247_3	in [ number ] print ( _ ) [ [ [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] ] [ [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] ] ]	0
Q_247	build a list of array without tagstr with slide window	C_247_4	in [ number ] print ( out [ number ] . reshape ( _ number , number ) ) [ [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] [ array ( [ number , number , number ] ) array ( [ number ] ) ] ]	0
Q_247	build a list of array without tagstr with slide window	C_247_5	in [ number ] np . lib . stride_tricks . sliding_window_view ( a , ( number , number ) ) out [ number ] array ( [ [ [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] ] , [ [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] , [ [ number , number , number , number ] ] ] ] ) in [ number ] x = np . lib . stride_tricks . sliding_window_view ( a , ( number , number ) ) in [ number ] x . shape out [ number ] ( number , number , number , number )	0
Q_247	build a list of array without tagstr with slide window	C_247_6	in [ number ] x [ , , number , number ] out [ number ] array ( [ [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] , [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ] ) in [ number ] x [ , , number , number ] . reshape ( _ number , number ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] )	0
Q_247	build a list of array without tagstr with slide window	C_247_7	in [ number ] x [ , , number , _ number ] . reshape ( _ number , number ) out [ number ] array ( [ [ number ] , [ number ] , [ number ] , [ number ] , [ number ] , [ number ] , [ number ] , [ number ] ] )	0
Q_247	build a list of array without tagstr with slide window	C_247_8	in [ number ] np . stack ( arr . reshape ( _ number , number ) [ , number ] ) out [ number ] array ( [ [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] , [ number , number , number ] ] ) in [ number ] arr . reshape ( _ number , number ) [ , number ] . astype ( int ) out [ number ] array ( [ number , number , number , number , number , number , number , number ] )	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_0	var = number or number number or number or number ( number number ) * [ number number ( number ) + ( number ) + number ( number ) * number number ( number ) * ] ( number ) * number	1
Q_248	optimize my solution for tagint _d peg solitaire	C_248_1	number ( number number ) * number ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_2	number ( number number ) * ( number ) ( number ) + ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_3	number ( number number ) * ( number ) + ( number ) ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_4	number ( number number ) * ( number ) * ( number ) ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_5	number ( number number ) * number ( number ) * ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_6	number ( number number ) * ( number ) * number number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_7	number ( number ) * ( number ) * number	0
Q_248	optimize my solution for tagint _d peg solitaire	C_248_8	string . join ( [ str ( var ) for var in mylist ] )	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_0	var = df . groupby ( [ string , string ] , as_index = false ) [ string ] . transform ( lambda g g . diff ( ) ) . le ( pd . timedelta ( minutes = number ) ) [ string ] df = df . loc [ ( var var . shift ( _ number ) ) ]	1
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_1	var = df . groupby ( [ string , string ] , as_index = false ) [ string ] . transform ( lambda g g . var ( ) )	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_2	print ( diff ) time number na_t number na_t number number days number number number number number days number number number number number number days number number number number number days number number number number number number days number number number number number number na_t number number days number number number number number na_t number na_t	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_3	var = diff . le ( pd . timedelta ( minutes = number ) )	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_4	print ( m ) time number false number false number false number false number true number false number false number false number true number false number false	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_5	var = var var . shift ( _ number )	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_6	print ( m ) time number false number false number false number true number true number false number false number true number true number false number false	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_7	var = var . loc [ m [ string ] ]	0
Q_249	panda drop row in consecutive time range and with same pair of feature	C_249_8	print ( df ) id1 id2 time number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number number number number number _ number number _ number number number number	0
